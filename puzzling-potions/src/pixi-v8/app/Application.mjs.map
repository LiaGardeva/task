{"version":3,"file":"Application.mjs","sources":["../../src/app/Application.ts"],"sourcesContent":["import { extensions, ExtensionType } from '../extensions/Extensions';\nimport { autoDetectRenderer } from '../rendering/renderers/autoDetectRenderer';\nimport { Container } from '../rendering/scene/Container';\n\nimport type { AutoDetectOptions } from '../rendering/renderers/autoDetectRenderer';\nimport type { Renderer } from '../rendering/renderers/types';\nimport type { ICanvas } from '../settings/adapter/ICanvas';\nimport type { ResizePluginOptions } from './ResizePlugin';\n\n/**\n * Any plugin that's usable for Application should contain these methods.\n * @memberof PIXI\n */\nexport interface ApplicationPlugin\n{\n    /**\n     * Called when Application is constructed, scoped to Application instance.\n     * Passes in `options` as the only argument, which are Application constructor options.\n     * @param {object} options - Application options.\n     */\n    init(options: Partial<ApplicationOptions>): void;\n    /** Called when destroying Application, scoped to Application instance. */\n    destroy(): void;\n}\n\n/**\n * Application options supplied to constructor.\n * @memberof PIXI\n */\nexport interface ApplicationOptions extends AutoDetectOptions, PixiMixins.ApplicationOptions, ResizePluginOptions {}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Application extends PixiMixins.Application {}\n\n/**\n * Convenience class to create a new PixiJS application.\n *\n * This class automatically creates the renderer, ticker and root container.\n * @example\n * import { Application, Sprite } from 'pixi.js';\n *\n * // Create the application\n * const app = new Application();\n *\n * await app.init();\n *\n * // Add the view to the DOM\n * document.body.appendChild(app.view);\n *\n * // ex, add display objects\n * app.stage.addChild(Sprite.from('something.png'));\n * @class\n * @memberof PIXI\n */\nexport class Application<VIEW extends ICanvas = ICanvas>\n{\n    /** Collection of installed plugins. */\n    static _plugins: ApplicationPlugin[] = [];\n\n    /**\n     * The root display container that's rendered.\n     * @member {PIXI.Container}\n     */\n    public stage: Container = new Container();\n\n    /**\n     * WebGL renderer if available, otherwise CanvasRenderer.\n     * @member {PIXI.Renderer}\n     */\n    public renderer: Renderer;\n\n    /**\n     * @param options - The optional application and renderer parameters.\n     */\n    public async init(options?: Partial<ApplicationOptions>)\n    {\n        // The default options\n        options = {\n            ...{\n                // forceCanvas: false,\n            },\n            ...options,\n        };\n\n        this.renderer = await autoDetectRenderer(options as ApplicationOptions);\n\n        // install plugins here\n        Application._plugins.forEach((plugin) =>\n        {\n            plugin.init.call(this, options);\n        });\n    }\n\n    /** Render the current stage. */\n    public render(): void\n    {\n        this.renderer.render({ container: this.stage });\n    }\n\n    /**\n     * Reference to the renderer's canvas element.\n     * @member {PIXI.ICanvas}\n     * @readonly\n     */\n    get canvas(): VIEW\n    {\n        return this.renderer.element as VIEW;\n    }\n\n    // TODO: not implemented\n    // /**\n    //  * Reference to the renderer's screen rectangle. Its safe to use as `filterArea` or `hitArea` for the whole screen.\n    //  * @member {PIXI.Rectangle}\n    //  * @readonly\n    //  */\n    // get screen(): Rectangle\n    // {\n    //     return this.renderer.screen;\n    // }\n\n    // TODO: implement destroy\n    // /**\n    //  * Destroy and don't use after this.\n    //  * @param {boolean} [removeView=false] - Automatically remove canvas from DOM.\n    //  * @param {object|boolean} [stageOptions] - Options parameter. A boolean will act as if all options\n    //  *  have been set to that value\n    //  * @param {boolean} [stageOptions.children=false] - if set to true, all the children will have their destroy\n    //  *  method called as well. 'stageOptions' will be passed on to those calls.\n    //  * @param {boolean} [stageOptions.texture=false] - Only used for child Sprites if stageOptions.children is set\n    //  *  to true. Should it destroy the texture of the child sprite\n    //  * @param {boolean} [stageOptions.baseTexture=false] - Only used for child Sprites if stageOptions.children is set\n    //  *  to true. Should it destroy the base texture of the child sprite\n    //  */\n    // public destroy(removeView?: boolean, stageOptions?: IDestroyOptions | boolean): void\n    // {\n    //     // Destroy plugins in the opposite order\n    //     // which they were constructed\n    //     const plugins = Application._plugins.slice(0);\n\n    //     plugins.reverse();\n    //     plugins.forEach((plugin) =>\n    //     {\n    //         plugin.destroy.call(this);\n    //     });\n\n    //     this.stage.destroy(stageOptions);\n    //     this.stage = null;\n\n    //     this.renderer.destroy(removeView);\n    //     this.renderer = null;\n    // }\n}\n\nextensions.handleByList(ExtensionType.Application, Application._plugins);\n"],"names":[],"mappings":";;;;AAsDO,MAAM,eAAN,MACP;AAAA,EADO,WAAA,GAAA;AASH;AAAA;AAAA;AAAA;AAAA,IAAO,IAAA,CAAA,KAAA,GAAmB,IAAI,SAAU,EAAA,CAAA;AAAA,GAAA;AAAA;AAAA;AAAA;AAAA,EAWxC,MAAa,KAAK,OAClB,EAAA;AAEI,IAAU,OAAA,GAAA;AAAA,MACN,GAAG;AAAA;AAAA,OAEH;AAAA,MACA,GAAG,OAAA;AAAA,KACP,CAAA;AAEA,IAAK,IAAA,CAAA,QAAA,GAAW,MAAM,kBAAA,CAAmB,OAA6B,CAAA,CAAA;AAGtE,IAAY,YAAA,CAAA,QAAA,CAAS,OAAQ,CAAA,CAAC,MAC9B,KAAA;AACI,MAAO,MAAA,CAAA,IAAA,CAAK,IAAK,CAAA,IAAA,EAAM,OAAO,CAAA,CAAA;AAAA,KACjC,CAAA,CAAA;AAAA,GACL;AAAA;AAAA,EAGO,MACP,GAAA;AACI,IAAA,IAAA,CAAK,SAAS,MAAO,CAAA,EAAE,SAAW,EAAA,IAAA,CAAK,OAAO,CAAA,CAAA;AAAA,GAClD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,MACJ,GAAA;AACI,IAAA,OAAO,KAAK,QAAS,CAAA,OAAA,CAAA;AAAA,GACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4CJ,CAAA,CAAA;AAjGO,IAAM,WAAN,GAAA,aAAA;AAAA;AAAM,WAAA,CAGF,WAAgC,EAAC,CAAA;AAgG5C,UAAA,CAAW,YAAa,CAAA,aAAA,CAAc,WAAa,EAAA,WAAA,CAAY,QAAQ,CAAA;;;;"}