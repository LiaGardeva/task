{"version":3,"file":"loadSVG.mjs","sources":["../../../../../src/assets/loader/parsers/textures/loadSVG.ts"],"sourcesContent":["import { ExtensionType } from '../../../../extensions/Extensions';\nimport { GraphicsContext } from '../../../../rendering/graphics/shared/GraphicsContext';\nimport { settings } from '../../../../settings/settings';\nimport { checkDataUrl } from '../../../utils/checkDataUrl';\nimport { checkExtension } from '../../../utils/checkExtension';\nimport { LoaderParserPriority } from '../LoaderParser';\n\nimport type { LoaderParser } from '../LoaderParser';\n\n/**\n * Regular expression for SVG XML document.\n * @example &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;&lt;!-- image/svg --&gt;&lt;svg\n * @readonly\n */\nconst SVG_XML = /^(<\\?xml[^?]+\\?>)?\\s*(<!--[^(-->)]*-->)?\\s*\\<svg/m;\nconst validSVGExtension = '.svg';\nconst validSVGMIME = 'image/svg+xml';\n\n/** simple loader plugin for loading json data */\nexport const loadSvg = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.Low,\n    },\n\n    name: 'loadSVG',\n\n    test(url: string): boolean\n    {\n        return checkDataUrl(url, validSVGMIME) || checkExtension(url, validSVGExtension);\n    },\n\n    async testParse(data: string): Promise<boolean>\n    {\n        // source is SVG data-uri\n        return (typeof data === 'string' && data.startsWith('data:image/svg+xml'))\n        // source is SVG inline\n        || (typeof data === 'string' && SVG_XML.test(data));\n    },\n\n    async parse(asset: string): Promise<GraphicsContext>\n    {\n        const context = new GraphicsContext();\n\n        context.svg(asset);\n\n        return context;\n    },\n\n    async load(url: string): Promise<string>\n    {\n        const response = await settings.ADAPTER.fetch(url);\n\n        return response.text();\n    },\n\n    // TODO: unload function\n} as LoaderParser<string>;\n"],"names":[],"mappings":";;;;;;;AAcA,MAAM,OAAU,GAAA,mDAAA,CAAA;AAChB,MAAM,iBAAoB,GAAA,MAAA,CAAA;AAC1B,MAAM,YAAe,GAAA,eAAA,CAAA;AAGd,MAAM,OAAU,GAAA;AAAA,EACnB,SAAW,EAAA;AAAA,IACP,MAAM,aAAc,CAAA,UAAA;AAAA,IACpB,UAAU,oBAAqB,CAAA,GAAA;AAAA,GACnC;AAAA,EAEA,IAAM,EAAA,SAAA;AAAA,EAEN,KAAK,GACL,EAAA;AACI,IAAA,OAAO,aAAa,GAAK,EAAA,YAAY,CAAK,IAAA,cAAA,CAAe,KAAK,iBAAiB,CAAA,CAAA;AAAA,GACnF;AAAA,EAEA,MAAM,UAAU,IAChB,EAAA;AAEI,IAAA,OAAQ,OAAO,IAAA,KAAS,QAAY,IAAA,IAAA,CAAK,UAAW,CAAA,oBAAoB,CAEpE,IAAA,OAAO,IAAS,KAAA,QAAA,IAAY,OAAQ,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AAAA,GACrD;AAAA,EAEA,MAAM,MAAM,KACZ,EAAA;AACI,IAAM,MAAA,OAAA,GAAU,IAAI,eAAgB,EAAA,CAAA;AAEpC,IAAA,OAAA,CAAQ,IAAI,KAAK,CAAA,CAAA;AAEjB,IAAO,OAAA,OAAA,CAAA;AAAA,GACX;AAAA,EAEA,MAAM,KAAK,GACX,EAAA;AACI,IAAA,MAAM,QAAW,GAAA,MAAM,QAAS,CAAA,OAAA,CAAQ,MAAM,GAAG,CAAA,CAAA;AAEjD,IAAA,OAAO,SAAS,IAAK,EAAA,CAAA;AAAA,GACzB;AAAA;AAGJ;;;;"}