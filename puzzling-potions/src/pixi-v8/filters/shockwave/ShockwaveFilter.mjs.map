{"version":3,"file":"ShockwaveFilter.mjs","sources":["../../../src/filters/shockwave/ShockwaveFilter.ts"],"sourcesContent":["import { Filter } from '../../rendering/filters/Filter';\nimport { GlProgram } from '../../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../rendering/renderers/gpu/shader/GpuProgram';\nimport { UniformGroup } from '../../rendering/renderers/shared/shader/UniformGroup';\nimport fragment from './shockwave.frag';\nimport vertex from './shockwave.vert';\nimport source from './shockwave.wgsl';\n\nimport type { PointData } from '../../maths/PointData';\nimport type { FilterSystem } from '../../rendering/filters/shared/FilterSystem';\nimport type { RenderSurface } from '../../rendering/renderers/gpu/renderTarget/GpuRenderTargetSystem';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\n\nexport interface ShockwaveFilterOptions\n{\n    /**\n     * The `x` and `y` center coordinates to change the position of the center of the circle of effect.\n     * @default [0,0]\n     */\n    center?: PointData;\n    /**\n     * The speed about the shockwave ripples out. The unit is `pixel-per-second`\n     * @default 500\n     */\n    speed?: number;\n    /**\n     * The amplitude of the shockwave\n     * @default 30\n     */\n    amplitude?: number;\n    /**\n     * The wavelength of the shockwave\n     * @default 160\n     */\n    wavelength?: number;\n    /**\n     * The brightness of the shockwave\n     * @default 1\n     */\n    brightness?: number;\n    /**\n     * The maximum radius of shockwave. less than `0` means the max is an infinite distance\n     * @default -1\n     */\n    radius?: number;\n}\n\n/**\n * A Noise effect filter.\n *\n * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js\n * @memberof PIXI.filters\n * @author Vico @vicocotea\n */\nexport class ShockwaveFilter extends Filter\n{\n    static readonly DEFAULT: ShockwaveFilterOptions = {\n        center: { x: 0, y: 0 },\n        speed: 500,\n        amplitude: 30,\n        wavelength: 160,\n        brightness: 1,\n        radius: -1,\n    };\n\n    public uniforms: {\n        uTime: number;\n        uCenter: PointData;\n        uSpeed: number;\n        uWave: Float32Array;\n    };\n\n    time: number;\n\n    /**\n     * @param options\n     */\n    constructor(options: ShockwaveFilterOptions = {})\n    {\n        options = { ...ShockwaveFilter.DEFAULT, ...options };\n\n        const gpuProgram = new GpuProgram({\n            vertex: {\n                source,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = new GlProgram({\n            vertex,\n            fragment,\n            name: 'shockwave-filter'\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                shockwaveUniforms: new UniformGroup({\n                    uTime: { value: 0, type: 'f32' },\n                    uCenter: { value: options.center, type: 'vec2<f32>' },\n                    uSpeed: { value: options.speed, type: 'f32' },\n                    uWave: { value: new Float32Array(4), type: 'vec4<f32>' },\n                })\n            },\n            resolution: 1,\n        });\n\n        this.time = 0;\n\n        this.uniforms = this.resources.shockwaveUniforms.uniforms;\n\n        Object.assign(this, options);\n    }\n\n    public override apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clearMode: boolean\n    ): void\n    {\n        // There is no set/get of `time`, for performance.\n        // Because in the most real cases, `time` will be changed in ever game tick.\n        // Use set/get will take more function-call.\n        this.uniforms.uTime = this.time;\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n\n    /**\n     * The `x` and `y` center coordinates to change the position of the center of the circle of effect.\n     * @default [0,0]\n     */\n    get center(): PointData { return this.uniforms.uCenter; }\n    set center(value: PointData) { this.uniforms.uCenter = value; }\n\n    /**\n     * Sets the center of the effect in normalized screen coords on the `x` axis\n     * @default 0\n     */\n    get centerX(): number { return this.uniforms.uCenter.x; }\n    set centerX(value: number) { this.uniforms.uCenter.x = value; }\n\n    /**\n     * Sets the center of the effect in normalized screen coords on the `y` axis\n     * @default 0\n     */\n    get centerY(): number { return this.uniforms.uCenter.y; }\n    set centerY(value: number) { this.uniforms.uCenter.y = value; }\n\n    /**\n     * The speed about the shockwave ripples out. The unit is `pixel-per-second`\n     * @default 500\n     */\n    get speed(): number { return this.uniforms.uSpeed; }\n    set speed(value: number) { this.uniforms.uSpeed = value; }\n\n    /**\n     * The amplitude of the shockwave\n     * @default 30\n     */\n    get amplitude(): number { return this.uniforms.uWave[0]; }\n    set amplitude(value: number) { this.uniforms.uWave[0] = value; }\n\n    /**\n     * The wavelength of the shockwave\n     * @default 160\n     */\n    get wavelength(): number { return this.uniforms.uWave[1]; }\n    set wavelength(value: number) { this.uniforms.uWave[1] = value; }\n\n    /**\n     * The brightness of the shockwave\n     * @default 1\n     */\n    get brightness(): number { return this.uniforms.uWave[2]; }\n    set brightness(value: number) { this.uniforms.uWave[2] = value; }\n\n    /**\n     * The maximum radius of shockwave. less than `0` means the max is an infinite distance\n     * @default -1\n     */\n    get radius(): number { return this.uniforms.uWave[3]; }\n    set radius(value: number) { this.uniforms.uWave[3] = value; }\n}\n"],"names":[],"mappings":"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"}