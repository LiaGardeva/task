'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('./all.js');
var Application = require('./app/Application.js');
require('./app/init.js');
var ResizePlugin = require('./app/ResizePlugin.js');
require('./assets/AssetExtension.js');
var Assets = require('./assets/Assets.js');
var BackgroundLoader = require('./assets/BackgroundLoader.js');
var Cache = require('./assets/cache/Cache.js');
require('./assets/cache/CacheParser.js');
var cacheTextureArray = require('./assets/cache/parsers/cacheTextureArray.js');
var detectAvif = require('./assets/detections/parsers/detectAvif.js');
var detectDefaults = require('./assets/detections/parsers/detectDefaults.js');
var detectMp4 = require('./assets/detections/parsers/detectMp4.js');
var detectOgv = require('./assets/detections/parsers/detectOgv.js');
var detectWebm = require('./assets/detections/parsers/detectWebm.js');
var detectWebp = require('./assets/detections/parsers/detectWebp.js');
require('./assets/detections/types.js');
var testVideoFormat = require('./assets/detections/utils/testVideoFormat.js');
require('./assets/init.js');
var Loader = require('./assets/loader/Loader.js');
var LoaderParser = require('./assets/loader/parsers/LoaderParser.js');
var loadJson = require('./assets/loader/parsers/loadJson.js');
var loadTxt = require('./assets/loader/parsers/loadTxt.js');
var loadWebFont = require('./assets/loader/parsers/loadWebFont.js');
var loadSVG = require('./assets/loader/parsers/textures/loadSVG.js');
var loadTextures = require('./assets/loader/parsers/textures/loadTextures.js');
var createTexture = require('./assets/loader/parsers/textures/utils/createTexture.js');
var WorkerManager = require('./assets/loader/parsers/WorkerManager.js');
require('./assets/loader/types.js');
var resolveTextureUrl = require('./assets/resolver/parsers/resolveTextureUrl.js');
var Resolver = require('./assets/resolver/Resolver.js');
require('./assets/resolver/types.js');
require('./assets/types.js');
var checkDataUrl = require('./assets/utils/checkDataUrl.js');
var checkExtension = require('./assets/utils/checkExtension.js');
var convertToList = require('./assets/utils/convertToList.js');
var copySearchParams = require('./assets/utils/copySearchParams.js');
var createStringVariations = require('./assets/utils/createStringVariations.js');
var isSingleItem = require('./assets/utils/isSingleItem.js');
var EventBoundary = require('./events/EventBoundary.js');
require('./events/EventBoundaryTypes.js');
var EventSystem = require('./events/EventSystem.js');
var EventTicker = require('./events/EventTicker.js');
var FederatedEvent = require('./events/FederatedEvent.js');
require('./events/FederatedEventMap.js');
var FederatedEventTarget = require('./events/FederatedEventTarget.js');
var FederatedMouseEvent = require('./events/FederatedMouseEvent.js');
var FederatedPointerEvent = require('./events/FederatedPointerEvent.js');
var FederatedWheelEvent = require('./events/FederatedWheelEvent.js');
require('./events/init.js');
var Extensions = require('./extensions/Extensions.js');
var ShockwaveFilter = require('./filters/shockwave/ShockwaveFilter.js');
var _const = require('./maths/const.js');
var groupD8 = require('./maths/groupD8.js');
var Matrix = require('./maths/Matrix.js');
var ObservablePoint = require('./maths/ObservablePoint.js');
var Point = require('./maths/Point.js');
require('./maths/PointData.js');
require('./maths/PointLike.js');
var pow2 = require('./maths/pow2.js');
var Circle = require('./maths/shapes/Circle.js');
var Ellipse = require('./maths/shapes/Ellipse.js');
var Polygon = require('./maths/shapes/Polygon.js');
var Rectangle = require('./maths/shapes/Rectangle.js');
var RoundedRectangle = require('./maths/shapes/RoundedRectangle.js');
require('./maths/shapes/ShapePrimitive.js');
var Triangle = require('./maths/shapes/Triangle.js');
require('./maths/Size.js');
var NineSliceGeometry = require('./mesh-extras/NineSliceGeometry.js');
var NineSlicePlane = require('./mesh-extras/NineSlicePlane.js');
var PlaneGeometry = require('./mesh-extras/PlaneGeometry.js');
var generateBatchGlProgram = require('./rendering/batcher/gl/generateBatchGlProgram.js');
var generateDefaultBatchGlProgram = require('./rendering/batcher/gl/generateDefaultBatchGlProgram.js');
var GlBatchAdaptor = require('./rendering/batcher/gl/GlBatchAdaptor.js');
var BatchGeometry = require('./rendering/batcher/gpu/BatchGeometry.js');
var generateBatchProgram = require('./rendering/batcher/gpu/generateBatchProgram.js');
var generateDefaultBatchProgram = require('./rendering/batcher/gpu/generateDefaultBatchProgram.js');
var getBatchedGeometry = require('./rendering/batcher/gpu/getBatchedGeometry.js');
var getTextureBatchBindGroup = require('./rendering/batcher/gpu/getTextureBatchBindGroup.js');
var GpuBatchAdaptor = require('./rendering/batcher/gpu/GpuBatchAdaptor.js');
var Batcher = require('./rendering/batcher/shared/Batcher.js');
var BatcherPipe = require('./rendering/batcher/shared/BatcherPipe.js');
var _const$1 = require('./rendering/batcher/shared/const.js');
var optimizeBindings = require('./rendering/batcher/shared/optimizeBindings.js');
var TextureBatcher = require('./rendering/batcher/shared/TextureBatcher.js');
var AlphaFilter = require('./rendering/filters/alpha/AlphaFilter.js');
var BlendModeFilter = require('./rendering/filters/blend-modes/BlendModeFilter.js');
var GLhls = require('./rendering/filters/blend-modes/hls/GLhls.js');
var GPUhls = require('./rendering/filters/blend-modes/hls/GPUhls.js');
var ColorMatrixFilter = require('./rendering/filters/color-matrix/ColorMatrixFilter.js');
var DisplacementFilter = require('./rendering/filters/displacement/DisplacementFilter.js');
var Filter = require('./rendering/filters/Filter.js');
var FilterEffect = require('./rendering/filters/FilterEffect.js');
var MaskFilter = require('./rendering/filters/mask/MaskFilter.js');
var NoiseFilter = require('./rendering/filters/noise/NoiseFilter.js');
var FilterPipe = require('./rendering/filters/shared/FilterPipe.js');
var FilterSystem = require('./rendering/filters/shared/FilterSystem.js');
var generateDefaultGraphicsBatchGlProgram = require('./rendering/graphics/gl/generateDefaultGraphicsBatchGlProgram.js');
var GlGraphicsAdaptor = require('./rendering/graphics/gl/GlGraphicsAdaptor.js');
var colorToUniform = require('./rendering/graphics/gpu/colorToUniform.js');
var generateDefaultGraphicsBatchProgram = require('./rendering/graphics/gpu/generateDefaultGraphicsBatchProgram.js');
var GpuGraphicsAdaptor = require('./rendering/graphics/gpu/GpuGraphicsAdaptor.js');
var BatchableGraphics = require('./rendering/graphics/shared/BatchableGraphics.js');
var buildAdaptiveBezier = require('./rendering/graphics/shared/buildCommands/buildAdaptiveBezier.js');
var buildAdaptiveQuadratic = require('./rendering/graphics/shared/buildCommands/buildAdaptiveQuadratic.js');
var buildArc = require('./rendering/graphics/shared/buildCommands/buildArc.js');
var buildArcTo = require('./rendering/graphics/shared/buildCommands/buildArcTo.js');
var buildArcToSvg = require('./rendering/graphics/shared/buildCommands/buildArcToSvg.js');
var buildCircle = require('./rendering/graphics/shared/buildCommands/buildCircle.js');
var buildLine = require('./rendering/graphics/shared/buildCommands/buildLine.js');
var buildPolygon = require('./rendering/graphics/shared/buildCommands/buildPolygon.js');
var buildRectangle = require('./rendering/graphics/shared/buildCommands/buildRectangle.js');
var buildTriangle = require('./rendering/graphics/shared/buildCommands/buildTriangle.js');
var _const$2 = require('./rendering/graphics/shared/const.js');
var FillGradient = require('./rendering/graphics/shared/fill/FillGradient.js');
var FillPattern = require('./rendering/graphics/shared/fill/FillPattern.js');
var Graphics = require('./rendering/graphics/shared/Graphics.js');
var GraphicsContext = require('./rendering/graphics/shared/GraphicsContext.js');
var GraphicsContextSystem = require('./rendering/graphics/shared/GraphicsContextSystem.js');
var GraphicsPipe = require('./rendering/graphics/shared/GraphicsPipe.js');
var GraphicsView = require('./rendering/graphics/shared/GraphicsView.js');
var GraphicsPath = require('./rendering/graphics/shared/path/GraphicsPath.js');
var ShapePath = require('./rendering/graphics/shared/path/ShapePath.js');
var SVGParser = require('./rendering/graphics/shared/svg/SVGParser.js');
var SVGToGraphicsPath = require('./rendering/graphics/shared/svg/SVGToGraphicsPath.js');
var buildContextBatches = require('./rendering/graphics/shared/utils/buildContextBatches.js');
var buildGeometryFromPath = require('./rendering/graphics/shared/utils/buildGeometryFromPath.js');
var convertFillInputToFillStyle = require('./rendering/graphics/shared/utils/convertFillInputToFillStyle.js');
var getOrientationOfPoints = require('./rendering/graphics/shared/utils/getOrientationOfPoints.js');
var triangulateWithHoles = require('./rendering/graphics/shared/utils/triangulateWithHoles.js');
require('./rendering/init.js');
var GpuScissorMaskPipe = require('./rendering/mask/gpu/GpuScissorMaskPipe.js');
var addMaskBounds = require('./rendering/mask/shared/addMaskBounds.js');
var addMaskLocalBounds = require('./rendering/mask/shared/addMaskLocalBounds.js');
var AlphaMask = require('./rendering/mask/shared/AlphaMask.js');
var AlphaMaskPipe = require('./rendering/mask/shared/AlphaMaskPipe.js');
var ColorMask = require('./rendering/mask/shared/ColorMask.js');
var ColorMaskPipe = require('./rendering/mask/shared/ColorMaskPipe.js');
var MaskEffectManager = require('./rendering/mask/shared/MaskEffectManager.js');
var ScissorMask = require('./rendering/mask/shared/ScissorMask.js');
var StencilMask = require('./rendering/mask/shared/StencilMask.js');
var StencilMaskPipe = require('./rendering/mask/shared/StencilMaskPipe.js');
var GlMeshAdaptor = require('./rendering/mesh/gl/GlMeshAdaptor.js');
var GpuMeshAdapter = require('./rendering/mesh/gpu/GpuMeshAdapter.js');
var BatchableMesh = require('./rendering/mesh/shared/BatchableMesh.js');
var getTextureDefaultMatrix = require('./rendering/mesh/shared/getTextureDefaultMatrix.js');
var Mesh = require('./rendering/mesh/shared/Mesh.js');
var MeshGeometry = require('./rendering/mesh/shared/MeshGeometry.js');
var MeshPipe = require('./rendering/mesh/shared/MeshPipe.js');
var MeshShader = require('./rendering/mesh/shared/MeshShader.js');
var MeshView = require('./rendering/mesh/shared/MeshView.js');
var autoDetectRenderer = require('./rendering/renderers/autoDetectRenderer.js');
var _const$3 = require('./rendering/renderers/gl/buffer/const.js');
var GlBuffer = require('./rendering/renderers/gl/buffer/GlBuffer.js');
var GlBufferSystem = require('./rendering/renderers/gl/buffer/GlBufferSystem.js');
var GlContextSystem = require('./rendering/renderers/gl/context/GlContextSystem.js');
require('./rendering/renderers/gl/context/GlRenderingContext.js');
var GlRenderSurface = require('./rendering/renderers/gl/context/GlRenderSurface.js');
require('./rendering/renderers/gl/context/WebGLExtensions.js');
var GlGeometrySystem = require('./rendering/renderers/gl/geometry/GlGeometrySystem.js');
var getGlInfoFromFormat = require('./rendering/renderers/gl/geometry/utils/getGlInfoFromFormat.js');
var GlBackBufferSystem = require('./rendering/renderers/gl/GlBackBufferSystem.js');
var GlColorMaskSystem = require('./rendering/renderers/gl/GlColorMaskSystem.js');
var GlEncoderSystem = require('./rendering/renderers/gl/GlEncoderSystem.js');
var GlRenderTarget = require('./rendering/renderers/gl/GlRenderTarget.js');
var GlRenderTargetSystem = require('./rendering/renderers/gl/GlRenderTargetSystem.js');
var GlStencilSystem = require('./rendering/renderers/gl/GlStencilSystem.js');
var batchSamplersUniformGroup = require('./rendering/renderers/gl/shader/batchSamplersUniformGroup.js');
require('./rendering/renderers/gl/shader/const.js');
var GlProgram = require('./rendering/renderers/gl/shader/GlProgram.js');
var GlProgramData = require('./rendering/renderers/gl/shader/GlProgramData.js');
var GlShaderSystem = require('./rendering/renderers/gl/shader/GlShaderSystem.js');
var GlUniformGroupSystem = require('./rendering/renderers/gl/shader/GlUniformGroupSystem.js');
var compileShader = require('./rendering/renderers/gl/shader/program/compileShader.js');
var defaultValue = require('./rendering/renderers/gl/shader/program/defaultValue.js');
var ensurePrecision = require('./rendering/renderers/gl/shader/program/ensurePrecision.js');
var generateProgram = require('./rendering/renderers/gl/shader/program/generateProgram.js');
var generateUniformsSync = require('./rendering/renderers/gl/shader/program/generateUniformsSync.js');
var getAttributeData = require('./rendering/renderers/gl/shader/program/getAttributeData.js');
var getUniformBufferData = require('./rendering/renderers/gl/shader/program/getUniformBufferData.js');
var getUniformData = require('./rendering/renderers/gl/shader/program/getUniformData.js');
var logProgramError = require('./rendering/renderers/gl/shader/program/logProgramError.js');
var mapSize = require('./rendering/renderers/gl/shader/program/mapSize.js');
var mapType = require('./rendering/renderers/gl/shader/program/mapType.js');
var setProgramName = require('./rendering/renderers/gl/shader/program/setProgramName.js');
var setProgramVersion = require('./rendering/renderers/gl/shader/program/setProgramVersion.js');
var uniformParsers = require('./rendering/renderers/gl/shader/program/uniformParsers.js');
var GlStateSystem = require('./rendering/renderers/gl/state/GlStateSystem.js');
var mapWebGLBlendModesToPixi = require('./rendering/renderers/gl/state/mapWebGLBlendModesToPixi.js');
var _const$4 = require('./rendering/renderers/gl/texture/const.js');
var GlTexture = require('./rendering/renderers/gl/texture/GlTexture.js');
var GlTextureSystem = require('./rendering/renderers/gl/texture/GlTextureSystem.js');
require('./rendering/renderers/gl/texture/uploaders/GLTextureUploader.js');
var glUploadBufferImageResource = require('./rendering/renderers/gl/texture/uploaders/glUploadBufferImageResource.js');
var glUploadImageResource = require('./rendering/renderers/gl/texture/uploaders/glUploadImageResource.js');
var mapFormatToGlFormat = require('./rendering/renderers/gl/texture/utils/mapFormatToGlFormat.js');
var mapFormatToGlInternalFormat = require('./rendering/renderers/gl/texture/utils/mapFormatToGlInternalFormat.js');
var mapFormatToGlType = require('./rendering/renderers/gl/texture/utils/mapFormatToGlType.js');
var pixiToGlMaps = require('./rendering/renderers/gl/texture/utils/pixiToGlMaps.js');
var WebGLRenderer = require('./rendering/renderers/gl/WebGLRenderer.js');
var BindGroupSystem = require('./rendering/renderers/gpu/BindGroupSystem.js');
var GpuBufferSystem = require('./rendering/renderers/gpu/buffer/GpuBufferSystem.js');
var GpuReadBuffer = require('./rendering/renderers/gpu/buffer/GpuReadBuffer.js');
var UniformBufferBatch = require('./rendering/renderers/gpu/buffer/UniformBufferBatch.js');
var GpuColorMaskSystem = require('./rendering/renderers/gpu/GpuColorMaskSystem.js');
var GpuDeviceSystem = require('./rendering/renderers/gpu/GpuDeviceSystem.js');
var GpuEncoderSystem = require('./rendering/renderers/gpu/GpuEncoderSystem.js');
var GpuStencilSystem = require('./rendering/renderers/gpu/GpuStencilSystem.js');
var GpuUniformBatchPipe = require('./rendering/renderers/gpu/GpuUniformBatchPipe.js');
var GpuUniformBufferPipe = require('./rendering/renderers/gpu/GpuUniformBufferPipe.js');
var PipelineSystem = require('./rendering/renderers/gpu/pipeline/PipelineSystem.js');
var calculateProjection = require('./rendering/renderers/gpu/renderTarget/calculateProjection.js');
var GpuRenderTarget = require('./rendering/renderers/gpu/renderTarget/GpuRenderTarget.js');
var GpuRenderTargetSystem = require('./rendering/renderers/gpu/renderTarget/GpuRenderTargetSystem.js');
var BindGroup = require('./rendering/renderers/gpu/shader/BindGroup.js');
require('./rendering/renderers/gpu/shader/BindResource.js');
var extractStructAndGroups = require('./rendering/renderers/gpu/shader/extractStructAndGroups.js');
var generateGpuLayoutGroups = require('./rendering/renderers/gpu/shader/generateGpuLayoutGroups.js');
var generateLayoutHash = require('./rendering/renderers/gpu/shader/generateLayoutHash.js');
var GpuProgram = require('./rendering/renderers/gpu/shader/GpuProgram.js');
var GpuShaderSystem = require('./rendering/renderers/gpu/shader/GpuShaderSystem.js');
var GpuBlendModesToPixi = require('./rendering/renderers/gpu/state/GpuBlendModesToPixi.js');
var GpuStateSystem = require('./rendering/renderers/gpu/state/GpuStateSystem.js');
var GpuStencilModesToPixi = require('./rendering/renderers/gpu/state/GpuStencilModesToPixi.js');
var GpuTextureSystem = require('./rendering/renderers/gpu/texture/GpuTextureSystem.js');
require('./rendering/renderers/gpu/texture/uploaders/GpuTextureUploader.js');
var gpuUploadBufferImageResource = require('./rendering/renderers/gpu/texture/uploaders/gpuUploadBufferImageResource.js');
var gpuUploadImageSource = require('./rendering/renderers/gpu/texture/uploaders/gpuUploadImageSource.js');
var GpuMipmapGenerator = require('./rendering/renderers/gpu/texture/utils/GpuMipmapGenerator.js');
var logDebugTexture = require('./rendering/renderers/gpu/texture/utils/logDebugTexture.js');
var logTexture = require('./rendering/renderers/gpu/texture/utils/logTexture.js');
var WebGPURenderer = require('./rendering/renderers/gpu/WebGPURenderer.js');
var BackgroundSystem = require('./rendering/renderers/shared/background/BackgroundSystem.js');
var BlendModePipe = require('./rendering/renderers/shared/BlendModePipe.js');
var Buffer = require('./rendering/renderers/shared/buffer/Buffer.js');
var BufferResource = require('./rendering/renderers/shared/buffer/BufferResource.js');
var _const$5 = require('./rendering/renderers/shared/buffer/const.js');
var fastCopy = require('./rendering/renderers/shared/buffer/utils/fastCopy.js');
var createIdFromString = require('./rendering/renderers/shared/createIdFromString.js');
require('./rendering/renderers/shared/geometry/const.js');
var Geometry = require('./rendering/renderers/shared/geometry/Geometry.js');
var buildUvs = require('./rendering/renderers/shared/geometry/utils/buildUvs.js');
var ensureIsBuffer = require('./rendering/renderers/shared/geometry/utils/ensureIsBuffer.js');
var transformVertices = require('./rendering/renderers/shared/geometry/utils/transformVertices.js');
require('./rendering/renderers/shared/instructions/Instruction.js');
var InstructionSet = require('./rendering/renderers/shared/instructions/InstructionSet.js');
require('./rendering/renderers/shared/instructions/RenderPipe.js');
var LayerRenderable = require('./rendering/renderers/shared/LayerRenderable.js');
var ProxyRenderable = require('./rendering/renderers/shared/ProxyRenderable.js');
require('./rendering/renderers/shared/Renderable.js');
var GlobalUniformSystem = require('./rendering/renderers/shared/renderTarget/GlobalUniformSystem.js');
var isRenderingToScreen = require('./rendering/renderers/shared/renderTarget/isRenderingToScreen.js');
var RenderTarget = require('./rendering/renderers/shared/renderTarget/RenderTarget.js');
var _const$6 = require('./rendering/renderers/shared/shader/const.js');
var Shader = require('./rendering/renderers/shared/shader/Shader.js');
var UniformBufferSystem = require('./rendering/renderers/shared/shader/UniformBufferSystem.js');
var UniformGroup = require('./rendering/renderers/shared/shader/UniformGroup.js');
var createUBOElements = require('./rendering/renderers/shared/shader/utils/createUBOElements.js');
var createUniformBufferSync = require('./rendering/renderers/shared/shader/utils/createUniformBufferSync.js');
var glslToSTD40 = require('./rendering/renderers/shared/shader/utils/glslToSTD40.js');
var uniformBufferParsers = require('./rendering/renderers/shared/shader/utils/uniformBufferParsers.js');
var HelloSystem = require('./rendering/renderers/shared/startup/HelloSystem.js');
var _const$7 = require('./rendering/renderers/shared/state/const.js');
var State = require('./rendering/renderers/shared/state/State.js');
var AbstractRenderer = require('./rendering/renderers/shared/system/AbstractRenderer.js');
var SharedSystems = require('./rendering/renderers/shared/system/SharedSystems.js');
require('./rendering/renderers/shared/system/System.js');
var SystemRunner = require('./rendering/renderers/shared/system/SystemRunner.js');
var logRenderFlow = require('./rendering/renderers/shared/system/utils/logRenderFlow.js');
require('./rendering/renderers/shared/system/utils/typeUtils.js');
var CanvasPool = require('./rendering/renderers/shared/texture/CanvasPool.js');
var _const$8 = require('./rendering/renderers/shared/texture/const.js');
var BufferImageSource = require('./rendering/renderers/shared/texture/sources/BufferImageSource.js');
var CanvasSource = require('./rendering/renderers/shared/texture/sources/CanvasSource.js');
var ImageSource = require('./rendering/renderers/shared/texture/sources/ImageSource.js');
var TextureSource = require('./rendering/renderers/shared/texture/sources/TextureSource.js');
var Texture = require('./rendering/renderers/shared/texture/Texture.js');
var TextureLayout = require('./rendering/renderers/shared/texture/TextureLayout.js');
var TextureMatrix = require('./rendering/renderers/shared/texture/TextureMatrix.js');
var TexturePool = require('./rendering/renderers/shared/texture/TexturePool.js');
var TextureStyle = require('./rendering/renderers/shared/texture/TextureStyle.js');
var TextureUvs = require('./rendering/renderers/shared/texture/TextureUvs.js');
var generateUID = require('./rendering/renderers/shared/texture/utils/generateUID.js');
var getCanvasTexture = require('./rendering/renderers/shared/texture/utils/getCanvasTexture.js');
var View = require('./rendering/renderers/shared/View.js');
var ViewSystem = require('./rendering/renderers/shared/ViewSystem.js');
require('./rendering/renderers/types.js');
var Bounds = require('./rendering/scene/bounds/Bounds.js');
var getGlobalBounds = require('./rendering/scene/bounds/getGlobalBounds.js');
var getLocalBounds = require('./rendering/scene/bounds/getLocalBounds.js');
var getRenderableBounds = require('./rendering/scene/bounds/getRenderableBounds.js');
var childrenHelperMixin = require('./rendering/scene/container-mixins/childrenHelperMixin.js');
var effectsMixin = require('./rendering/scene/container-mixins/effectsMixin.js');
var getByLabelMixin = require('./rendering/scene/container-mixins/getByLabelMixin.js');
var measureMixin = require('./rendering/scene/container-mixins/measureMixin.js');
var onRenderMixin = require('./rendering/scene/container-mixins/onRenderMixin.js');
var sortMixin = require('./rendering/scene/container-mixins/sortMixin.js');
var toLocalGlobalMixin = require('./rendering/scene/container-mixins/toLocalGlobalMixin.js');
var Container = require('./rendering/scene/Container.js');
require('./rendering/scene/destroyTypes.js');
require('./rendering/scene/Effect.js');
var LayerGroup = require('./rendering/scene/LayerGroup.js');
var LayerPipe = require('./rendering/scene/LayerPipe.js');
var LayerSystem = require('./rendering/scene/LayerSystem.js');
var buildInstructions = require('./rendering/scene/utils/buildInstructions.js');
var collectLayerGroups = require('./rendering/scene/utils/collectLayerGroups.js');
var executeInstructions = require('./rendering/scene/utils/executeInstructions.js');
var mixColors = require('./rendering/scene/utils/mixColors.js');
var mixHexColors = require('./rendering/scene/utils/mixHexColors.js');
var multiplyHexColors = require('./rendering/scene/utils/multiplyHexColors.js');
var updateLayerGroupTransforms = require('./rendering/scene/utils/updateLayerGroupTransforms.js');
var updateLocalTransform = require('./rendering/scene/utils/updateLocalTransform.js');
var updateWorldTransform = require('./rendering/scene/utils/updateWorldTransform.js');
var validateRenderables = require('./rendering/scene/utils/validateRenderables.js');
var BatchableSprite = require('./rendering/sprite/shared/BatchableSprite.js');
var Sprite = require('./rendering/sprite/shared/Sprite.js');
var SpritePipe = require('./rendering/sprite/shared/SpritePipe.js');
var SpriteView = require('./rendering/sprite/shared/SpriteView.js');
var loadBitmapFont = require('./rendering/text/bitmap/asset/loadBitmapFont.js');
var textFormat = require('./rendering/text/bitmap/asset/textFormat.js');
var xmlFormat = require('./rendering/text/bitmap/asset/xmlFormat.js');
var xmlStringFormat = require('./rendering/text/bitmap/asset/xmlStringFormat.js');
var BitmapFont = require('./rendering/text/bitmap/BitmapFont.js');
var BitmapFontManager = require('./rendering/text/bitmap/BitmapFontManager.js');
var BitmapTextPipe = require('./rendering/text/bitmap/BitmapTextPipe.js');
var DynamicBitmapFont = require('./rendering/text/bitmap/DynamicBitmapFont.js');
var getBitmapTextLayout = require('./rendering/text/bitmap/utils/getBitmapTextLayout.js');
var resolveCharacters = require('./rendering/text/bitmap/utils/resolveCharacters.js');
var CanvasTextMetrics = require('./rendering/text/canvas/CanvasTextMetrics.js');
var CanvasTextPipe = require('./rendering/text/canvas/CanvasTextPipe.js');
var CanvasTextSystem = require('./rendering/text/canvas/CanvasTextSystem.js');
var fontStringFromTextStyle = require('./rendering/text/canvas/utils/fontStringFromTextStyle.js');
var getCanvasFillStyle = require('./rendering/text/canvas/utils/getCanvasFillStyle.js');
var generateDefaultSdfBatchGlProgram = require('./rendering/text/sdfShader/generateDefaultSdfBatchGlProgram.js');
var generateDefaultSdfBatchProgram = require('./rendering/text/sdfShader/generateDefaultSdfBatchProgram.js');
var SdfShader = require('./rendering/text/sdfShader/SdfShader.js');
var Text = require('./rendering/text/Text.js');
var TextStyle = require('./rendering/text/TextStyle.js');
var TextView = require('./rendering/text/TextView.js');
var adapter = require('./settings/adapter/adapter.js');
require('./settings/adapter/ICanvas.js');
require('./settings/adapter/ICanvasRenderingContext2D.js');
var settings = require('./settings/settings.js');
var isMobile = require('./settings/utils/isMobile.js');
require('./spritesheet/init.js');
var Spritesheet = require('./spritesheet/Spritesheet.js');
var spritesheetAsset = require('./spritesheet/spritesheetAsset.js');
var _const$9 = require('./ticker/const.js');
var Ticker = require('./ticker/Ticker.js');
var TickerListener = require('./ticker/TickerListener.js');
var TickerPlugin = require('./ticker/TickerPlugin.js');
var QuadGeometry = require('./tiling-sprite/QuadGeometry.js');
var TilingSpriteShader = require('./tiling-sprite/shader/TilingSpriteShader.js');
var TilingSprite = require('./tiling-sprite/TilingSprite.js');
var TilingSpritePipe = require('./tiling-sprite/TilingSpritePipe.js');
var TilingSpriteView = require('./tiling-sprite/TilingSpriteView.js');
var detectVideoAlphaMode = require('./utils/browser/detectVideoAlphaMode.js');
var ColorNames = require('./utils/color/ColorNames.js');
var convertColorToNumber = require('./utils/color/convertColorToNumber.js');
var convertNumberToHex = require('./utils/color/convertNumberToHex.js');
var hex = require('./utils/color/hex.js');
var _const$a = require('./utils/const.js');
var removeItems = require('./utils/data/removeItems.js');
var logScene = require('./utils/debug/logScene.js');
var deprecation = require('./utils/logging/deprecation.js');
var getResolutionOfUrl = require('./utils/network/getResolutionOfUrl.js');
var NOOP = require('./utils/NOOP.js');
var path = require('./utils/path.js');
var Pool = require('./utils/pool/Pool.js');
var PoolGroup = require('./utils/pool/PoolGroup.js');
var sayHello = require('./utils/sayHello.js');
var Transform = require('./utils/Transform.js');
require('./utils/types.js');
var ViewableBuffer = require('./utils/ViewableBuffer.js');
var shockwave = require('./filters/shockwave/shockwave3.js');
var shockwave$1 = require('./filters/shockwave/shockwave2.js');
var shockwave$2 = require('./filters/shockwave/shockwave.js');
var batcherTemplate = require('./rendering/batcher/gl/batcher-template2.js');
var batcherTemplate$1 = require('./rendering/batcher/gl/batcher-template.js');
var batcherTemplate$2 = require('./rendering/batcher/gpu/batcher-template.js');
var alpha = require('./rendering/filters/alpha/alpha.js');
var blendTemplate = require('./rendering/filters/blend-modes/blend-template3.js');
var blendTemplate$1 = require('./rendering/filters/blend-modes/blend-template.js');
var blendTemplate$2 = require('./rendering/filters/blend-modes/blend-template2.js');
var hsl = require('./rendering/filters/blend-modes/hsl.js');
var colorMatrixFilter = require('./rendering/filters/color-matrix/colorMatrixFilter2.js');
var displacement = require('./rendering/filters/displacement/displacement.js');
var mask = require('./rendering/filters/mask/mask3.js');
var mask$1 = require('./rendering/filters/mask/mask.js');
var mask$2 = require('./rendering/filters/mask/mask2.js');
var noise = require('./rendering/filters/noise/noise3.js');
var noise$1 = require('./rendering/filters/noise/noise2.js');
var noise$2 = require('./rendering/filters/noise/noise.js');
var graphicsBatcherTemplate = require('./rendering/graphics/gl/graphics-batcher-template.js');
var graphicsBatcherTemplate$1 = require('./rendering/graphics/gl/graphics-batcher-template2.js');
var graphicsBatcherTemplate$2 = require('./rendering/graphics/gpu/graphics-batcher-template.js');
var meshDefault = require('./rendering/mesh/gl/mesh-default.js');
var meshDefault$1 = require('./rendering/mesh/gl/mesh-default2.js');
var meshDefault$2 = require('./rendering/mesh/gpu/mesh-default.js');
var sdfBatcherTemplate = require('./rendering/text/sdfShader/sdf-batcher-template3.js');
var sdfBatcherTemplate$1 = require('./rendering/text/sdfShader/sdf-batcher-template2.js');
var sdfBatcherTemplate$2 = require('./rendering/text/sdfShader/sdf-batcher-template.js');
var tilingSprite = require('./tiling-sprite/shader/tiling-sprite.js');
var tilingSprite$1 = require('./tiling-sprite/shader/tiling-sprite2.js');
var tilingSprite$2 = require('./tiling-sprite/shader/tiling-sprite3.js');



exports.Application = Application.Application;
exports.ResizePlugin = ResizePlugin.ResizePlugin;
exports.Assets = Assets.Assets;
exports.AssetsClass = Assets.AssetsClass;
exports.BackgroundLoader = BackgroundLoader.BackgroundLoader;
exports.Cache = Cache.Cache;
exports.cacheTextureArray = cacheTextureArray.cacheTextureArray;
exports.detectAvif = detectAvif.detectAvif;
exports.detectDefaults = detectDefaults.detectDefaults;
exports.detectMp4 = detectMp4.detectMp4;
exports.detectOgv = detectOgv.detectOgv;
exports.detectWebm = detectWebm.detectWebm;
exports.detectWebp = detectWebp.detectWebp;
exports.testVideoFormat = testVideoFormat.testVideoFormat;
exports.Loader = Loader.Loader;
exports.LoaderParserPriority = LoaderParser.LoaderParserPriority;
exports.loadJson = loadJson.loadJson;
exports.loadTxt = loadTxt.loadTxt;
exports.getFontFamilyName = loadWebFont.getFontFamilyName;
exports.loadWebFont = loadWebFont.loadWebFont;
exports.loadSvg = loadSVG.loadSvg;
exports.loadImageBitmap = loadTextures.loadImageBitmap;
exports.loadTextures = loadTextures.loadTextures;
exports.createTexture = createTexture.createTexture;
exports.WorkerManager = WorkerManager.WorkerManager;
exports.resolveTextureUrl = resolveTextureUrl.resolveTextureUrl;
exports.Resolver = Resolver.Resolver;
exports.checkDataUrl = checkDataUrl.checkDataUrl;
exports.checkExtension = checkExtension.checkExtension;
exports.convertToList = convertToList.convertToList;
exports.copySearchParams = copySearchParams.copySearchParams;
exports.createStringVariations = createStringVariations.createStringVariations;
exports.isSingleItem = isSingleItem.isSingleItem;
exports.EventBoundary = EventBoundary.EventBoundary;
exports.EventSystem = EventSystem.EventSystem;
exports.EventsTicker = EventTicker.EventsTicker;
exports.FederatedEvent = FederatedEvent.FederatedEvent;
exports.FederatedContainer = FederatedEventTarget.FederatedContainer;
exports.FederatedMouseEvent = FederatedMouseEvent.FederatedMouseEvent;
exports.FederatedPointerEvent = FederatedPointerEvent.FederatedPointerEvent;
exports.FederatedWheelEvent = FederatedWheelEvent.FederatedWheelEvent;
exports.ExtensionType = Extensions.ExtensionType;
exports.extensions = Extensions.extensions;
exports.normalizeExtensionPriority = Extensions.normalizeExtensionPriority;
exports.ShockwaveFilter = ShockwaveFilter.ShockwaveFilter;
exports.DEG_TO_RAD = _const.DEG_TO_RAD;
exports.PI_2 = _const.PI_2;
exports.RAD_TO_DEG = _const.RAD_TO_DEG;
exports.groupD8 = groupD8.groupD8;
exports.Matrix = Matrix.Matrix;
exports.ObservablePoint = ObservablePoint.ObservablePoint;
exports.Point = Point.Point;
exports.isPow2 = pow2.isPow2;
exports.log2 = pow2.log2;
exports.nextPow2 = pow2.nextPow2;
exports.Circle = Circle.Circle;
exports.Ellipse = Ellipse.Ellipse;
exports.Polygon = Polygon.Polygon;
exports.Rectangle = Rectangle.Rectangle;
exports.RoundedRectangle = RoundedRectangle.RoundedRectangle;
exports.Triangle = Triangle.Triangle;
exports.NineSliceGeometry = NineSliceGeometry.NineSliceGeometry;
exports.NineSlicePlane = NineSlicePlane.NineSlicePlane;
exports.NineSliceSprite = NineSlicePlane.NineSliceSprite;
exports.PlaneGeometry = PlaneGeometry.PlaneGeometry;
exports.generateBatchGlProgram = generateBatchGlProgram.generateBatchGlProgram;
exports.generateDefaultBatchGlProgram = generateDefaultBatchGlProgram.generateDefaultBatchGlProgram;
exports.GlBatchAdaptor = GlBatchAdaptor.GlBatchAdaptor;
exports.BatchGeometry = BatchGeometry.BatchGeometry;
exports.generateBatchProgram = generateBatchProgram.generateBatchProgram;
exports.generateBindingSrc = generateBatchProgram.generateBindingSrc;
exports.generateGPULayout = generateBatchProgram.generateGPULayout;
exports.generateLayout = generateBatchProgram.generateLayout;
exports.generateSampleSrc = generateBatchProgram.generateSampleSrc;
exports.generateDefaultBatchProgram = generateDefaultBatchProgram.generateDefaultBatchProgram;
exports.getBatchedGeometry = getBatchedGeometry.getBatchedGeometry;
exports.getTextureBatchBindGroup = getTextureBatchBindGroup.getTextureBatchBindGroup;
exports.GpuBatchAdaptor = GpuBatchAdaptor.GpuBatchAdaptor;
exports.Batch = Batcher.Batch;
exports.Batcher = Batcher.Batcher;
exports.BatcherPipe = BatcherPipe.BatcherPipe;
exports.MAX_TEXTURES = _const$1.MAX_TEXTURES;
exports.currentCopy = optimizeBindings.currentCopy;
Object.defineProperty(exports, 'currentCount', {
	enumerable: true,
	get: function () { return optimizeBindings.currentCount; }
});
exports.missing = optimizeBindings.missing;
Object.defineProperty(exports, 'missingCount', {
	enumerable: true,
	get: function () { return optimizeBindings.missingCount; }
});
exports.optimizeBindings = optimizeBindings.optimizeBindings;
exports.usedSlots = optimizeBindings.usedSlots;
exports.TextureBatchOutput = TextureBatcher.TextureBatchOutput;
exports.TextureBatcher = TextureBatcher.TextureBatcher;
exports.AlphaFilter = AlphaFilter.AlphaFilter;
exports.BlendModeFilter = BlendModeFilter.BlendModeFilter;
exports.hslgl = GLhls.hslgl;
exports.hslgpu = GPUhls.hslgpu;
exports.ColorMatrixFilter = ColorMatrixFilter.ColorMatrixFilter;
exports.DisplacementFilter = DisplacementFilter.DisplacementFilter;
exports.Filter = Filter.Filter;
exports.FilterEffect = FilterEffect.FilterEffect;
exports.getFilterEffect = FilterEffect.getFilterEffect;
exports.returnFilterEffect = FilterEffect.returnFilterEffect;
exports.MaskFilter = MaskFilter.MaskFilter;
exports.NoiseFilter = NoiseFilter.NoiseFilter;
exports.FilterPipe = FilterPipe.FilterPipe;
exports.FilterSystem = FilterSystem.FilterSystem;
exports.generateDefaultGraphicsBatchGlProgram = generateDefaultGraphicsBatchGlProgram.generateDefaultGraphicsBatchGlProgram;
exports.GlGraphicsAdaptor = GlGraphicsAdaptor.GlGraphicsAdaptor;
exports.color32BitToUniform = colorToUniform.color32BitToUniform;
exports.colorToUniform = colorToUniform.colorToUniform;
exports.generateDefaultGraphicsBatchProgram = generateDefaultGraphicsBatchProgram.generateDefaultGraphicsBatchProgram;
exports.GpuGraphicsAdaptor = GpuGraphicsAdaptor.GpuGraphicsAdaptor;
exports.BatchableGraphics = BatchableGraphics.BatchableGraphics;
exports.buildAdaptiveBezier = buildAdaptiveBezier.buildAdaptiveBezier;
exports.buildAdaptiveQuadratic = buildAdaptiveQuadratic.buildAdaptiveQuadratic;
exports.buildArc = buildArc.buildArc;
exports.buildArcTo = buildArcTo.buildArcTo;
exports.buildArcToSvg = buildArcToSvg.buildArcToSvg;
exports.buildCircle = buildCircle.buildCircle;
exports.buildLine = buildLine.buildLine;
exports.buildPolygon = buildPolygon.buildPolygon;
exports.buildRectangle = buildRectangle.buildRectangle;
exports.buildTriangle = buildTriangle.buildTriangle;
exports.closePointEps = _const$2.closePointEps;
exports.curveEps = _const$2.curveEps;
exports.FillGradient = FillGradient.FillGradient;
exports.FillPattern = FillPattern.FillPattern;
exports.Graphics = Graphics.Graphics;
exports.GraphicsContext = GraphicsContext.GraphicsContext;
exports.GpuGraphicsContext = GraphicsContextSystem.GpuGraphicsContext;
exports.GraphicsContextRenderData = GraphicsContextSystem.GraphicsContextRenderData;
exports.GraphicsContextSystem = GraphicsContextSystem.GraphicsContextSystem;
exports.GraphicsPipe = GraphicsPipe.GraphicsPipe;
exports.GraphicsView = GraphicsView.GraphicsView;
exports.GraphicsPath = GraphicsPath.GraphicsPath;
exports.ShapePath = ShapePath.ShapePath;
exports.SVGParser = SVGParser.SVGParser;
exports.SVGToGraphicsPath = SVGToGraphicsPath.SVGToGraphicsPath;
exports.buildContextBatches = buildContextBatches.buildContextBatches;
exports.buildGeometryFromPath = buildGeometryFromPath.buildGeometryFromPath;
exports.convertFillInputToFillStyle = convertFillInputToFillStyle.convertFillInputToFillStyle;
exports.getOrientationOfPoints = getOrientationOfPoints.getOrientationOfPoints;
exports.triangulateWithHoles = triangulateWithHoles.triangulateWithHoles;
exports.GpuScissorMaskPipe = GpuScissorMaskPipe.GpuScissorMaskPipe;
exports.addMaskBounds = addMaskBounds.addMaskBounds;
exports.tempBounds = addMaskBounds.tempBounds;
exports.addMaskLocalBounds = addMaskLocalBounds.addMaskLocalBounds;
exports.getMatrixRelativeToParent = addMaskLocalBounds.getMatrixRelativeToParent;
exports.AlphaMask = AlphaMask.AlphaMask;
exports.AlphaMaskPipe = AlphaMaskPipe.AlphaMaskPipe;
exports.ColorMask = ColorMask.ColorMask;
exports.ColorMaskPipe = ColorMaskPipe.ColorMaskPipe;
exports.MaskEffectManager = MaskEffectManager.MaskEffectManager;
exports.MaskEffectManagerClass = MaskEffectManager.MaskEffectManagerClass;
exports.ScissorMask = ScissorMask.ScissorMask;
exports.StencilMask = StencilMask.StencilMask;
exports.StencilMaskPipe = StencilMaskPipe.StencilMaskPipe;
exports.GlMeshAdaptor = GlMeshAdaptor.GlMeshAdaptor;
exports.GpuMeshAdapter = GpuMeshAdapter.GpuMeshAdapter;
exports.BatchableMesh = BatchableMesh.BatchableMesh;
exports.getTextureDefaultMatrix = getTextureDefaultMatrix.getTextureDefaultMatrix;
exports.Mesh = Mesh.Mesh;
exports.MeshGeometry = MeshGeometry.MeshGeometry;
exports.MeshPipe = MeshPipe.MeshPipe;
exports.MeshShader = MeshShader.MeshShader;
exports.MeshView = MeshView.MeshView;
exports.autoDetectRenderer = autoDetectRenderer.autoDetectRenderer;
exports.BUFFER_TYPE = _const$3.BUFFER_TYPE;
exports.GlBuffer = GlBuffer.GlBuffer;
exports.GlBufferSystem = GlBufferSystem.GlBufferSystem;
exports.GlContextSystem = GlContextSystem.GlContextSystem;
exports.GlRenderSurface = GlRenderSurface.GlRenderSurface;
exports.GlGeometrySystem = GlGeometrySystem.GlGeometrySystem;
exports.getGlInfoFromFormat = getGlInfoFromFormat.getGlInfoFromFormat;
exports.GlBackBufferSystem = GlBackBufferSystem.GlBackBufferSystem;
exports.GlColorMaskSystem = GlColorMaskSystem.GlColorMaskSystem;
exports.GlEncoderSystem = GlEncoderSystem.GlEncoderSystem;
exports.GlRenderTarget = GlRenderTarget.GlRenderTarget;
exports.GlRenderTargetSystem = GlRenderTargetSystem.GlRenderTargetSystem;
exports.GlStencilSystem = GlStencilSystem.GlStencilSystem;
exports.batchSamplersUniformGroup = batchSamplersUniformGroup.batchSamplersUniformGroup;
exports.GlProgram = GlProgram.GlProgram;
exports.GlProgramData = GlProgramData.GlProgramData;
exports.IGLUniformData = GlProgramData.IGLUniformData;
exports.GlShaderSystem = GlShaderSystem.GlShaderSystem;
exports.GlUniformGroupSystem = GlUniformGroupSystem.GlUniformGroupSystem;
exports.compileShader = compileShader.compileShader;
exports.defaultValue = defaultValue.defaultValue;
exports.ensurePrecision = ensurePrecision.ensurePrecision;
exports.generateProgram = generateProgram.generateProgram;
exports.generateUniformsSync = generateUniformsSync.generateUniformsSync;
exports.getAttributeData = getAttributeData.getAttributeData;
exports.getUniformBufferData = getUniformBufferData.getUniformBufferData;
exports.getUniformData = getUniformData.getUniformData;
exports.logProgramError = logProgramError.logProgramError;
exports.mapSize = mapSize.mapSize;
exports.mapType = mapType.mapType;
exports.setProgramName = setProgramName.setProgramName;
exports.setProgramVersion = setProgramVersion.setProgramVersion;
exports.uniformParsers = uniformParsers.uniformParsers;
exports.GlStateSystem = GlStateSystem.GlStateSystem;
exports.mapWebGLBlendModesToPixi = mapWebGLBlendModesToPixi.mapWebGLBlendModesToPixi;
exports.GL_FORMATS = _const$4.GL_FORMATS;
exports.GL_TARGETS = _const$4.GL_TARGETS;
exports.GL_TYPES = _const$4.GL_TYPES;
exports.GL_WRAP_MODES = _const$4.GL_WRAP_MODES;
exports.GlTexture = GlTexture.GlTexture;
exports.GlTextureSystem = GlTextureSystem.GlTextureSystem;
exports.glUploadBufferImageResource = glUploadBufferImageResource.glUploadBufferImageResource;
exports.glUploadImageResource = glUploadImageResource.glUploadImageResource;
exports.mapFormatToGlFormat = mapFormatToGlFormat.mapFormatToGlFormat;
exports.mapFormatToGlInternalFormat = mapFormatToGlInternalFormat.mapFormatToGlInternalFormat;
exports.mapFormatToGlType = mapFormatToGlType.mapFormatToGlType;
exports.compareModeToGlCompare = pixiToGlMaps.compareModeToGlCompare;
exports.mipmapScaleModeToGlFilter = pixiToGlMaps.mipmapScaleModeToGlFilter;
exports.scaleModeToGlFilter = pixiToGlMaps.scaleModeToGlFilter;
exports.wrapModeToGlAddress = pixiToGlMaps.wrapModeToGlAddress;
exports.WebGLRenderer = WebGLRenderer.WebGLRenderer;
exports.BindGroupSystem = BindGroupSystem.BindGroupSystem;
exports.BufferSystem = GpuBufferSystem.BufferSystem;
exports.GpuReadBuffer = GpuReadBuffer.GpuReadBuffer;
exports.UniformBufferBatch = UniformBufferBatch.UniformBufferBatch;
exports.GpuColorMaskSystem = GpuColorMaskSystem.GpuColorMaskSystem;
exports.GpuDeviceSystem = GpuDeviceSystem.GpuDeviceSystem;
exports.GpuEncoderSystem = GpuEncoderSystem.GpuEncoderSystem;
exports.GpuStencilSystem = GpuStencilSystem.GpuStencilSystem;
exports.GpuUniformBatchPipe = GpuUniformBatchPipe.GpuUniformBatchPipe;
exports.GpuUniformBufferPipe = GpuUniformBufferPipe.GpuUniformBufferPipe;
exports.PipelineSystem = PipelineSystem.PipelineSystem;
exports.calculateProjection = calculateProjection.calculateProjection;
exports.GpuRenderTarget = GpuRenderTarget.GpuRenderTarget;
exports.GpuRenderTargetSystem = GpuRenderTargetSystem.GpuRenderTargetSystem;
exports.BindGroup = BindGroup.BindGroup;
exports.extractStructAndGroups = extractStructAndGroups.extractStructAndGroups;
exports.generateGpuLayoutGroups = generateGpuLayoutGroups.generateGpuLayoutGroups;
exports.generateLayoutHash = generateLayoutHash.generateLayoutHash;
exports.GpuProgram = GpuProgram.GpuProgram;
exports.GpuShaderSystem = GpuShaderSystem.GpuShaderSystem;
exports.GpuBlendModesToPixi = GpuBlendModesToPixi.GpuBlendModesToPixi;
exports.GpuStateSystem = GpuStateSystem.GpuStateSystem;
exports.GpuStencilModesToPixi = GpuStencilModesToPixi.GpuStencilModesToPixi;
exports.GpuTextureSystem = GpuTextureSystem.GpuTextureSystem;
exports.gpuUploadBufferImageResource = gpuUploadBufferImageResource.gpuUploadBufferImageResource;
exports.gpuUploadImageResource = gpuUploadImageSource.gpuUploadImageResource;
exports.GpuMipmapGenerator = GpuMipmapGenerator.GpuMipmapGenerator;
exports.logDebugTexture = logDebugTexture.logDebugTexture;
exports.textureToCanvas = logDebugTexture.textureToCanvas;
exports.textureToCanvasWebGL = logDebugTexture.textureToCanvasWebGL;
exports.logTexture = logTexture.logTexture;
exports.WebGPURenderer = WebGPURenderer.WebGPURenderer;
exports.BackgroundSystem = BackgroundSystem.BackgroundSystem;
exports.defaultBackgroundOptions = BackgroundSystem.defaultBackgroundOptions;
exports.BlendModePipe = BlendModePipe.BlendModePipe;
exports.Buffer = Buffer.Buffer;
exports.BufferResource = BufferResource.BufferResource;
exports.BufferUsage = _const$5.BufferUsage;
exports.fastCopy = fastCopy.fastCopy;
exports.createIdFromString = createIdFromString.createIdFromString;
exports.Geometry = Geometry.Geometry;
exports.buildSimpleUvs = buildUvs.buildSimpleUvs;
exports.buildUvs = buildUvs.buildUvs;
exports.ensureIsBuffer = ensureIsBuffer.ensureIsBuffer;
exports.transformVertices = transformVertices.transformVertices;
exports.InstructionSet = InstructionSet.InstructionSet;
exports.LayerRenderable = LayerRenderable.LayerRenderable;
exports.ProxyRenderable = ProxyRenderable.ProxyRenderable;
exports.GlobalUniformSystem = GlobalUniformSystem.GlobalUniformSystem;
exports.isRenderingToScreen = isRenderingToScreen.isRenderingToScreen;
exports.RenderTarget = RenderTarget.RenderTarget;
exports.ShaderStage = _const$6.ShaderStage;
exports.Shader = Shader.Shader;
exports.UniformBufferSystem = UniformBufferSystem.UniformBufferSystem;
exports.UniformGroup = UniformGroup.UniformGroup;
exports.WGSL_TO_STD40_SIZE = createUBOElements.WGSL_TO_STD40_SIZE;
exports.createUBOElements = createUBOElements.createUBOElements;
exports.generateUniformBufferSync = createUniformBufferSync.generateUniformBufferSync;
exports.GLSL_TO_STD40_SIZE = glslToSTD40.GLSL_TO_STD40_SIZE;
exports.uniformBufferParsers = uniformBufferParsers.uniformBufferParsers;
exports.HelloSystem = HelloSystem.HelloSystem;
exports.STENCIL_MODES = _const$7.STENCIL_MODES;
exports.State = State.State;
exports.AbstractRenderer = AbstractRenderer.AbstractRenderer;
exports.SharedRenderPipes = SharedSystems.SharedRenderPipes;
exports.SharedSystems = SharedSystems.SharedSystems;
exports.SystemRunner = SystemRunner.SystemRunner;
exports.logRenderFlow = logRenderFlow.logRenderFlow;
exports.CanvasPool = CanvasPool.CanvasPool;
exports.CanvasPoolClass = CanvasPool.CanvasPoolClass;
exports.ALPHA_MODES = _const$8.ALPHA_MODES;
exports.MSAA_QUALITY = _const$8.MSAA_QUALITY;
exports.BufferImageSource = BufferImageSource.BufferImageSource;
exports.CanvasSource = CanvasSource.CanvasSource;
exports.ImageSource = ImageSource.ImageSource;
exports.TextureSource = TextureSource.TextureSource;
exports.Texture = Texture.Texture;
exports.TextureLayout = TextureLayout.TextureLayout;
exports.TextureMatrix = TextureMatrix.TextureMatrix;
exports.TexturePool = TexturePool.TexturePool;
exports.TexturePoolClass = TexturePool.TexturePoolClass;
exports.TextureStyle = TextureStyle.TextureStyle;
exports.TextureUvs = TextureUvs.TextureUvs;
exports.generateUID = generateUID.generateUID;
exports.getCanvasTexture = getCanvasTexture.getCanvasTexture;
exports.emptyViewObserver = View.emptyViewObserver;
exports.ViewSystem = ViewSystem.ViewSystem;
exports.Bounds = Bounds.Bounds;
exports._getGlobalBounds = getGlobalBounds._getGlobalBounds;
exports.getGlobalBounds = getGlobalBounds.getGlobalBounds;
exports.updateTransformBackwards = getGlobalBounds.updateTransformBackwards;
exports.getLocalBounds = getLocalBounds.getLocalBounds;
exports.getParent = getLocalBounds.getParent;
exports.getGlobalRenderableBounds = getRenderableBounds.getGlobalRenderableBounds;
exports.childrenHelperMixin = childrenHelperMixin.childrenHelperMixin;
exports.effectsMixin = effectsMixin.effectsMixin;
exports.findMixin = getByLabelMixin.findMixin;
exports.measureMixin = measureMixin.measureMixin;
exports.onRenderMixin = onRenderMixin.onRenderMixin;
exports.sortMixin = sortMixin.sortMixin;
exports.toLocalGlobalMixin = toLocalGlobalMixin.toLocalGlobalMixin;
exports.Container = Container.Container;
exports.UPDATE_BLEND = Container.UPDATE_BLEND;
exports.UPDATE_COLOR = Container.UPDATE_COLOR;
exports.UPDATE_TRANSFORM = Container.UPDATE_TRANSFORM;
exports.UPDATE_VISIBLE = Container.UPDATE_VISIBLE;
exports.getRenderableUID = Container.getRenderableUID;
exports.LayerGroup = LayerGroup.LayerGroup;
exports.LayerPipe = LayerPipe.LayerPipe;
exports.LayerSystem = LayerSystem.LayerSystem;
exports.buildInstructions = buildInstructions.buildInstructions;
exports.collectAllRenderables = buildInstructions.collectAllRenderables;
exports.collectLayerGroups = collectLayerGroups.collectLayerGroups;
exports.executeInstructions = executeInstructions.executeInstructions;
exports.mixColors = mixColors.mixColors;
exports.mixStandardAnd32BitColors = mixColors.mixStandardAnd32BitColors;
exports.mixHexColors = mixHexColors.mixHexColors;
exports.multiplyHexColors = multiplyHexColors.multiplyHexColors;
exports.updateLayerGroupTransforms = updateLayerGroupTransforms.updateLayerGroupTransforms;
exports.updateLayerTransform = updateLayerGroupTransforms.updateLayerTransform;
exports.updateTransformAndChildren = updateLayerGroupTransforms.updateTransformAndChildren;
exports.updateLocalTransform = updateLocalTransform.updateLocalTransform;
exports.updateWorldTransform = updateWorldTransform.updateWorldTransform;
exports.validateRenderables = validateRenderables.validateRenderables;
exports.BatchableSprite = BatchableSprite.BatchableSprite;
exports.Sprite = Sprite.Sprite;
exports.SpritePipe = SpritePipe.SpritePipe;
exports.SpriteView = SpriteView.SpriteView;
exports.bitmapFontCachePlugin = loadBitmapFont.bitmapFontCachePlugin;
exports.xmlBitmapFontLoader = loadBitmapFont.xmlBitmapFontLoader;
exports.TextFormat = textFormat.TextFormat;
exports.XMLFormat = xmlFormat.XMLFormat;
exports.XMLStringFormat = xmlStringFormat.XMLStringFormat;
exports.BitmapFont = BitmapFont.BitmapFont;
exports.BitmapFontManager = BitmapFontManager.BitmapFontManager;
exports.BitmapTextPipe = BitmapTextPipe.BitmapTextPipe;
exports.DynamicBitmapFont = DynamicBitmapFont.DynamicBitmapFont;
exports.getBitmapTextLayout = getBitmapTextLayout.getBitmapTextLayout;
exports.resolveCharacters = resolveCharacters.resolveCharacters;
exports.CanvasTextMetrics = CanvasTextMetrics.CanvasTextMetrics;
exports.CanvasTextPipe = CanvasTextPipe.CanvasTextPipe;
exports.CanvasTextSystem = CanvasTextSystem.CanvasTextSystem;
exports.fontStringFromTextStyle = fontStringFromTextStyle.fontStringFromTextStyle;
exports.getCanvasFillStyle = getCanvasFillStyle.getCanvasFillStyle;
exports.generateDefaultSdfBatchGlProgram = generateDefaultSdfBatchGlProgram.generateDefaultSdfBatchGlProgram;
exports.generateDefaultSdfBatchProgram = generateDefaultSdfBatchProgram.generateDefaultSdfBatchProgram;
exports.SdfShader = SdfShader.SdfShader;
exports.Text = Text.Text;
exports.TextStyle = TextStyle.TextStyle;
exports.TextView = TextView.TextView;
exports.BrowserAdapter = adapter.BrowserAdapter;
exports.settings = settings.settings;
exports.isMobile = isMobile.isMobile;
exports.Spritesheet = Spritesheet.Spritesheet;
exports.spritesheetAsset = spritesheetAsset.spritesheetAsset;
exports.UPDATE_PRIORITY = _const$9.UPDATE_PRIORITY;
exports.Ticker = Ticker.Ticker;
exports.TickerListener = TickerListener.TickerListener;
exports.TickerPlugin = TickerPlugin.TickerPlugin;
exports.QuadGeometry = QuadGeometry.QuadGeometry;
exports.TilingSpriteShader = TilingSpriteShader.TilingSpriteShader;
exports.TilingSprite = TilingSprite.TilingSprite;
exports.TilingSpritePipe = TilingSpritePipe.TilingSpritePipe;
exports.applyMatrix = TilingSpritePipe.applyMatrix;
exports.TilingSpriteView = TilingSpriteView.TilingSpriteView;
exports.detectVideoAlphaMode = detectVideoAlphaMode.detectVideoAlphaMode;
exports.ColorNames = ColorNames.ColorNames;
exports.convertColorToNumber = convertColorToNumber.convertColorToNumber;
exports.convertNumberToHex = convertNumberToHex.convertNumberToHex;
exports.hex2rgb = hex.hex2rgb;
exports.hex2string = hex.hex2string;
exports.rgb2hex = hex.rgb2hex;
exports.string2hex = hex.string2hex;
exports.DATA_URI = _const$a.DATA_URI;
exports.removeItems = removeItems.removeItems;
exports.logLayerGroupScene = logScene.logLayerGroupScene;
exports.logScene = logScene.logScene;
exports.deprecation = deprecation.deprecation;
exports.getResolutionOfUrl = getResolutionOfUrl.getResolutionOfUrl;
exports.NOOP = NOOP.NOOP;
exports.path = path.path;
exports.Pool = Pool.Pool;
exports.BigPool = PoolGroup.BigPool;
exports.PoolGroupClass = PoolGroup.PoolGroupClass;
exports.VERSION = sayHello.VERSION;
exports.sayHello = sayHello.sayHello;
exports.Transform = Transform.Transform;
exports.ViewableBuffer = ViewableBuffer.ViewableBuffer;
exports.shockwaveFrag = shockwave["default"];
exports.shockwaveVert = shockwave$1["default"];
exports.shockwaveWgsl = shockwave$2["default"];
exports.batcherTemplateFrag = batcherTemplate["default"];
exports.batcherTemplateVert = batcherTemplate$1["default"];
exports.batcherTemplateWgsl = batcherTemplate$2["default"];
exports.alphaWgsl = alpha["default"];
exports.blendTemplateFrag = blendTemplate["default"];
exports.blendTemplateVert = blendTemplate$1["default"];
exports.blendTemplateWgsl = blendTemplate$2["default"];
exports.hslWgsl = hsl["default"];
exports.colorMatrixFilterWgsl = colorMatrixFilter["default"];
exports.displacementWgsl = displacement["default"];
exports.maskFrag = mask["default"];
exports.maskVert = mask$1["default"];
exports.maskWgsl = mask$2["default"];
exports.noiseFrag = noise["default"];
exports.noiseVert = noise$1["default"];
exports.noiseWgsl = noise$2["default"];
exports.graphicsBatcherTemplateFrag = graphicsBatcherTemplate["default"];
exports.graphicsBatcherTemplateVert = graphicsBatcherTemplate$1["default"];
exports.graphicsBatcherTemplateWgsl = graphicsBatcherTemplate$2["default"];
exports.meshDefaultFrag = meshDefault["default"];
exports.meshDefaultVert = meshDefault$1["default"];
exports.meshDefaultWgsl = meshDefault$2["default"];
exports.sdfBatcherTemplateFrag = sdfBatcherTemplate["default"];
exports.sdfBatcherTemplateVert = sdfBatcherTemplate$1["default"];
exports.sdfBatcherTemplateWgsl = sdfBatcherTemplate$2["default"];
exports.tilingSpriteFrag = tilingSprite["default"];
exports.tilingSpriteVert = tilingSprite$1["default"];
exports.tilingSpriteWgsl = tilingSprite$2["default"];
//# sourceMappingURL=index.js.map
