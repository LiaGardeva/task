{"version":3,"file":"NineSliceGeometry.js","sources":["../../src/mesh-extras/NineSliceGeometry.ts"],"sourcesContent":["import { Matrix } from '../maths/Matrix';\nimport { PlaneGeometry } from './PlaneGeometry';\n\nexport interface NineSliceGeometryOptions\n{\n    width?: number\n    height?: number\n    originalWidth?: number\n    originalHeight?: number\n    leftWidth?: number\n    topHeight?: number\n    rightWidth?: number\n    bottomHeight?: number\n    textureMatrix?: Matrix\n}\n\nexport class NineSliceGeometry extends PlaneGeometry\n{\n    static defaultOptions: NineSliceGeometryOptions = {\n        width: 100,\n        height: 100,\n        leftWidth: 10,\n        topHeight: 10,\n        rightWidth: 10,\n        bottomHeight: 10,\n\n        originalWidth: 100,\n        originalHeight: 100,\n    };\n\n    _originalWidth: number;\n    _originalHeight: number;\n    _leftWidth: number;\n    _rightWidth: number;\n    _topHeight: number;\n    _bottomHeight: number;\n    _textureMatrix: Matrix = new Matrix();\n\n    constructor(options: NineSliceGeometryOptions)\n    {\n        options = { ...NineSliceGeometry.defaultOptions, ...options };\n\n        super({\n            width: options.width,\n            height: options.height,\n            verticesX: 4,\n            verticesY: 4,\n        });\n\n        this.update(options);\n    }\n\n    update(options: NineSliceGeometryOptions)\n    {\n        this.updateUvs(options);\n        this.updatePositions(options);\n    }\n\n    updatePositions(options: NineSliceGeometryOptions)\n    {\n        this.width = options.width ?? this.width;\n        this.height = options.height ?? this.height;\n\n        this._leftWidth = options.leftWidth ?? this._leftWidth;\n        this._rightWidth = options.rightWidth ?? this._rightWidth;\n        this._topHeight = options.topHeight ?? this._topHeight;\n        this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n\n        const positions = this.positions;\n\n        const w = this._leftWidth + this._rightWidth;\n        const scaleW = this.width > w ? 1.0 : this.width / w;\n\n        const h = this._topHeight + this._bottomHeight;\n        const scaleH = this.height > h ? 1.0 : this.height / h;\n\n        const scale = Math.min(scaleW, scaleH);\n\n        positions[9] = positions[11] = positions[13] = positions[15] = this._topHeight * scale;\n        positions[17] = positions[19] = positions[21] = positions[23] = this.height - (this._bottomHeight * scale);\n        positions[25] = positions[27] = positions[29] = positions[31] = this.height;\n\n        positions[2] = positions[10] = positions[18] = positions[26] = this._leftWidth * scale;\n        positions[4] = positions[12] = positions[20] = positions[28] = this.width - (this._rightWidth * scale);\n        positions[6] = positions[14] = positions[22] = positions[30] = this.width;\n\n        this.getBuffer('aPosition').update();\n    }\n\n    updateUvs(options: NineSliceGeometryOptions)\n    {\n        this._originalWidth = options.originalWidth ?? this._originalWidth;\n        this._originalHeight = options.originalHeight ?? this._originalHeight;\n        this._leftWidth = options.leftWidth ?? this._leftWidth;\n        this._rightWidth = options.rightWidth ?? this._rightWidth;\n        this._topHeight = options.topHeight ?? this._topHeight;\n        this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n\n        if (options.textureMatrix)\n        {\n            this._textureMatrix.copyFrom(options.textureMatrix);\n        }\n\n        const textureMatrix = this._textureMatrix;\n\n        const uvs = this.uvs;\n\n        uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n        uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n\n        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n\n        const _uvw = 1.0 / this._originalWidth;\n        const _uvh = 1.0 / this._originalHeight;\n\n        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n\n        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - (_uvw * this._rightWidth);\n        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - (_uvh * this._bottomHeight);\n\n        multiplyUvs(textureMatrix, uvs);\n\n        this.getBuffer('aUV').update();\n    }\n}\n\nfunction multiplyUvs(matrix: Matrix, uvs: Float32Array, out?: Float32Array)\n{\n    out ??= uvs;\n\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n\n    for (let i = 0; i < uvs.length; i += 2)\n    {\n        const x = uvs[i];\n        const y = uvs[i + 1];\n\n        out[i] = (x * a) + (y * c) + tx;\n        out[i + 1] = (x * b) + (y * d) + ty;\n    }\n\n    return out;\n}\n"],"names":["PlaneGeometry","Matrix"],"mappings":"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"}