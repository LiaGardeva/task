{"version":3,"file":"NineSlicePlane.js","sources":["../../src/mesh-extras/NineSlicePlane.ts"],"sourcesContent":["import { MeshView } from '../rendering/mesh/shared/MeshView';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture';\nimport { Container } from '../rendering/scene/Container';\nimport { deprecation } from '../utils/logging/deprecation';\nimport { NineSliceGeometry } from './NineSliceGeometry';\n\nimport type { ContainerOptions } from '../rendering/scene/Container';\n\nexport interface NineSliceSpriteOptions extends ContainerOptions<MeshView<NineSliceGeometry>>\n{\n    texture: Texture;\n    leftWidth?: number;\n    topHeight?: number;\n    rightWidth?: number;\n    bottomHeight?: number;\n}\n\n/**\n * The NineSlicePlane allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful\n * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically\n *\n * <pre>\n *      A                          B\n *    +---+----------------------+---+\n *  C | 1 |          2           | 3 |\n *    +---+----------------------+---+\n *    |   |                      |   |\n *    | 4 |          5           | 6 |\n *    |   |                      |   |\n *    +---+----------------------+---+\n *  D | 7 |          8           | 9 |\n *    +---+----------------------+---+\n *  When changing this objects width and/or height:\n *     areas 1 3 7 and 9 will remain unscaled.\n *     areas 2 and 8 will be stretched horizontally\n *     areas 4 and 6 will be stretched vertically\n *     area 5 will be stretched both horizontally and vertically\n * </pre>\n * @example\n * import { NineSlicePlane, Texture } from 'pixi.js';\n *\n * const plane9 = new NineSlicePlane(Texture.from('BoxWithRoundedCorners.png'), 15, 15, 15, 15);\n * @memberof PIXI\n */\nexport class NineSliceSprite extends Container<MeshView<NineSliceGeometry>>\n{\n    static defaultOptions: NineSliceSpriteOptions = {\n        texture: Texture.EMPTY,\n        leftWidth: 10,\n        topHeight: 10,\n        rightWidth: 10,\n        bottomHeight: 10,\n    };\n\n    /**\n     * @param options - Options to use\n     * @param options.texture - The texture to use on the NineSlicePlane.\n     * @param options.leftWidth - Width of the left vertical bar (A)\n     * @param options.topHeight - Height of the top horizontal bar (C)\n     * @param options.rightWidth - Width of the right vertical bar (B)\n     * @param options.bottomHeight - Height of the bottom horizontal bar (D)\n     * @param options.width - Width of the NineSlicePlane,\n     * setting this will actually modify the vertices and not the UV's of this plane.\n     * @param options.height - Height of the NineSlicePlane,\n     * setting this will actually modify the vertices and not UV's of this plane.\n     */\n    constructor(options: NineSliceSpriteOptions | Texture)\n    {\n        if ((options instanceof Texture))\n        {\n            options = { texture: options };\n        }\n\n        options = { ...NineSliceSprite.defaultOptions, ...options };\n\n        const texture = options.texture;\n\n        const nineSliceGeometry = new NineSliceGeometry({\n            width: texture.width,\n            height: texture.height,\n            originalWidth: texture.width,\n            originalHeight: texture.height,\n            leftWidth: options.leftWidth,\n            topHeight: options.topHeight,\n            rightWidth: options.rightWidth,\n            bottomHeight: options.bottomHeight,\n            textureMatrix: texture.textureMatrix.mapCoord,\n        });\n\n        super({\n            view: new MeshView<NineSliceGeometry>({\n                geometry: nineSliceGeometry,\n                texture,\n            }),\n            label: 'NineSlicePlane',\n            ...options\n        });\n    }\n\n    // /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    get width(): number\n    {\n        return this.view.geometry.width;\n    }\n\n    set width(value: number)\n    {\n        this.view.geometry.updatePositions({\n            width: value,\n        });\n    }\n\n    get height(): number\n    {\n        return this.view.geometry.height;\n    }\n\n    set height(value: number)\n    {\n        this.view.geometry.updatePositions({\n            height: value,\n        });\n    }\n\n    get leftWidth(): number\n    {\n        return this.view.geometry._leftWidth;\n    }\n\n    set leftWidth(value: number)\n    {\n        this.view.geometry.updateUvs({\n            leftWidth: value,\n        });\n    }\n\n    get topHeight(): number\n    {\n        return this.view.geometry._topHeight;\n    }\n\n    set topHeight(value: number)\n    {\n        this.view.geometry.updateUvs({\n            topHeight: value,\n        });\n    }\n\n    get rightWidth(): number\n    {\n        return this.view.geometry._rightWidth;\n    }\n\n    set rightWidth(value: number)\n    {\n        this.view.geometry.updateUvs({\n            rightWidth: value,\n        });\n    }\n\n    get bottomHeight(): number\n    {\n        return this.view.geometry._bottomHeight;\n    }\n\n    set bottomHeight(value: number)\n    {\n        this.view.geometry.updateUvs({\n            bottomHeight: value,\n        });\n    }\n\n    get texture(): Texture\n    {\n        return this.view.texture;\n    }\n\n    set texture(value: Texture)\n    {\n        if (value === this.view.texture) return;\n\n        // // calculate the matrix..\n        this.view.geometry.updateUvs({\n            originalWidth: value.width,\n            originalHeight: value.height,\n            textureMatrix: value.textureMatrix.mapCoord,\n        });\n\n        this.view.texture = value;\n    }\n}\n\nexport class NineSlicePlane extends NineSliceSprite\n{\n    constructor(options: NineSliceSpriteOptions | Texture)\n    {\n        deprecation('v8', 'NineSlicePlane is deprecated. Use NineSliceSprite instead.');\n        super(options);\n    }\n}\n"],"names":["Container","Texture","NineSliceGeometry","MeshView","deprecation"],"mappings":"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"}