{"version":3,"file":"PlaneGeometry.mjs","sources":["../../src/mesh-extras/PlaneGeometry.ts"],"sourcesContent":["import { MeshGeometry } from '../rendering/mesh/shared/MeshGeometry';\n\nimport type { MeshGeometryOptions } from '../rendering/mesh/shared/MeshGeometry';\n\nexport interface PlaneGeometryOptions\n{\n    width?: number;\n    height?: number;\n    verticesX?: number;\n    verticesY?: number;\n}\n\n/**\n * @memberof PIXI\n */\nexport class PlaneGeometry extends MeshGeometry\n{\n    static defaultOptions: PlaneGeometryOptions & MeshGeometryOptions = {\n        width: 100,\n        height: 100,\n        verticesX: 10,\n        verticesY: 10,\n    };\n\n    public verticesX: number;\n    public verticesY: number;\n    public width: number;\n    public height: number;\n\n    /**\n     * @param options - Options to be applied to plane geometry\n     * @param options.width - Width of plane\n     * @param options.height - Height of plane\n     * @param options.verticesX - Number of vertices on x-axis\n     * @param options.verticesY - Number of vertices on y-axis\n     */\n    constructor(options: PlaneGeometryOptions = {})\n    {\n        super({});\n        this.build(options);\n    }\n\n    /**\n     * Refreshes plane coordinates\n     * @param options\n     */\n    build(options: PlaneGeometryOptions): void\n    {\n        options = { ...PlaneGeometry.defaultOptions, ...options };\n\n        this.verticesX = this.verticesX ?? options.verticesX;\n        this.verticesY = this.verticesY ?? options.verticesY;\n\n        this.width = this.width ?? options.width;\n        this.height = this.height ?? options.height;\n\n        const total = this.verticesX * this.verticesY;\n        const verts = [];\n        const uvs = [];\n        const indices = [];\n\n        const verticesX = this.verticesX - 1;\n        const verticesY = this.verticesY - 1;\n\n        const sizeX = (this.width) / verticesX;\n        const sizeY = (this.height) / verticesY;\n\n        for (let i = 0; i < total; i++)\n        {\n            const x = (i % this.verticesX);\n            const y = ((i / this.verticesX) | 0);\n\n            verts.push(x * sizeX, y * sizeY);\n            uvs.push(x / verticesX, y / verticesY);\n        }\n\n        const totalSub = verticesX * verticesY;\n\n        for (let i = 0; i < totalSub; i++)\n        {\n            const xpos = i % verticesX;\n            const ypos = (i / verticesX) | 0;\n\n            const value = (ypos * this.verticesX) + xpos;\n            const value2 = (ypos * this.verticesX) + xpos + 1;\n            const value3 = ((ypos + 1) * this.verticesX) + xpos;\n            const value4 = ((ypos + 1) * this.verticesX) + xpos + 1;\n\n            indices.push(value, value2, value3,\n                value2, value4, value3);\n        }\n\n        this.buffers[0].data = new Float32Array(verts);\n        this.buffers[1].data = new Float32Array(uvs);\n        this.indexBuffer.data = new Uint32Array(indices);\n\n        // ensure that the changes are uploaded\n        this.buffers[0].update();\n        this.buffers[1].update();\n        this.indexBuffer.update();\n    }\n}\n"],"names":[],"mappings":"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"}