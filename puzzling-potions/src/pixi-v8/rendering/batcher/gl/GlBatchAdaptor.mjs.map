{"version":3,"file":"GlBatchAdaptor.mjs","sources":["../../../../src/rendering/batcher/gl/GlBatchAdaptor.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/Matrix';\nimport { batchSamplersUniformGroup } from '../../renderers/gl/shader/batchSamplersUniformGroup';\nimport { Shader } from '../../renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../renderers/shared/shader/UniformGroup';\nimport { MAX_TEXTURES } from '../shared/const';\nimport { generateDefaultBatchGlProgram } from './generateDefaultBatchGlProgram';\n\nimport type { WebGLRenderer } from '../../renderers/gl/WebGLRenderer';\nimport type { Batch } from '../shared/Batcher';\nimport type { BatcherAdaptor, BatcherPipe } from '../shared/BatcherPipe';\n\nexport class GlBatchAdaptor implements BatcherAdaptor\n{\n    /** @ignore */\n    static extension = {\n        type: [\n            ExtensionType.WebGLPipesAdaptor,\n        ],\n        name: 'batch',\n    } as const;\n    shader: Shader;\n    didUpload = false;\n\n    init()\n    {\n        const uniforms = new UniformGroup({\n            tint: { value: new Float32Array([1, 1, 1, 1]), type: 'f32' },\n            translationMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n        });\n\n        this.shader = new Shader({\n            glProgram: generateDefaultBatchGlProgram(MAX_TEXTURES),\n            resources: {\n                uniforms,\n                batchSamplers: batchSamplersUniformGroup,\n            }\n        });\n    }\n\n    execute(batchPipe: BatcherPipe, batch: Batch): void\n    {\n        const renderer = batchPipe.renderer as WebGLRenderer;\n\n        batchPipe.state.blendMode = batch.blendMode;\n\n        renderer.state.set(batchPipe.state);\n\n        renderer.shader.bind(this.shader, this.didUpload);\n\n        this.didUpload = true;\n\n        const activeBatcher = batch.batchParent;\n\n        renderer.geometry.bind(activeBatcher.geometry, this.shader.glProgram);\n\n        for (let i = 0; i < batch.textures.textures.length; i++)\n        {\n            renderer.texture.bind(batch.textures.textures[i], i);\n        }\n\n        renderer.shader.bindUniformBlock(renderer.globalUniforms.uniformGroup, 'globalUniforms', 0);\n\n        renderer.geometry.draw('triangle-list', batch.size, batch.start);\n    }\n\n    destroy(): void\n    {\n        this.shader.destroy(true);\n        this.shader = null;\n    }\n}\n"],"names":[],"mappings":";;;;;;;;AAYO,MAAM,cACb,CAAA;AAAA,EADO,WAAA,GAAA;AAUH,IAAY,IAAA,CAAA,SAAA,GAAA,KAAA,CAAA;AAAA,GAAA;AAAA,EAEZ,IACA,GAAA;AACI,IAAM,MAAA,QAAA,GAAW,IAAI,YAAa,CAAA;AAAA,MAC9B,IAAM,EAAA,EAAE,KAAO,EAAA,IAAI,YAAa,CAAA,CAAC,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAC,CAAC,CAAA,EAAG,MAAM,KAAM,EAAA;AAAA,MAC3D,mBAAmB,EAAE,KAAA,EAAO,IAAI,MAAO,EAAA,EAAG,MAAM,aAAc,EAAA;AAAA,KACjE,CAAA,CAAA;AAED,IAAK,IAAA,CAAA,MAAA,GAAS,IAAI,MAAO,CAAA;AAAA,MACrB,SAAA,EAAW,8BAA8B,YAAY,CAAA;AAAA,MACrD,SAAW,EAAA;AAAA,QACP,QAAA;AAAA,QACA,aAAe,EAAA,yBAAA;AAAA,OACnB;AAAA,KACH,CAAA,CAAA;AAAA,GACL;AAAA,EAEA,OAAA,CAAQ,WAAwB,KAChC,EAAA;AACI,IAAA,MAAM,WAAW,SAAU,CAAA,QAAA,CAAA;AAE3B,IAAU,SAAA,CAAA,KAAA,CAAM,YAAY,KAAM,CAAA,SAAA,CAAA;AAElC,IAAS,QAAA,CAAA,KAAA,CAAM,GAAI,CAAA,SAAA,CAAU,KAAK,CAAA,CAAA;AAElC,IAAA,QAAA,CAAS,MAAO,CAAA,IAAA,CAAK,IAAK,CAAA,MAAA,EAAQ,KAAK,SAAS,CAAA,CAAA;AAEhD,IAAA,IAAA,CAAK,SAAY,GAAA,IAAA,CAAA;AAEjB,IAAA,MAAM,gBAAgB,KAAM,CAAA,WAAA,CAAA;AAE5B,IAAA,QAAA,CAAS,SAAS,IAAK,CAAA,aAAA,CAAc,QAAU,EAAA,IAAA,CAAK,OAAO,SAAS,CAAA,CAAA;AAEpE,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,MAAM,QAAS,CAAA,QAAA,CAAS,QAAQ,CACpD,EAAA,EAAA;AACI,MAAA,QAAA,CAAS,QAAQ,IAAK,CAAA,KAAA,CAAM,SAAS,QAAS,CAAA,CAAC,GAAG,CAAC,CAAA,CAAA;AAAA,KACvD;AAEA,IAAA,QAAA,CAAS,OAAO,gBAAiB,CAAA,QAAA,CAAS,cAAe,CAAA,YAAA,EAAc,kBAAkB,CAAC,CAAA,CAAA;AAE1F,IAAA,QAAA,CAAS,SAAS,IAAK,CAAA,eAAA,EAAiB,KAAM,CAAA,IAAA,EAAM,MAAM,KAAK,CAAA,CAAA;AAAA,GACnE;AAAA,EAEA,OACA,GAAA;AACI,IAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,IAAI,CAAA,CAAA;AACxB,IAAA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;AAAA,GAClB;AACJ,CAAA;AAAA;AA3Da,cAAA,CAGF,SAAY,GAAA;AAAA,EACf,IAAM,EAAA;AAAA,IACF,aAAc,CAAA,iBAAA;AAAA,GAClB;AAAA,EACA,IAAM,EAAA,OAAA;AACV,CAAA;;;;"}