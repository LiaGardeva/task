{"version":3,"file":"GpuBatchAdaptor.mjs","sources":["../../../../src/rendering/batcher/gpu/GpuBatchAdaptor.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { Shader } from '../../renderers/shared/shader/Shader';\nimport { MAX_TEXTURES } from '../shared/const';\nimport { generateDefaultBatchProgram } from './generateDefaultBatchProgram';\nimport { getTextureBatchBindGroup } from './getTextureBatchBindGroup';\n\nimport type { GpuEncoderSystem } from '../../renderers/gpu/GpuEncoderSystem';\nimport type { Batch } from '../shared/Batcher';\nimport type { BatcherAdaptor, BatcherPipe } from '../shared/BatcherPipe';\n\nexport class GpuBatchAdaptor implements BatcherAdaptor\n{\n    /** @ignore */\n    static extension = {\n        type: [\n            ExtensionType.WebGPUPipesAdaptor,\n        ],\n        name: 'batch',\n    } as const;\n\n    shader: Shader;\n\n    init()\n    {\n        this.shader = new Shader({\n            gpuProgram: generateDefaultBatchProgram(MAX_TEXTURES),\n            groups: {\n                // these will be dynamically allocated\n            },\n        });\n    }\n\n    execute(batchPipe: BatcherPipe, batch: Batch): void\n    {\n        batchPipe.state.blendMode = batch.blendMode;\n\n        if (!batch.textures.bindGroup)\n        {\n            batch.textures.bindGroup = getTextureBatchBindGroup(batch.textures.textures);\n        }\n\n        const program = this.shader.gpuProgram;\n\n        const encoder = batchPipe.renderer.encoder as GpuEncoderSystem;\n        const globalUniformsBindGroup = batchPipe.renderer.globalUniforms.bindGroup;\n\n        // create a state objects we need...\n        this.shader.groups[1] = batch.textures.bindGroup;\n\n        const activeBatcher = batch.batchParent;\n\n        // TODO.. prolly should cache this?\n        // or add it to the instructions?\n        encoder.setPipelineFromGeometryProgramAndState(\n            activeBatcher.geometry,\n            program,\n            batchPipe.state\n        );\n\n        encoder.setGeometry(activeBatcher.geometry);\n        encoder.setBindGroup(0, globalUniformsBindGroup, program);\n        encoder.setBindGroup(1, batch.textures.bindGroup, program);\n\n        // TODO move this to a draw function on the pipe!\n        encoder.renderPassEncoder.drawIndexed(batch.size, 1, batch.start);\n    }\n\n    destroy(): void\n    {\n        this.shader.destroy(true);\n        this.shader = null;\n    }\n}\n"],"names":[],"mappings":";;;;;;AAUO,MAAM,eACb,CAAA;AAAA,EAWI,IACA,GAAA;AACI,IAAK,IAAA,CAAA,MAAA,GAAS,IAAI,MAAO,CAAA;AAAA,MACrB,UAAA,EAAY,4BAA4B,YAAY,CAAA;AAAA,MACpD,MAAQ,EAAA;AAAA;AAAA,OAER;AAAA,KACH,CAAA,CAAA;AAAA,GACL;AAAA,EAEA,OAAA,CAAQ,WAAwB,KAChC,EAAA;AACI,IAAU,SAAA,CAAA,KAAA,CAAM,YAAY,KAAM,CAAA,SAAA,CAAA;AAElC,IAAI,IAAA,CAAC,KAAM,CAAA,QAAA,CAAS,SACpB,EAAA;AACI,MAAA,KAAA,CAAM,QAAS,CAAA,SAAA,GAAY,wBAAyB,CAAA,KAAA,CAAM,SAAS,QAAQ,CAAA,CAAA;AAAA,KAC/E;AAEA,IAAM,MAAA,OAAA,GAAU,KAAK,MAAO,CAAA,UAAA,CAAA;AAE5B,IAAM,MAAA,OAAA,GAAU,UAAU,QAAS,CAAA,OAAA,CAAA;AACnC,IAAM,MAAA,uBAAA,GAA0B,SAAU,CAAA,QAAA,CAAS,cAAe,CAAA,SAAA,CAAA;AAGlE,IAAA,IAAA,CAAK,MAAO,CAAA,MAAA,CAAO,CAAC,CAAA,GAAI,MAAM,QAAS,CAAA,SAAA,CAAA;AAEvC,IAAA,MAAM,gBAAgB,KAAM,CAAA,WAAA,CAAA;AAI5B,IAAQ,OAAA,CAAA,sCAAA;AAAA,MACJ,aAAc,CAAA,QAAA;AAAA,MACd,OAAA;AAAA,MACA,SAAU,CAAA,KAAA;AAAA,KACd,CAAA;AAEA,IAAQ,OAAA,CAAA,WAAA,CAAY,cAAc,QAAQ,CAAA,CAAA;AAC1C,IAAQ,OAAA,CAAA,YAAA,CAAa,CAAG,EAAA,uBAAA,EAAyB,OAAO,CAAA,CAAA;AACxD,IAAA,OAAA,CAAQ,YAAa,CAAA,CAAA,EAAG,KAAM,CAAA,QAAA,CAAS,WAAW,OAAO,CAAA,CAAA;AAGzD,IAAA,OAAA,CAAQ,kBAAkB,WAAY,CAAA,KAAA,CAAM,IAAM,EAAA,CAAA,EAAG,MAAM,KAAK,CAAA,CAAA;AAAA,GACpE;AAAA,EAEA,OACA,GAAA;AACI,IAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,IAAI,CAAA,CAAA;AACxB,IAAA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;AAAA,GAClB;AACJ,CAAA;AAAA;AA9Da,eAAA,CAGF,SAAY,GAAA;AAAA,EACf,IAAM,EAAA;AAAA,IACF,aAAc,CAAA,kBAAA;AAAA,GAClB;AAAA,EACA,IAAM,EAAA,OAAA;AACV,CAAA;;;;"}