{"version":3,"file":"generateBatchProgram.mjs","sources":["../../../../src/rendering/batcher/gpu/generateBatchProgram.ts"],"sourcesContent":["import { GpuProgram } from '../../renderers/gpu/shader/GpuProgram';\n\nimport type { ProgramSource } from '../../renderers/gpu/shader/GpuProgram';\n\nexport function generateBatchProgram({ vertex, fragment, maxTextures }: {\n    vertex: ProgramSource;\n    fragment: ProgramSource;\n    maxTextures: number;\n})\n{\n    if (fragment.source.indexOf('%bindings%') < 0)\n    {\n        throw new Error('Fragment template must contain \"%bindings%\".');\n    }\n\n    if (fragment.source.indexOf('%forloop%') < 0)\n    {\n        throw new Error('Fragment template must contain \"%forloop%\".');\n    }\n\n    const bindingSrc = generateBindingSrc(maxTextures);\n    const samplerSrc = generateSampleSrc(maxTextures);\n\n    let fragmentSrc = fragment.source;\n\n    fragmentSrc = fragmentSrc.replace(/%bindings%/gi, bindingSrc);\n    fragmentSrc = fragmentSrc.replace(/%forloop%/gi, samplerSrc);\n\n    let vertexSrc = vertex.source;\n\n    if (vertexSrc === fragment.source)\n    {\n        vertexSrc = fragmentSrc;\n    }\n\n    const program = new GpuProgram({\n        vertex: {\n            source: vertexSrc,\n            entryPoint: vertex.entryPoint,\n        },\n        fragment: {\n            source: fragmentSrc,\n            entryPoint: fragment.entryPoint,\n        },\n    });\n\n    return program;\n}\n\nexport function generateLayout(maxTextures: number): Record<string, number>\n{\n    const layout: Record<string, number> = {};\n\n    let bindIndex = 0;\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        layout[`textureSource${i + 1}`] = bindIndex++;\n        layout[`textureSampler${i + 1}`] = bindIndex++;\n    }\n\n    return layout;\n}\n\nexport function generateGPULayout(maxTextures: number): GPUBindGroupLayoutEntry[]\n{\n    const gpuLayout: GPUBindGroupLayoutEntry[] = [];\n\n    let bindIndex = 0;\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        gpuLayout[bindIndex] = {\n            texture: {\n                sampleType: 'float',\n                viewDimension: '2d',\n                multisampled: false,\n            },\n            binding: bindIndex,\n            visibility: GPUShaderStage.FRAGMENT,\n        };\n        bindIndex++;\n\n        gpuLayout[bindIndex] = {\n            sampler: {\n                type: 'filtering',\n            },\n            binding: bindIndex,\n            visibility: GPUShaderStage.FRAGMENT,\n        };\n\n        bindIndex++;\n    }\n\n    return gpuLayout;\n}\n\nexport function generateSampleSrc(maxTextures: number): string\n{\n    const src = [];\n\n    if (maxTextures === 1)\n    {\n        src.push('outColor = textureSampleGrad(textureSource1, textureSampler1, uv, uvDx, uvDy);');\n    }\n    else\n    {\n        src.push('switch textureId {');\n\n        for (let i = 0; i < maxTextures; i++)\n        {\n            if (i === maxTextures - 1)\n            {\n                src.push(`  default:{`);\n            }\n            else\n            {\n                src.push(`  case ${i}:{`);\n            }\n            src.push(`      outColor = textureSampleGrad(textureSource${i + 1}, textureSampler${i + 1}, uv, uvDx, uvDy);`);\n            src.push(`      break;}`);\n        }\n\n        src.push(`}`);\n    }\n\n    return src.join('\\n');\n}\n\nexport function generateBindingSrc(maxTextures: number): string\n{\n    const src = [];\n\n    if (maxTextures === 1)\n    {\n        src.push('@group(1) @binding(0) var textureSource1: texture_2d<f32>;');\n        src.push('@group(1) @binding(1) var textureSampler1: sampler;');\n    }\n    else\n    {\n        let bindingIndex = 0;\n\n        for (let i = 0; i < maxTextures; i++)\n        {\n            src.push(`@group(1) @binding(${bindingIndex++}) var textureSource${i + 1}: texture_2d<f32>;`);\n            src.push(`@group(1) @binding(${bindingIndex++}) var textureSampler${i + 1}: sampler;`);\n        }\n    }\n\n    return src.join('\\n');\n}\n"],"names":[],"mappings":"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"}