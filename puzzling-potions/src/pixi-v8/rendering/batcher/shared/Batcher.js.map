{"version":3,"file":"Batcher.js","sources":["../../../../src/rendering/batcher/shared/Batcher.ts"],"sourcesContent":["import { ViewableBuffer } from '../../../utils/ViewableBuffer';\nimport { fastCopy } from '../../renderers/shared/buffer/utils/fastCopy';\nimport { TextureBatcher } from './TextureBatcher';\n\nimport type { BindGroup } from '../../renderers/gpu/shader/BindGroup';\nimport type { Geometry } from '../../renderers/shared/geometry/Geometry';\nimport type { BLEND_MODES } from '../../renderers/shared/state/const';\nimport type { TextureSource } from '../../renderers/shared/texture/sources/TextureSource';\nimport type { BindableTexture, Texture } from '../../renderers/shared/texture/Texture';\n\n// TODO OPTIMISE THIS CODE\n\nexport interface TextureBatch\n{\n    textures: BindableTexture[]\n    bindGroup: BindGroup;\n    batchLocations: Record<number, number>\n    size: number;\n}\n\nexport class Batch\n{\n    type = 'batch';\n    action = 'renderer';\n\n    elementStart = 0;\n    elementSize = 0;\n\n    // for drawing..\n    start = 0;\n    size = 0;\n    textures: TextureBatch;\n    blendMode: BLEND_MODES;\n\n    canBundle = true;\n    batchParent: { geometry: Geometry, batcher: Batcher };\n\n    destroy()\n    {\n        this.textures = null;\n        this.batchParent = null;\n    }\n}\n\nexport interface BatchableObject\n{\n    indexStart: number;\n\n    packAttributes: (\n        float32View: Float32Array,\n        uint32View: Uint32Array,\n        index: number,\n        textureId: number,\n    ) => void;\n    packIndex: (indexBuffer: Uint32Array, index: number, indicesOffset: number) => void;\n\n    texture: Texture;\n    blendMode: BLEND_MODES;\n    vertexSize: number;\n    indexSize: number;\n\n    // stored for efficient updating..\n    textureId: number;\n    location: number; // location in the buffer\n    batcher: Batcher;\n    batch: Batch;\n}\n\nexport class Batcher\n{\n    maxSize = 4096 * 20;\n\n    attributeBuffer: ViewableBuffer;\n    indexBuffer: Uint32Array;\n\n    attributeSize: number;\n    indexSize: number;\n    elementSize: number;\n\n    dirty = true;\n\n    batchIndex = 0;\n    batches: Batch[] = [];\n\n    // specifics.\n    vertexSize = 6;\n\n    textureBatcher = new TextureBatcher();\n    elements: BatchableObject[] = [];\n    updateIndex: boolean;\n    currentBlendMode: BLEND_MODES;\n    boundTextures: TextureSource[];\n\n    constructor(vertexSize = 4, indexSize = 6)\n    {\n        this.attributeBuffer = new ViewableBuffer(vertexSize * this.vertexSize * 4);\n\n        this.indexBuffer = new Uint32Array(indexSize);\n    }\n\n    begin()\n    {\n        this.batchIndex = 0;\n        this.currentBlendMode = 'inherit';\n\n        let currentBatch = this.batches[this.batchIndex];\n\n        if (!currentBatch)\n        {\n            currentBatch = this.batches[this.batchIndex] = new Batch();\n        }\n\n        currentBatch.elementSize = 0;\n        currentBatch.start = 0;\n        currentBatch.size = 0;\n\n        this.attributeSize = 0;\n        this.indexSize = 0;\n        this.elementSize = 0;\n\n        this.textureBatcher.begin();\n\n        this.dirty = true;\n    }\n\n    add(batchableObject: BatchableObject)\n    {\n        let batch = this.batches[this.batchIndex];\n\n        const texture = batchableObject.texture;\n\n        const blendMode = batchableObject.blendMode;\n\n        if (this.currentBlendMode !== blendMode\n            || batch.elementSize >= this.maxSize\n            || !this.textureBatcher.add(texture))\n        //  || newSize < 65535)\n        {\n            this.break(false);\n\n            this.currentBlendMode = blendMode;\n            batch = this.batches[this.batchIndex];\n            batch.blendMode = blendMode;\n\n            this.textureBatcher.add(texture);\n        }\n\n        batch.elementSize++;\n\n        batchableObject.batcher = this;\n        batchableObject.batch = batch;\n\n        batchableObject.location = this.attributeSize;\n        batchableObject.indexStart = this.indexSize;\n\n        this.indexSize += batchableObject.indexSize;\n        this.attributeSize += ((batchableObject.vertexSize) * this.vertexSize);\n\n        // could pack it right here??\n\n        this.elements[this.elementSize++] = batchableObject;\n    }\n\n    checkAndUpdateTexture(batchableObject: BatchableObject, texture: Texture): boolean\n    {\n        const textureId = batchableObject.batch.textures.batchLocations[texture.styleSourceKey];\n\n        // TODO could try to be a bit smarter if there are spare textures..\n        // but need to figure out how to alter the bind groups too..\n        if (textureId === undefined) return false;\n\n        batchableObject.textureId = textureId;\n        batchableObject.texture = texture;\n\n        return true;\n    }\n\n    updateElement(batchableObject: BatchableObject)// , visible: boolean)\n    {\n        this.dirty = true;\n\n        batchableObject.packAttributes(\n            this.attributeBuffer.float32View,\n            this.attributeBuffer.uint32View,\n            batchableObject.location, batchableObject.textureId);\n\n        // TODO as the element owns the function.. do we need to pass in  the id and\n    }\n\n    hideElement(element: BatchableObject)\n    {\n        this.dirty = true;\n\n        // only hide once!\n        const buffer = this.attributeBuffer.float32View;\n        let location = element.location;\n\n        for (let i = 0; i < element.vertexSize; i++)\n        {\n            buffer[location] = 0;\n            buffer[location + 1] = 0;\n\n            location += 6;\n        }\n    }\n\n    /**\n     * breaks the batcher. This happens when a batch gets too big,\n     * or we need to switch to a different type of rendering (a filter for example)\n     * @param hardBreak - this breaks all the batch data and stops it from trying to optimise the textures\n     */\n    break(hardBreak: boolean)\n    {\n        // TODO REMOVE THIS CHECK..\n        if (this.elementSize === 0) return;\n\n        let previousBatch;\n\n        if (this.batchIndex > 0)\n        {\n            previousBatch = this.batches[this.batchIndex - 1];\n        }\n\n        if (this.attributeSize * 4 > this.attributeBuffer.size)\n        {\n            this._resizeAttributeBuffer(this.attributeSize * 4);\n        }\n\n        if (this.indexSize > this.indexBuffer.length)\n        {\n            this._resizeIndexBuffer(this.indexSize);\n        }\n\n        const currentBatch = this.batches[this.batchIndex];\n\n        currentBatch.size = this.indexSize - currentBatch.start;\n\n        if (!hardBreak && previousBatch)\n        {\n            currentBatch.textures = this.textureBatcher.finish(previousBatch.textures);\n        }\n        else\n        {\n            currentBatch.textures = this.textureBatcher.finish();\n        }\n\n        const size = this.elementSize - currentBatch.elementStart;\n\n        for (let i = 0; i < size; i++)\n        {\n            const batchableObject = this.elements[currentBatch.elementStart + i];\n\n            batchableObject.textureId = currentBatch.textures.batchLocations[batchableObject.texture.styleSourceKey];\n\n            batchableObject.packAttributes(\n                this.attributeBuffer.float32View,\n                this.attributeBuffer.uint32View,\n                batchableObject.location, batchableObject.textureId\n            );\n\n            batchableObject.packIndex(\n                this.indexBuffer,\n                batchableObject.indexStart,\n                batchableObject.location / this.vertexSize,\n            );\n        }\n\n        this.batchIndex++;\n\n        let nextBatch = this.batches[this.batchIndex];\n\n        if (!nextBatch)\n        {\n            nextBatch = this.batches[this.batchIndex] = new Batch();\n        }\n\n        nextBatch.blendMode = this.currentBlendMode;\n        nextBatch.elementStart = this.elementSize;\n        nextBatch.elementSize = 0;\n        nextBatch.start = this.indexSize;\n    }\n\n    finish()\n    {\n        this.break(false);\n        // TODO do we need this?\n        if (this.elementSize === 0) return;\n\n        const currentBatch = this.batches[this.batchIndex];\n\n        currentBatch.size = this.indexSize - currentBatch.start;\n\n        if (this.batchIndex > 0)\n        {\n            const previousBatch = this.batches[this.batchIndex - 1];\n\n            currentBatch.textures = this.textureBatcher.finish(previousBatch.textures);\n\n            return;\n        }\n\n        currentBatch.textures = this.textureBatcher.finish();\n    }\n\n    update()\n    {\n        // emmpty\n    }\n\n    ensureAttributeBuffer(size: number)\n    {\n        if (size * 4 < this.attributeBuffer.size) return;\n\n        this._resizeAttributeBuffer(size * 4);\n    }\n\n    ensureIndexBuffer(size: number)\n    {\n        if (size < this.indexBuffer.length) return;\n\n        this._resizeIndexBuffer(size);\n    }\n\n    private _resizeAttributeBuffer(size: number)\n    {\n        const newSize = Math.max(size, this.attributeBuffer.size * 2);\n\n        const newArrayBuffer = new ViewableBuffer(newSize);\n\n        fastCopy(this.attributeBuffer.rawBinaryData, newArrayBuffer.rawBinaryData);\n\n        this.attributeBuffer = newArrayBuffer;\n    }\n\n    private _resizeIndexBuffer(size: number)\n    {\n        const indexBuffer = this.indexBuffer;\n\n        const newSize = Math.max(size, indexBuffer.length * 2);\n\n        const newIndexBuffer = new Uint32Array(newSize);\n\n        fastCopy(indexBuffer.buffer, newIndexBuffer.buffer);\n\n        this.indexBuffer = newIndexBuffer;\n    }\n\n    destroy()\n    {\n        for (let i = 0; i < this.batches.length; i++)\n        {\n            this.batches[i].destroy();\n        }\n\n        this.batches = null;\n\n        for (let i = 0; i < this.elements.length; i++)\n        {\n            this.elements[i].batch = null;\n        }\n\n        this.elements = null;\n\n        this.indexBuffer = null;\n\n        this.attributeBuffer.destroy();\n        this.attributeBuffer = null;\n\n        this.textureBatcher.destroy();\n\n        this.boundTextures = null;\n    }\n}\n"],"names":["TextureBatcher","ViewableBuffer","fastCopy"],"mappings":"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"}