{"version":3,"file":"BatcherPipe.mjs","sources":["../../../../src/rendering/batcher/shared/BatcherPipe.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { State } from '../../renderers/shared/state/State';\nimport { getBatchedGeometry } from '../gpu/getBatchedGeometry';\nimport { Batcher } from './Batcher';\n\nimport type { Geometry } from '../../renderers/shared/geometry/Geometry';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { BatchPipe, InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../renderers/types';\nimport type { Batch, BatchableObject } from './Batcher';\n\nexport interface BatcherAdaptor\n{\n    init(): void;\n    execute(batchPipe: BatcherPipe, batch: Batch): void\n    destroy(): void;\n}\n\n// eslint-disable-next-line max-len\nexport class BatcherPipe implements InstructionPipe<Batch>, BatchPipe\n{\n    /** @ignore */\n    static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'batch',\n    } as const;\n\n    toUpdate: BatchableObject[] = [];\n    instructionSet: InstructionSet;\n    activeBatcher: {\n        geometry: Geometry;\n        batcher: Batcher\n    };\n\n    // shader: GpuShader;\n    state: State = State.for2d();\n    lastBatch: number;\n    private _batches: Record<number, {\n        geometry: Geometry;\n        batcher: Batcher\n    }> = {};\n    renderer: Renderer;\n    adaptor: BatcherAdaptor;\n\n    constructor(renderer: Renderer, adaptor: BatcherAdaptor)\n    {\n        this.renderer = renderer;\n        this.adaptor = adaptor;\n\n        this.adaptor.init();\n    }\n\n    buildStart(instructionSet: InstructionSet)\n    {\n        this.lastBatch = 0;\n\n        if (!this._batches[instructionSet.uid])\n        {\n            this._batches[instructionSet.uid] = {\n                batcher: new Batcher(),\n                geometry: getBatchedGeometry(),\n            };\n        }\n\n        this._batches[instructionSet.uid].batcher.begin();\n    }\n\n    addToBatch(batchableObject: BatchableObject, instructionSet: InstructionSet)\n    {\n        this._batches[instructionSet.uid].batcher.add(batchableObject);\n    }\n\n    break(instructionSet: InstructionSet)\n    {\n        const batcher = this._batches[instructionSet.uid].batcher;\n\n        const hardBreak = instructionSet.instructionSize > 0 && (instructionSet.lastInstruction().type !== 'batch');\n\n        batcher.break(hardBreak);\n\n        while (this.lastBatch < batcher.batchIndex)\n        {\n            const batch = batcher.batches[this.lastBatch++];\n\n            // TODO feel we can avoid this check...\n            if (batch.elementSize !== 0)\n            {\n                batch.batchParent = this._batches[instructionSet.uid];\n\n                instructionSet.instructions[instructionSet.instructionSize++] = batch;\n            }\n        }\n    }\n\n    buildEnd(instructionSet: InstructionSet)\n    {\n        this.break(instructionSet);\n\n        const { geometry, batcher } = this._batches[instructionSet.uid];\n\n        if (batcher.elementSize === 0) return;\n\n        batcher.finish();\n\n        geometry.indexBuffer.data = batcher.indexBuffer;\n\n        geometry.buffers[0].data = batcher.attributeBuffer.float32View;\n\n        geometry.indexBuffer.update(batcher.indexSize * 4);\n    }\n\n    upload(instructionSet: InstructionSet)\n    {\n        const activeBatcher = this._batches[instructionSet.uid];\n\n        // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n        if (activeBatcher && activeBatcher.batcher.dirty)\n        {\n            activeBatcher.batcher.dirty = false;\n\n            const attributeBuffer = activeBatcher.geometry.buffers[0];\n\n            attributeBuffer.update(activeBatcher.batcher.attributeSize * 4);\n            this.renderer.buffer.updateBuffer(attributeBuffer);\n        }\n    }\n\n    execute(batch: Batch)\n    {\n        this.adaptor.execute(this, batch);\n    }\n\n    destroy()\n    {\n        this.toUpdate = null;\n        this.instructionSet = null;\n        this.activeBatcher = null;\n        this.state = null;\n        this._batches = null;\n        this.renderer = null;\n\n        this.adaptor.destroy();\n        this.adaptor = null;\n\n        for (const i in this._batches)\n        {\n            const batchData = this._batches[i];\n\n            batchData.batcher.destroy();\n            batchData.geometry.destroy();\n        }\n    }\n}\n"],"names":[],"mappings":"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"}