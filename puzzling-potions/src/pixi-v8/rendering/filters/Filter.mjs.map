{"version":3,"file":"Filter.mjs","sources":["../../../src/rendering/filters/Filter.ts"],"sourcesContent":["import { Shader } from '../renderers/shared/shader/Shader';\nimport { State } from '../renderers/shared/state/State';\n\nimport type { RenderSurface } from '../renderers/gpu/renderTarget/GpuRenderTargetSystem';\nimport type { ShaderWithResourcesDescriptor } from '../renderers/shared/shader/Shader';\nimport type { BLEND_MODES } from '../renderers/shared/state/const';\nimport type { Texture } from '../renderers/shared/texture/Texture';\nimport type { FilterSystem } from './shared/FilterSystem';\n\nexport interface FilterOptions extends ShaderWithResourcesDescriptor\n{\n    blendMode?: BLEND_MODES;\n    resolution?: number;\n    padding?: number;\n    antialias?: FilterAntiAlias | boolean;\n    blendRequired?: boolean;\n}\n\nexport type FilterAntiAlias = 'on' | 'off' | 'inherit';\n\nexport class Filter extends Shader\n{\n    /**\n     * The default filter settings\n     * @static\n     */\n    static readonly defaultOptions: Partial<FilterOptions> = {\n        blendMode: 'normal',\n        resolution: 1,\n        padding: 0,\n        antialias: 'inherit',\n        blendRequired: false,\n    };\n\n    /**\n     * The padding of the filter. Some filters require extra space to breath such as a blur.\n     * Increasing this will add extra width and height to the bounds of the object that the\n     * filter is applied to.\n     * @default 0\n     */\n    public padding: number;\n\n    /**\n     * should the filter use antialiasing?\n     * @default inherit\n     */\n    public antialias: FilterAntiAlias;\n\n    /** If enabled is true the filter is applied, if false it will not. */\n    public enabled = true;\n\n    /**\n     * The WebGL state the filter requires to render.\n     * @internal\n     */\n    _state = State.for2d();\n\n    /**\n     * The resolution of the filter. Setting this to be lower will lower the quality but\n     * increase the performance of the filter.\n     * @default PIXI.Filter.defaultOptions.resolution\n     */\n    public resolution: number;\n\n    /**\n     * Whether or not this filter requires the previous render texture for blending.\n     * @default false\n     */\n    public blendRequired: boolean;\n\n    constructor(options: FilterOptions)\n    {\n        options = { ...Filter.defaultOptions, ...options };\n\n        super({\n            gpuProgram: options.gpuProgram,\n            glProgram: options.glProgram,\n            resources: options.resources,\n        });\n\n        this.padding = options.padding;\n\n        // check if is boolean\n        if (typeof options.antialias === 'boolean')\n        {\n            this.antialias = options.antialias ? 'on' : 'off';\n        }\n        else\n        {\n            this.antialias = options.antialias ?? 'inherit';\n        }\n\n        this.resolution = options.resolution;\n        this.blendRequired = options.blendRequired;\n    }\n\n    /**\n     * Applies the filter\n     * @param filterManager - The renderer to retrieve the filter from\n     * @param input - The input render target.\n     * @param output - The target to output to.\n     * @param clearMode - Should the output be cleared before rendering to it\n     */\n    public apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clearMode: boolean\n    ): void\n    {\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n\n    /**\n     * Sets the blend mode of the filter.\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this._state.blendMode;\n    }\n\n    set blendMode(value: BLEND_MODES)\n    {\n        this._state.blendMode = value;\n    }\n}\n"],"names":[],"mappings":";;;AAoBO,MAAM,OAAA,GAAN,cAAqB,MAC5B,CAAA;AAAA,EAiDI,YAAY,OACZ,EAAA;AACI,IAAA,OAAA,GAAU,EAAE,GAAG,OAAO,CAAA,cAAA,EAAgB,GAAG,OAAQ,EAAA,CAAA;AAEjD,IAAM,KAAA,CAAA;AAAA,MACF,YAAY,OAAQ,CAAA,UAAA;AAAA,MACpB,WAAW,OAAQ,CAAA,SAAA;AAAA,MACnB,WAAW,OAAQ,CAAA,SAAA;AAAA,KACtB,CAAA,CAAA;AA7BL;AAAA,IAAA,IAAA,CAAO,OAAU,GAAA,IAAA,CAAA;AAMjB;AAAA;AAAA;AAAA;AAAA,IAAA,IAAA,CAAA,MAAA,GAAS,MAAM,KAAM,EAAA,CAAA;AAyBjB,IAAA,IAAA,CAAK,UAAU,OAAQ,CAAA,OAAA,CAAA;AAGvB,IAAI,IAAA,OAAO,OAAQ,CAAA,SAAA,KAAc,SACjC,EAAA;AACI,MAAK,IAAA,CAAA,SAAA,GAAY,OAAQ,CAAA,SAAA,GAAY,IAAO,GAAA,KAAA,CAAA;AAAA,KAGhD,MAAA;AACI,MAAK,IAAA,CAAA,SAAA,GAAY,QAAQ,SAAa,IAAA,SAAA,CAAA;AAAA,KAC1C;AAEA,IAAA,IAAA,CAAK,aAAa,OAAQ,CAAA,UAAA,CAAA;AAC1B,IAAA,IAAA,CAAK,gBAAgB,OAAQ,CAAA,aAAA,CAAA;AAAA,GACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASO,KACH,CAAA,aAAA,EACA,KACA,EAAA,MAAA,EACA,SAEJ,EAAA;AACI,IAAA,aAAA,CAAc,WAAY,CAAA,IAAA,EAAM,KAAO,EAAA,MAAA,EAAQ,SAAS,CAAA,CAAA;AAAA,GAC5D;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,SACJ,GAAA;AACI,IAAA,OAAO,KAAK,MAAO,CAAA,SAAA,CAAA;AAAA,GACvB;AAAA,EAEA,IAAI,UAAU,KACd,EAAA;AACI,IAAA,IAAA,CAAK,OAAO,SAAY,GAAA,KAAA,CAAA;AAAA,GAC5B;AACJ,CAAA,CAAA;AA1GO,IAAM,MAAN,GAAA,QAAA;AAAA;AAAA;AAAA;AAAA;AAAM,MAAA,CAMO,cAAyC,GAAA;AAAA,EACrD,SAAW,EAAA,QAAA;AAAA,EACX,UAAY,EAAA,CAAA;AAAA,EACZ,OAAS,EAAA,CAAA;AAAA,EACT,SAAW,EAAA,SAAA;AAAA,EACX,aAAe,EAAA,KAAA;AACnB,CAAA;;;;"}