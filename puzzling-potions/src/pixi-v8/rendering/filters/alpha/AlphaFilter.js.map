{"version":3,"file":"AlphaFilter.js","sources":["../../../../src/rendering/filters/alpha/AlphaFilter.ts"],"sourcesContent":["import { GpuProgram } from '../../renderers/gpu/shader/GpuProgram';\nimport { UniformGroup } from '../../renderers/shared/shader/UniformGroup';\nimport { Filter } from '../Filter';\nimport source from './alpha.wgsl';\n\nexport interface AlphaFilterOptions\n{\n    /**\n     * Amount of alpha from 0 to 1, where 0 is transparent\n     * @default 1\n     */\n    alpha: number;\n}\n\n/**\n * Simplest filter - applies alpha.\n *\n * Use this instead of Container's alpha property to avoid visual layering of individual elements.\n * AlphaFilter applies alpha evenly across the entire display object and any opaque elements it contains.\n * If elements are not opaque, they will blend with each other anyway.\n *\n * Very handy if you want to use common features of all filters:\n *\n * 1. Assign a blendMode to this filter, blend all elements inside display object with background.\n *\n * 2. To use clipping in display coordinates, assign a filterArea to the same container that has this filter.\n */\nexport class AlphaFilter extends Filter\n{\n    static readonly DEFAULT_OPTIONS: AlphaFilterOptions = {\n        alpha: 1\n    };\n\n    constructor(options?: AlphaFilterOptions)\n    {\n        options = { ...AlphaFilter.DEFAULT_OPTIONS, ...options };\n\n        const gpuProgram = new GpuProgram({\n            vertex: {\n                source,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const filterUniforms = new UniformGroup({\n            uAlpha: { value: options.alpha, type: 'f32' },\n        });\n\n        super({\n            gpuProgram,\n            resources: {\n                filterUniforms\n            }\n        });\n    }\n\n    /**\n     * Coefficient for alpha multiplication\n     * @default 1\n     */\n    get alpha(): number { return this.resources.filterUniforms.uniforms.uAlpha; }\n    set alpha(value: number) { this.resources.filterUniforms.uniforms.uAlpha = value; }\n}\n"],"names":["Filter","GpuProgram","source","UniformGroup"],"mappings":";;;;;;;;;AA2BO,MAAM,YAAA,GAAN,cAA0BA,aACjC,CAAA;AAAA,EAKI,YAAY,OACZ,EAAA;AACI,IAAA,OAAA,GAAU,EAAE,GAAG,YAAY,CAAA,eAAA,EAAiB,GAAG,OAAQ,EAAA,CAAA;AAEvD,IAAM,MAAA,UAAA,GAAa,IAAIC,qBAAW,CAAA;AAAA,MAC9B,MAAQ,EAAA;AAAA,gBACJC,gBAAA;AAAA,QACA,UAAY,EAAA,YAAA;AAAA,OAChB;AAAA,MACA,QAAU,EAAA;AAAA,gBACNA,gBAAA;AAAA,QACA,UAAY,EAAA,cAAA;AAAA,OAChB;AAAA,KACH,CAAA,CAAA;AAED,IAAM,MAAA,cAAA,GAAiB,IAAIC,yBAAa,CAAA;AAAA,MACpC,QAAQ,EAAE,KAAA,EAAO,OAAQ,CAAA,KAAA,EAAO,MAAM,KAAM,EAAA;AAAA,KAC/C,CAAA,CAAA;AAED,IAAM,KAAA,CAAA;AAAA,MACF,UAAA;AAAA,MACA,SAAW,EAAA;AAAA,QACP,cAAA;AAAA,OACJ;AAAA,KACH,CAAA,CAAA;AAAA,GACL;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,KAAgB,GAAA;AAAE,IAAO,OAAA,IAAA,CAAK,SAAU,CAAA,cAAA,CAAe,QAAS,CAAA,MAAA,CAAA;AAAA,GAAQ;AAAA,EAC5E,IAAI,MAAM,KAAe,EAAA;AAAE,IAAK,IAAA,CAAA,SAAA,CAAU,cAAe,CAAA,QAAA,CAAS,MAAS,GAAA,KAAA,CAAA;AAAA,GAAO;AACtF,CAAA,CAAA;AAvCO,IAAM,WAAN,GAAA,aAAA;AAAM,WAAA,CAEO,eAAsC,GAAA;AAAA,EAClD,KAAO,EAAA,CAAA;AACX,CAAA;;;;"}