{"version":3,"file":"DisplacementFilter.js","sources":["../../../../src/rendering/filters/displacement/DisplacementFilter.ts"],"sourcesContent":["import { Matrix } from '../../../maths/Matrix';\nimport { Point } from '../../../maths/Point';\nimport { GpuProgram } from '../../renderers/gpu/shader/GpuProgram';\nimport { UniformGroup } from '../../renderers/shared/shader/UniformGroup';\nimport { Filter } from '../Filter';\nimport source from './displacement.wgsl';\n\nimport type { Texture } from '../../renderers/shared/texture/Texture';\nimport type { Sprite } from '../../sprite/shared/Sprite';\nimport type { FilterSystem } from '../shared/FilterSystem';\n\nexport interface DisplacementFilterOptions\n{\n    sprite: Sprite,\n    scale?: number | { x: number, y: number },\n}\n\n/**\n * A Noise effect filter.\n *\n * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js\n * @memberof PIXI.filters\n * @author Vico @vicocotea\n */\nexport class DisplacementFilter extends Filter\n{\n    uniformGroup: UniformGroup;\n    sprite: Sprite;\n\n    constructor(options: DisplacementFilterOptions)\n    {\n        let scale = options.scale || 20;\n\n        const filterUniforms = new UniformGroup({\n            filterMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            scale: { value: scale, type: 'vec2<f32>' },\n            rotation: { value: new Float32Array([0, 0, 0, 0]), type: 'vec4<f32>' },\n        });\n\n        const gpuProgram = new GpuProgram({\n            vertex: {\n                source,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const texture = options.sprite.texture;\n\n        super({\n            gpuProgram,\n            resources: {\n                filterUniforms,\n                mapTexture: texture.source,\n                mapStyle: texture.style,\n            }\n        });\n\n        this.sprite = options.sprite;\n        this.sprite.renderable = false;\n\n        // check if is a number or a point\n        if (typeof scale === 'number')\n        {\n            scale = new Point(scale, scale);\n        }\n    }\n\n    public apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: Texture,\n        clearMode: boolean\n    ): void\n    {\n        filterManager.calculateSpriteMatrix(\n            this.uniformGroup.uniforms.filterMatrix as Matrix,\n            this.sprite\n        );\n\n        // Extract rotation from world transform\n        const wt = this.sprite.worldTransform;\n        const lenX = Math.sqrt((wt.a * wt.a) + (wt.b * wt.b));\n        const lenY = Math.sqrt((wt.c * wt.c) + (wt.d * wt.d));\n\n        const uniforms = this.resources.filterUniforms.uniforms;\n\n        if (lenX !== 0 && lenY !== 0)\n        {\n            uniforms.rotation[0] = wt.a / lenX;\n            uniforms.rotation[1] = wt.b / lenX;\n            uniforms.rotation[2] = wt.c / lenY;\n            uniforms.rotation[3] = wt.d / lenY;\n        }\n\n        this.uniformGroup.update();\n\n        this.resources.mapTexture = this.sprite.texture.source;\n\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n\n    get scale(): Point\n    {\n        return this.uniformGroup.uniforms.scale as Point;\n    }\n}\n"],"names":["Filter","UniformGroup","Matrix","GpuProgram","source","Point"],"mappings":"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"}