{"version":3,"file":"KawaseBlurFilter.mjs","sources":["../../../../src/rendering/filters/kawase-blur/KawaseBlurFilter.ts"],"sourcesContent":["import { Point } from '../../../maths/Point';\nimport { PointLike } from '../../../maths/PointLike';\nimport { GlProgram } from '../../renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../renderers/gpu/shader/GpuProgram';\nimport { logDebugTexture } from '../../renderers/gpu/texture/utils/logDebugTexture';\nimport { UniformGroup } from '../../renderers/shared/shader/UniformGroup';\nimport { TexturePool } from '../../renderers/shared/texture/TexturePool';\nimport { Filter } from '../Filter';\nimport fragment from './kawase-blur.frag';\nimport vertex from './kawase-blur.vert';\nimport source from './kawase-blur.wgsl';\n\nimport type { PointData } from '../../../maths/PointData';\nimport type { RenderSurface } from '../../renderers/gpu/renderTarget/GpuRenderTargetSystem';\nimport type { Texture } from '../../renderers/shared/texture/Texture';\nimport type { FilterSystem } from '../shared/FilterSystem';\n\nexport interface KawaseBlurFilterOptions\n{\n    /**\n     * The blur of the filter. Should be greater than `0`.\n     * If value is an Array, setting kernels.\n     * @default 4\n     */\n    strength?: T;\n    /**\n     * The quality of the filter. Should be an integer greater than `1`\n     * @default 3\n     */\n    quality?: number;\n    /**\n     * Clamp edges, useful for removing dark edges from fullscreen filters or bleeding to the edge of filterArea.\n     * @default false\n     */\n    clamp?: boolean;\n    /**\n     * Sets the pixel size of the filter. Large size is blurrier. For advanced usage.\n     * @default [1,1]\n     */\n    pixelSize?: U;\n}\n\n/**\n * A Noise effect filter.\n *\n * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js\n * @memberof PIXI.filters\n * @author Vico @vicocotea\n */\nexport class KawaseBlurFilter extends Filter\n{\n    static readonly DEFAULT: KawaseBlurFilterOptions = {\n        strength: 4,\n        quality: 3,\n        clamp: false,\n        pixelSize: { x: 1, y: 1 }\n    };\n\n    private _pixelSize: PointData = new Point();\n    private _clamp: boolean;\n    private _kernels: number[] = [];\n    private _blur: number;\n    private _quality: number;\n\n    /**\n     * @param options\n     */\n    constructor(options: KawaseBlurFilterOptions = {})\n    {\n        options = { ...KawaseBlurFilter.DEFAULT, ...options };\n\n        const gpuProgram = new GpuProgram({\n            vertex: {\n                source,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = new GlProgram({\n            vertex,\n            fragment,\n            name: 'noise-filter'\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            resources: {\n                kawaseUniforms: new UniformGroup({\n                    uOffset: { value: { x: 0, y: 0 }, type: 'vec2<f32>' },\n                })\n            },\n            resolution: 1,\n        });\n\n        this._pixelSize.x = options.pixelSize.x;\n        this._pixelSize.y = options.pixelSize.y;\n\n        this.kernels = options.strength;\n\n        this._blur = options.strength;\n        this.quality = options.quality;\n\n        this._clamp = options.clamp;\n    }\n\n    public override apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clear: boolean,\n    ): void\n    {\n        const pixelSizeX = this._pixelSize.x;\n        const pixelSizeY = this._pixelSize.y;\n        const uvX = pixelSizeX / input.source.width;\n        const uvY = pixelSizeY / input.source.height;\n        let offset;\n\n        const uniforms = this.resources.kawaseUniforms.uniforms;\n\n        if (true)// this._quality === 1 || this._blur === 0)\n        {\n            offset = this._kernels[0] + 0.5;\n            uniforms.uOffset.x = offset * uvX;\n            uniforms.uOffset.y = offset * uvY;\n\n            console.log(uniforms.uOffset.x);\n\n            filterManager.applyFilter(this, input, output, clear);\n\n            //            logDebugTexture(input, filterManager.renderer);\n        }\n        else\n        {\n            const renderTarget = TexturePool.getOptimalTexture(input.width, input.height, 1, false);\n\n            let source = input;\n            let target = renderTarget;\n            let tmp;\n\n            const last = this._quality - 1;\n\n            for (let i = 0; i < last; i++)\n            {\n                offset = this._kernels[i] + 0.5;\n                uniforms.uOffset[0] = offset * uvX;\n                uniforms.uOffset[1] = offset * uvY;\n                filterManager.applyFilter(this, source, target, true);\n\n                tmp = source;\n                source = target;\n                target = tmp;\n\n            //    logDebugTexture(source, filterManager.renderer);\n            }\n\n            offset = this._kernels[last] + 0.5;\n            uniforms.uOffset[0] = offset * uvX;\n            uniforms.uOffset[1] = offset * uvY;\n\n            filterManager.applyFilter2(this, source, output, clear);\n            TexturePool.returnTexture(renderTarget);\n        }\n    }\n\n    /**\n     * The amount of blur, value greater than `0`.\n     * @default 4\n     */\n    get strength(): number { return this._blur; }\n    set strength(value: number)\n    {\n        this._blur = value;\n        this._generateKernels();\n    }\n\n    /**\n     * The quality of the filter, integer greater than `1`.\n     * @default 3\n     */\n    get quality(): number { return this._quality; }\n    set quality(value: number)\n    {\n        this._quality = Math.max(1, Math.round(value));\n        this._generateKernels();\n    }\n\n    /**\n     * The kernel size of the blur filter, for advanced usage\n     * @default [0]\n     */\n    get kernels(): number[] { return this._kernels; }\n    set kernels(value: number[])\n    {\n        if (Array.isArray(value) && value.length > 0)\n        {\n            this._kernels = value;\n            this._quality = value.length;\n            this._blur = Math.max(...value);\n        }\n        else\n        {\n            // If value is invalid, set default value\n            this._kernels = [0];\n            this._quality = 1;\n        }\n    }\n\n    /**\n     * The size of the pixels. Large size is blurrier. For advanced usage.\n     * @default [1,1]\n     */\n    get pixelSize(): PointData { return this._pixelSize; }\n    set pixelSize(value: PointData)\n    {\n        this._pixelSize.x = value.x;\n        this._pixelSize.y = value.y;\n    }\n\n    /**\n     * The size of the pixels on the `x` axis. Large size is blurrier. For advanced usage.\n     * @default 1\n     */\n    get pixelSizeX(): number { return this._pixelSize.x; }\n    set pixelSizeX(value: number) { this._pixelSize.x = value; }\n\n    /**\n     * The size of the pixels on the `y` axis. Large size is blurrier. For advanced usage.\n     * @default 1\n     */\n    get pixelSizeY(): number { return this._pixelSize.y; }\n    set pixelSizeY(value: number) { this._pixelSize.y = value; }\n\n    /**\n     * Get the if the filter is clamped\n     * @default false\n     */\n    get clamp(): boolean { return this._clamp; }\n\n    /** Update padding based on kernel data */\n    private _updatePadding()\n    {\n        this.padding = Math.ceil(this._kernels.reduce((acc, v) => acc + v + 0.5, 0));\n    }\n\n    /** Auto generate kernels by blur & quality */\n    private _generateKernels()\n    {\n        const blur = this._blur;\n        const quality = this._quality;\n        const kernels: number[] = [blur];\n\n        if (blur > 0)\n        {\n            let k = blur;\n            const step = blur / quality;\n\n            for (let i = 1; i < quality; i++)\n            {\n                k -= step;\n                kernels.push(k);\n            }\n        }\n\n        this.kernels = kernels;\n\n        this._updatePadding();\n    }\n}\n"],"names":["source"],"mappings":"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"}