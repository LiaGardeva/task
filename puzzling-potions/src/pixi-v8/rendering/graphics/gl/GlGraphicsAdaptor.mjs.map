{"version":3,"file":"GlGraphicsAdaptor.mjs","sources":["../../../../src/rendering/graphics/gl/GlGraphicsAdaptor.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/Matrix';\nimport { MAX_TEXTURES } from '../../batcher/shared/const';\nimport { batchSamplersUniformGroup } from '../../renderers/gl/shader/batchSamplersUniformGroup';\nimport { Shader } from '../../renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../renderers/shared/shader/UniformGroup';\nimport { color32BitToUniform } from '../gpu/colorToUniform';\nimport { generateDefaultGraphicsBatchGlProgram } from './generateDefaultGraphicsBatchGlProgram';\n\nimport type { WebGLRenderer } from '../../renderers/gl/WebGLRenderer';\nimport type { Renderable } from '../../renderers/shared/Renderable';\nimport type { GraphicsAdaptor, GraphicsPipe } from '../shared/GraphicsPipe';\nimport type { GraphicsView } from '../shared/GraphicsView';\n\nexport class GlGraphicsAdaptor implements GraphicsAdaptor\n{\n    /** @ignore */\n    static extension = {\n        type: [\n            ExtensionType.WebGLPipesAdaptor,\n        ],\n        name: 'graphics',\n    } as const;\n\n    shader: Shader;\n\n    init()\n    {\n        const uniforms = new UniformGroup({\n            color: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n            transformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n        });\n\n        // uniforms.default.static = true;\n\n        this.shader = new Shader({\n            glProgram: generateDefaultGraphicsBatchGlProgram(MAX_TEXTURES),\n            resources: {\n                localUniforms: uniforms,\n                batchSamplers: batchSamplersUniformGroup,\n            }\n        });\n    }\n\n    execute(graphicsPipe: GraphicsPipe, renderable: Renderable<GraphicsView>): void\n    {\n        const context = renderable.view.context;\n        const shader = context.customShader || this.shader;\n        const renderer = graphicsPipe.renderer as WebGLRenderer;\n        const contextSystem = renderer.graphicsContext;\n\n        if (!contextSystem.updateGpuContext(context).batches.length)\n        { return; }\n\n        const {\n            geometry, batches,\n        } = contextSystem.getContextRenderData(context);\n\n        const state = graphicsPipe.state;\n\n        state.blendMode = renderable.layerBlendMode;\n\n        renderer.state.set(graphicsPipe.state);\n\n        const localUniforms = shader.resources.localUniforms.uniforms;\n\n        localUniforms.transformMatrix = renderable.layerTransform;\n\n        color32BitToUniform(\n            renderable.layerColor,\n            localUniforms.color,\n            0\n        );\n\n        // WebGL specific..\n\n        renderer.shader.bind(shader);\n        renderer.shader.bindUniformBlock(renderer.globalUniforms.uniformGroup, 'globalUniforms');\n\n        // renderer.\n\n        renderer.geometry.bind(geometry, shader.glProgram);\n\n        for (let i = 0; i < batches.length; i++)\n        {\n            const batch = batches[i];\n\n            if (batch.size)\n            {\n                for (let j = 0; j < batch.textures.textures.length; j++)\n                {\n                    renderer.texture.bind(batch.textures.textures[j], j);\n                }\n\n                renderer.geometry.draw('triangle-list', batch.size, batch.start);\n            }\n        }\n    }\n\n    destroy(): void\n    {\n        this.shader.destroy(true);\n        this.shader = null;\n    }\n}\n"],"names":[],"mappings":"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"}