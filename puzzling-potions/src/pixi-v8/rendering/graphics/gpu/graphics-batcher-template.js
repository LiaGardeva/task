'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var programSrc = "struct GlobalUniforms {\n  projectionMatrix:mat3x3<f32>,\n  worldTransformMatrix:mat3x3<f32>,\n  worldAlpha: f32\n}\n\nstruct LocalUniforms {\n  color:vec4<f32>,\n  transformMatrix:mat3x3<f32>\n}\n\n\n@group(0) @binding(0) var<uniform> globalUniforms : GlobalUniforms;\n%bindings%\n@group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n\n\nstruct VSOutput {\n    @builtin(position) position: vec4<f32>,\n    @location(0) uv : vec2<f32>,\n    @location(1) color : vec4<f32>,\n    @location(2) @interpolate(flat) textureId : u32,\n  };\n\n  \n@vertex\nfn mainVertex(\n  @location(0) aPosition : vec2<f32>, \n  @location(1) aUV : vec2<f32>,\n  @location(2) aColor : vec4<f32>,\n  @location(3) aTexture : f32,\n) -> VSOutput {\n\n  var  mvpMatrix = globalUniforms.projectionMatrix * globalUniforms.worldTransformMatrix * localUniforms.transformMatrix;\n\n  var  colorOut = aColor * localUniforms.color.bgra;\n\n  var alpha = vec4<f32>(\n    colorOut.a * globalUniforms.worldAlpha,\n    colorOut.a * globalUniforms.worldAlpha,\n    colorOut.a * globalUniforms.worldAlpha,\n    globalUniforms.worldAlpha\n  );\n\n  colorOut *= alpha;\n\n\n  return VSOutput(\n    vec4<f32>((mvpMatrix * vec3<f32>(aPosition, 1.0)).xy, 0.0, 1.0),\n    aUV,\n    colorOut,\n    u32(aTexture)\n  );\n};\n\n\n@fragment\nfn mainFragment(\n  @location(0) uv: vec2<f32>,\n  @location(1) color:vec4<f32>,\n  @location(2) @interpolate(flat) textureId: u32,\n) -> @location(0) vec4<f32> {\n\n\n    var uvDx = dpdx(uv);\n    var uvDy = dpdy(uv);\n\n    var outColor:vec4<f32>;\n    \n    %forloop%\n  \n    // multiply the alpha!\n    outColor.r *= outColor.a;\n    outColor.g *= outColor.a;\n    outColor.b *= outColor.a;\n\n    return (outColor) * color; //* 0.1;\n};\n";

exports["default"] = programSrc;
//# sourceMappingURL=graphics-batcher-template.js.map
