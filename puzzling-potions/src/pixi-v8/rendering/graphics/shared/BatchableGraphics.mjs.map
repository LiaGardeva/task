{"version":3,"file":"BatchableGraphics.mjs","sources":["../../../../src/rendering/graphics/shared/BatchableGraphics.ts"],"sourcesContent":["import { mixColors } from '../../scene/utils/mixColors';\n\nimport type { Batch, BatchableObject, Batcher } from '../../batcher/shared/Batcher';\nimport type { Renderable } from '../../renderers/shared/Renderable';\nimport type { Texture } from '../../renderers/shared/texture/Texture';\nimport type { GraphicsView } from './GraphicsView';\n\nexport class BatchableGraphics implements BatchableObject\n{\n    indexStart: number;\n    textureId: number;\n    texture: Texture;\n    location: number;\n    batcher: Batcher = null;\n    batch: Batch = null;\n    renderable: Renderable<GraphicsView>;\n    indexOffset: number;\n    indexSize: number;\n    vertexOffset: number;\n    vertexSize: number;\n    color: number;\n    alpha: number;\n    colorAlpha: number;\n    applyTransform = true;\n\n    geometryData: { vertices: number[]; uvs: number[]; indices: number[]; };\n\n    get blendMode()\n    {\n        if (this.applyTransform)\n        {\n            return this.renderable.layerBlendMode;\n        }\n\n        return 'normal';\n    }\n\n    packIndex(indexBuffer: Uint32Array, index: number, indicesOffset: number)\n    {\n        const indices = this.geometryData.indices;\n\n        for (let i = 0; i < this.indexSize; i++)\n        {\n            indexBuffer[index++] = indices[i + this.indexOffset] + indicesOffset - this.vertexOffset;\n        }\n    }\n\n    packAttributes(\n        float32View: Float32Array,\n        uint32View: Uint32Array,\n        index: number,\n        textureId: number\n    )\n    {\n        const geometry = this.geometryData;\n\n        const positions = geometry.vertices;\n        const uvs = geometry.uvs;\n\n        const offset = this.vertexOffset * 2;\n        const vertSize = (this.vertexOffset + this.vertexSize) * 2;\n\n        const rgb = this.color;\n        const bgr = (rgb >> 16) | (rgb & 0xff00) | ((rgb & 0xff) << 16);\n\n        if (this.applyTransform)\n        {\n            const renderable = this.renderable;\n\n            const argb = mixColors(bgr + ((this.alpha * 255) << 24), renderable.layerColor);\n\n            const wt = renderable.layerTransform;\n\n            const a = wt.a;\n            const b = wt.b;\n            const c = wt.c;\n            const d = wt.d;\n            const tx = wt.tx;\n            const ty = wt.ty;\n\n            for (let i = offset; i < vertSize; i += 2)\n\n            {\n                const x = positions[i];\n                const y = positions[i + 1];\n\n                float32View[index++] = (a * x) + (c * y) + tx;\n                float32View[index++] = (b * x) + (d * y) + ty;\n\n                float32View[index++] = uvs[i];\n                float32View[index++] = uvs[i + 1];\n\n                uint32View[index++] = argb;\n                float32View[index++] = textureId;\n            }\n        }\n        else\n        {\n            const argb = bgr + ((this.alpha * 255) << 24);\n\n            for (let i = offset; i < vertSize; i += 2)\n            {\n                float32View[index++] = positions[i];\n                float32View[index++] = positions[i + 1];\n\n                float32View[index++] = uvs[i];\n                float32View[index++] = uvs[i + 1];\n\n                uint32View[index++] = argb;\n                float32View[index++] = textureId;\n            }\n        }\n    }\n\n    // TODO rename to vertexSize\n    get vertSize()\n    {\n        return this.vertexSize;\n    }\n\n    copyTo(gpuBuffer: BatchableGraphics)\n    {\n        gpuBuffer.indexOffset = this.indexOffset;\n        gpuBuffer.indexSize = this.indexSize;\n\n        gpuBuffer.vertexOffset = this.vertexOffset;\n        gpuBuffer.vertexSize = this.vertexSize;\n\n        gpuBuffer.color = this.color;\n        gpuBuffer.alpha = this.alpha;\n\n        gpuBuffer.texture = this.texture;\n        gpuBuffer.geometryData = this.geometryData;\n    }\n}\n"],"names":[],"mappings":"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"}