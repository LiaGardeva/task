{"version":3,"file":"GraphicsContext.js","sources":["../../../../src/rendering/graphics/shared/GraphicsContext.ts"],"sourcesContent":["/* eslint-disable max-len */\nimport EventEmitter from 'eventemitter3';\nimport { Matrix } from '../../../maths/Matrix';\nimport { Point } from '../../../maths/Point';\nimport { convertColorToNumber } from '../../../utils/color/convertColorToNumber';\nimport { Texture } from '../../renderers/shared/texture/Texture';\nimport { Bounds } from '../../scene/bounds/Bounds';\nimport { FillGradient } from './fill/FillGradient';\nimport { FillPattern } from './fill/FillPattern';\nimport { GraphicsPath } from './path/GraphicsPath';\nimport { SVGParser } from './svg/SVGParser';\nimport { convertFillInputToFillStyle } from './utils/convertFillInputToFillStyle';\n\nimport type { PointData } from '../../../maths/PointData';\nimport type { ShapePrimitive } from '../../../maths/shapes/ShapePrimitive';\nimport type { Shader } from '../../renderers/shared/shader/Shader';\nimport type { TextureDestroyOptions, TypeOrBool } from '../../scene/destroyTypes';\nimport type { LineCap, LineJoin } from './const';\nimport type { ShapePath } from './path/ShapePath';\n\nexport interface FillStyle\n{\n    color?: number;\n    alpha?: number;\n    texture?: Texture;\n    matrix?: Matrix;\n    fill?: FillPattern | FillGradient;\n}\n\nexport interface PatternFillStyle\n{\n    fill?: FillPattern;\n    color?: number;\n    alpha?: number;\n}\n\nexport interface DefaultFillStyle\n{\n    color?: number;\n    alpha?: number;\n    texture?: Texture;\n    matrix?: Matrix;\n}\n\nexport interface StrokeStyle extends FillStyle\n{\n    width?: number;\n    alignment?: number;\n    // native?: boolean;\n    cap?: LineCap;\n    join?: LineJoin;\n    miterLimit?: number;\n}\n\nlet UID = 0;\nconst tmpPoint = new Point();\n\nexport type BatchMode = 'auto' | 'batch' | 'no-batch';\n\nexport type FillStyleInputs = number | string | FillGradient | CanvasPattern | PatternFillStyle | DefaultFillStyle;\n\nexport interface FillInstruction\n{\n    action: 'fill' | 'stroke' | 'cut'\n    data: { style: FillStyle, path: GraphicsPath, hole?: GraphicsPath }\n}\n\nexport interface TextureInstruction\n{\n    action: 'texture'\n    data: {\n        image: Texture,\n\n        dx: number\n        dy: number\n\n        dw: number\n        dh: number\n\n        transform: Matrix\n        alpha: number\n        style: number,\n    }\n}\n\nexport type GraphicsInstructions = FillInstruction | TextureInstruction;\n\nconst tempMatrix = new Matrix();\n\nexport class GraphicsContext extends EventEmitter<{\n    update: GraphicsContext\n    destroy: GraphicsContext\n}>\n{\n    static defaultFillStyle: FillStyle = {\n        color: 0,\n        alpha: 1,\n        texture: Texture.WHITE,\n    };\n\n    static defaultStrokeStyle: StrokeStyle = {\n        width: 1,\n        color: 0,\n        alpha: 1,\n        alignment: 0.5,\n        miterLimit: 10,\n        cap: 'butt',\n        join: 'miter',\n        texture: Texture.WHITE,\n    };\n\n    uid = UID++;\n    usage = 0;\n\n    label: string;\n    dirty = true;\n\n    batchMode: BatchMode = 'auto';\n\n    transformMatrix: Matrix;\n\n    instructions: GraphicsInstructions[] = [];\n\n    activePath: GraphicsPath = new GraphicsPath();\n\n    customShader?: Shader;\n\n    private _transform: Matrix = new Matrix();\n\n    private _fillStyle: FillStyle = { ...GraphicsContext.defaultFillStyle };\n    private _fillStyleOriginal: FillStyleInputs = 0xffffff;\n\n    private _strokeStyle: StrokeStyle = { ...GraphicsContext.defaultStrokeStyle };\n    private _strokeStyleOriginal: FillStyleInputs = 0xffffff;\n    private _stateStack: { fillStyle: FillStyle; strokeStyle: StrokeStyle, transform: Matrix }[] = [];\n\n    private _tick = 0;\n\n    private _bounds = new Bounds();\n    private boundsDirty = true;\n\n    set fillStyle(value: FillStyleInputs)\n    {\n        if (this._fillStyleOriginal === value) return;\n\n        this._fillStyleOriginal = value;\n\n        if (typeof value === 'number' || typeof value === 'string')\n        {\n            this._fillStyle.color = convertColorToNumber(value);\n            this._fillStyle.texture = Texture.WHITE;\n        }\n        else if (value instanceof FillPattern)\n        {\n            const pattern = value as FillPattern;\n\n            this._fillStyle.color = 0xffffff;\n            this._fillStyle.texture = pattern.texture;\n            this._fillStyle.matrix = pattern.transform;\n        }\n        // TODO Texture\n        else if (value instanceof FillGradient)\n        {\n            const gradient = value as FillGradient;\n\n            gradient.buildLinearGradient();\n\n            this._fillStyle.color = 0xffffff;\n            this._fillStyle.texture = gradient.texture;\n            this._fillStyle.matrix = gradient.transform;\n        }\n        else\n        {\n            // its a regular fill style!\n            this._fillStyle = { ...GraphicsContext.defaultFillStyle, ...value };\n        }\n    }\n\n    get fillStyle(): FillStyleInputs\n    {\n        return this._fillStyleOriginal;\n    }\n\n    set strokeStyle(value: FillStyleInputs)\n    {\n        if (this._strokeStyleOriginal === value) return;\n\n        this._strokeStyleOriginal = value;\n\n        if (typeof value === 'number' || typeof value === 'string')\n        {\n            this._strokeStyle.color = convertColorToNumber(value);\n            this._strokeStyle.texture = Texture.WHITE;\n        }\n        else if (value instanceof FillGradient)\n        {\n            const gradient = value as FillGradient;\n\n            gradient.buildLinearGradient();\n\n            this._strokeStyle.color = 0xffffff;\n            this._strokeStyle.texture = gradient.texture;\n            this._strokeStyle.matrix = gradient.transform;\n        }\n        else\n        {\n            // its a regular fill style!\n            this._strokeStyle = { ...GraphicsContext.defaultStrokeStyle, ...value };\n        }\n    }\n\n    get strokeStyle(): FillStyleInputs\n    {\n        return this._strokeStyleOriginal;\n    }\n\n    setFillStyle(style: FillStyleInputs): this\n    {\n        this.fillStyle = style;\n\n        return this;\n    }\n\n    setStrokeStyle(style: FillStyleInputs): this\n    {\n        this.strokeStyle = style;\n\n        return this;\n    }\n\n    texture(texture: Texture): this;\n    texture(texture: Texture, tint: number): this;\n    texture(texture: Texture, tint: number, dx: number, dy: number): this;\n    texture(texture: Texture, tint: number, dx: number, dy: number, dw: number, dh: number): this;\n    texture(texture: Texture, tint?: number, dx?: number, dy?: number, dw?: number, dh?: number): this\n    {\n        this.instructions.push({\n            action: 'texture',\n            data: {\n                image: texture,\n\n                dx: dx || 0,\n                dy: dy || 0,\n\n                dw: dw || texture.frameWidth,\n                dh: dh || texture.frameHeight,\n\n                transform: this._transform.clone(),\n                alpha: this._fillStyle.alpha,\n                style: tint || 0xffffff,\n            }\n        });\n\n        this.onUpdate();\n\n        return this;\n    }\n\n    beginPath(): this\n    {\n        this.activePath = new GraphicsPath();\n\n        return this;\n    }\n\n    fill(style?: FillStyleInputs): this\n    {\n        let path: GraphicsPath;\n\n        const lastInstruction = this.instructions[this.instructions.length - 1];\n\n        if (this._tick === 0 && lastInstruction && lastInstruction.action === 'stroke')\n        {\n            path = lastInstruction.data.path;\n        }\n        else\n        {\n            path = this.activePath.clone();\n        }\n\n        if (!path) return this;\n\n        let fillStyle = this._fillStyle;\n\n        if (style)\n        {\n            fillStyle = convertFillInputToFillStyle(style, GraphicsContext.defaultFillStyle);\n        }\n\n        // TODO not a fan of the clone!!\n        this.instructions.push({\n            action: 'fill',\n            // TODO copy fill style!\n            data: { style: fillStyle, path }\n        });\n\n        this.onUpdate();\n\n        this.activePath.instructions.length = 0;\n        this._tick = 0;\n\n        return this;\n    }\n\n    stroke(style?: FillStyleInputs): this\n    {\n        let path: GraphicsPath;\n\n        const lastInstruction = this.instructions[this.instructions.length - 1];\n\n        if (this._tick === 0 && lastInstruction && lastInstruction.action === 'fill')\n        {\n            path = lastInstruction.data.path;\n        }\n        else\n        {\n            path = this.activePath.clone();\n        }\n\n        if (!path) return this;\n\n        let strokeStyle = this._strokeStyle;\n\n        if (style)\n        {\n            strokeStyle = convertFillInputToFillStyle(style, GraphicsContext.defaultStrokeStyle);\n        }\n\n        // TODO not a fan of the clone!!\n        this.instructions.push({\n            action: 'stroke',\n            // TODO copy fill style!\n            data: { style: strokeStyle, path }\n        });\n\n        this.onUpdate();\n\n        this.activePath.instructions.length = 0;\n        this._tick = 0;\n\n        return this;\n    }\n\n    cut(): this\n    {\n        for (let i = 0; i < 2; i++)\n        {\n            const lastInstruction = this.instructions[this.instructions.length - 1 - i];\n\n            const holePath = this.activePath.clone();\n\n            if (lastInstruction)\n            {\n                if (lastInstruction.action === 'stroke' || lastInstruction.action === 'fill')\n                {\n                    lastInstruction.data.hole = holePath;\n                }\n            }\n        }\n\n        this.activePath.instructions.length = 0;\n\n        return this;\n    }\n\n    arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise?: boolean): this\n    {\n        this._tick++;\n\n        const t = this._transform;\n\n        this.activePath.arc(\n            (t.a * x) + (t.c * y) + t.tx,\n            (t.b * x) + (t.d * y) + t.ty,\n            radius,\n            startAngle,\n            endAngle,\n            counterclockwise,\n        );\n\n        return this;\n    }\n    arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): this\n    {\n        this._tick++;\n\n        const t = this._transform;\n\n        this.activePath.arcTo(\n            (t.a * x1) + (t.c * y1) + t.tx,\n            (t.b * x1) + (t.d * y1) + t.ty,\n            (t.a * x2) + (t.c * y2) + t.tx,\n            (t.b * x2) + (t.d * y2) + t.ty,\n            radius,\n        );\n\n        return this;\n    }\n\n    arcToSvg(\n        rx: number, ry: number,\n        xAxisRotation: number,\n        largeArcFlag: number,\n        sweepFlag: number,\n        x: number, y: number\n    ): this\n    {\n        this._tick++;\n\n        const t = this._transform;\n\n        this.activePath.arcToSvg(\n            rx, ry,\n            xAxisRotation, // should we rotate this with transform??\n            largeArcFlag,\n            sweepFlag,\n            (t.a * x) + (t.c * y) + t.tx,\n            (t.b * x) + (t.d * y) + t.ty,\n        );\n\n        return this;\n    }\n\n    bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): this\n    {\n        this._tick++;\n\n        // TODO optimize for no transform\n        const t = this._transform;\n\n        this.activePath.bezierCurveTo(\n            (t.a * cp1x) + (t.c * cp1y) + t.tx,\n            (t.b * cp1x) + (t.d * cp1y) + t.ty,\n            (t.a * cp2x) + (t.c * cp2y) + t.tx,\n            (t.b * cp2x) + (t.d * cp2y) + t.ty,\n            (t.a * x) + (t.c * y) + t.tx,\n            (t.b * x) + (t.d * y) + t.ty,\n        );\n\n        return this;\n    }\n    closePath(): this\n    {\n        this._tick++;\n\n        this.activePath?.closePath();\n\n        return this;\n    }\n\n    ellipse(x: number, y: number, radiusX: number, radiusY: number): this\n    {\n        this._tick++;\n\n        this.activePath.ellipse(x, y, radiusX, radiusY, this._transform.clone());\n\n        return this;\n    }\n\n    circle(x: number, y: number, radius: number): this\n    {\n        this._tick++;\n\n        this.activePath.circle(x, y, radius, this._transform.clone());\n\n        return this;\n    }\n\n    path(path: GraphicsPath): this\n    {\n        this._tick++;\n\n        this.activePath.addPath(path, this._transform.clone());\n\n        return this;\n    }\n\n    lineTo(x: number, y: number): this\n    {\n        this._tick++;\n\n        const t = this._transform;\n\n        this.activePath.lineTo(\n            (t.a * x) + (t.c * y) + t.tx,\n            (t.b * x) + (t.d * y) + t.ty\n        );\n\n        return this;\n    }\n\n    moveTo(x: number, y: number): this\n    {\n        this._tick++;\n\n        const t = this._transform;\n\n        this.activePath.moveTo(\n            (t.a * x) + (t.c * y) + t.tx,\n            (t.b * x) + (t.d * y) + t.ty\n        );\n\n        return this;\n    }\n\n    quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void\n    {\n        this._tick++;\n\n        const t = this._transform;\n\n        this.activePath.quadraticCurveTo(\n            (t.a * cpx) + (t.c * cpy) + t.tx,\n            (t.b * cpx) + (t.d * cpy) + t.ty,\n            (t.a * x) + (t.c * y) + t.tx,\n            (t.b * x) + (t.d * y) + t.ty,\n        );\n    }\n\n    rect(x: number, y: number, w: number, h: number): this\n    {\n        this._tick++;\n\n        this.activePath.rect(x, y, w, h, this._transform.clone());\n\n        return this;\n    }\n\n    roundRect(x: number, y: number, w: number, h: number, radii?: number): this\n    {\n        this._tick++;\n\n        this.activePath.roundRect(x, y, w, h, radii, this._transform.clone());\n\n        return this;\n    }\n\n    poly(points: number[], close?: boolean): this\n    {\n        this._tick++;\n\n        this.activePath.poly(points, close, this._transform.clone());\n\n        return this;\n    }\n\n    star(x: number, y: number, points: number, radius: number, innerRadius: number, rotation: number): this\n    {\n        this._tick++;\n\n        this.activePath.star(x, y, points, radius, innerRadius, rotation, this._transform.clone());\n\n        return this;\n    }\n\n    svg(svg: string): void\n    {\n        this._tick++;\n\n        SVGParser(svg, this);\n    }\n\n    restore(): void\n    {\n        const state = this._stateStack.pop();\n\n        if (state)\n        {\n            this._transform = state.transform;\n            this._fillStyle = state.fillStyle;\n            this._strokeStyle = state.strokeStyle;\n        }\n    }\n\n    save(): void\n    {\n        this._stateStack.push({\n            transform: this._transform.clone(),\n            fillStyle: { ...this._fillStyle },\n            strokeStyle: { ...this._strokeStyle },\n        });\n    }\n\n    getTransform(): Matrix\n    {\n        return this._transform;\n    }\n\n    resetTransform(): this\n    {\n        this._transform.identity();\n\n        return this;\n    }\n\n    rotate(angle: number): this\n    {\n        this._transform.rotate(angle);\n\n        return this;\n    }\n\n    scale(x: number, y: number = x): this\n    {\n        this._transform.scale(x, y);\n\n        return this;\n    }\n\n    setTransform(transform: Matrix): this;\n    setTransform(a: number, b: number, c: number, d: number, dx: number, dy: number): this;\n    setTransform(a: number | Matrix, b?: number, c?: number, d?: number, dx?: number, dy?: number): this\n    {\n        if (a instanceof Matrix)\n        {\n            this._transform.set(a.a, a.b, a.c, a.d, a.tx, a.ty);\n\n            return this;\n        }\n\n        this._transform.set(a, b, c, d, dx, dy);\n\n        return this;\n    }\n\n    transform(transform: Matrix): this;\n    transform(a: number, b: number, c: number, d: number, dx: number, dy: number): this;\n    transform(a: number | Matrix, b?: number, c?: number, d?: number, dx?: number, dy?: number): this\n    {\n        if (a instanceof Matrix)\n        {\n            this._transform.append(a);\n\n            return this;\n        }\n\n        tempMatrix.set(a, b, c, d, dx, dy);\n        this._transform.append(tempMatrix);\n\n        return this;\n    }\n\n    translate(x: number, y: number): this\n    {\n        this._transform.translate(x, y);\n\n        return this;\n    }\n\n    clear(): this\n    {\n        this.instructions.length = 0;\n        this.resetTransform();\n\n        this.onUpdate();\n\n        return this;\n    }\n\n    onUpdate(): void\n    {\n        if (this.dirty) return;\n\n        this.emit('update', this, 0x10);\n        this.dirty = true;\n        this.boundsDirty = true;\n    }\n\n    get bounds(): Bounds\n    {\n        if (!this.boundsDirty) return this._bounds;\n\n        // TODO switch to idy dirty with tick..\n        const bounds = this._bounds;\n\n        bounds.clear();\n\n        for (let i = 0; i < this.instructions.length; i++)\n        {\n            const instruction = this.instructions[i];\n            const action = instruction.action;\n\n            if (action === 'fill')\n            {\n                const data = instruction.data as FillInstruction['data'];\n\n                bounds.addBounds(data.path.bounds);\n            }\n            else if (action === 'texture')\n            {\n                const data = instruction.data as TextureInstruction['data'];\n\n                bounds.pushMatrix(data.transform);\n                bounds.addFrame(data.dx, data.dy, data.dx + data.dw, data.dy + data.dh);\n                bounds.popMatrix();\n            }\n        }\n\n        return bounds;\n    }\n\n    /**\n     * Check to see if a point is contained within this geometry.\n     * @param point - Point to check if it's contained.\n     * @returns {boolean} `true` if the point is contained within geometry.\n     */\n    public containsPoint(point: PointData): boolean\n    {\n        const instructions = this.instructions;\n        let hasHit = false;\n\n        // TODO: we should cache the bounds\n        instructions.forEach((instruction) =>\n        {\n            const data = instruction.data as FillInstruction['data'];\n            const path = data.path;\n\n            if (!instruction.action || !path) return;\n\n            const style = data.style;\n            const shapes = path.shapePath?.shapePrimitives;\n\n            this._forEachShape(shapes, (shape) =>\n            {\n                if (!style || !shape) return;\n\n                if (typeof style !== 'number' && style.matrix)\n                {\n                    style.matrix.applyInverse(point, tmpPoint);\n                }\n                else\n                {\n                    tmpPoint.copyFrom(point);\n                }\n\n                hasHit = shape.contains(tmpPoint.x, tmpPoint.y);\n\n                const holes = data.hole;\n\n                if (!holes) return;\n\n                const holeShapes = holes.shapePath?.shapePrimitives;\n\n                if (!holeShapes) return;\n\n                this._forEachShape(holeShapes, (hole) =>\n                {\n                    if (hole.contains(tmpPoint.x, tmpPoint.y))\n                    {\n                        hasHit = false;\n                    }\n                });\n            });\n        });\n\n        return hasHit;\n    }\n\n    private _forEachShape(shapes: ShapePath['shapePrimitives'] | undefined, callback: (shape: ShapePrimitive) => void)\n    {\n        shapes?.forEach((shapePrimitive) =>\n        {\n            const shape = shapePrimitive?.shape;\n\n            if (shape)\n            {\n                callback(shape);\n            }\n        });\n    }\n\n    /**\n     * Destroys the GraphicsData object.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the fill/stroke style?\n     * @param {boolean} [options.textureSource=false] - Should it destroy the texture source of the fill/stroke style?\n     */\n    public destroy(options: TypeOrBool<TextureDestroyOptions> = false): void\n    {\n        this._stateStack.length = 0;\n        this._transform = null;\n\n        this.emit('destroy', this);\n        this.removeAllListeners();\n\n        const destroyTexture = typeof options === 'boolean' ? options : options?.texture;\n\n        if (destroyTexture)\n        {\n            const destroyTextureSource = typeof options === 'boolean' ? options : options?.textureSource;\n\n            if (this._fillStyle.texture)\n            {\n                this._fillStyle.texture.destroy(destroyTextureSource);\n            }\n\n            if (this._strokeStyle.texture)\n            {\n                this._strokeStyle.texture.destroy(destroyTextureSource);\n            }\n        }\n\n        this._fillStyle = null;\n        this._strokeStyle = null;\n\n        this.instructions = null;\n        this.activePath = null;\n        this._bounds = null;\n        this._stateStack = null;\n        this.transformMatrix = null;\n        this.customShader = null;\n        this._transform = null;\n    }\n}\n\n"],"names":["Point","Matrix","EventEmitter","GraphicsPath","Bounds","convertColorToNumber","Texture","FillPattern","FillGradient","convertFillInputToFillStyle","SVGParser"],"mappings":"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"}