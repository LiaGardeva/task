{"version":3,"file":"GraphicsContextSystem.mjs","sources":["../../../../src/rendering/graphics/shared/GraphicsContextSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { BatchGeometry } from '../../batcher/gpu/BatchGeometry';\nimport { getTextureBatchBindGroup } from '../../batcher/gpu/getTextureBatchBindGroup';\nimport { Batcher } from '../../batcher/shared/Batcher';\nimport { buildContextBatches } from './utils/buildContextBatches';\n\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Batch } from '../../batcher/shared/Batcher';\nimport type { System } from '../../renderers/shared/system/System';\nimport type { BatchableGraphics } from './BatchableGraphics';\nimport type { GraphicsContext } from './GraphicsContext';\n\nexport class GpuGraphicsContext\n{\n    isBatchable: boolean;\n    batches: BatchableGraphics[];\n}\n\nexport class GraphicsContextRenderData\n{\n    geometry = new BatchGeometry();\n    batches: Batch[] = [];\n\n    init()\n    {\n        this.batches.length = 0;\n        this.geometry.reset();\n    }\n}\n\nexport class GraphicsContextSystem implements System\n{\n    /** @ignore */\n    static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'graphicsContext'\n    } as const;\n\n    // the root context batches, used to either make a batch or geometry\n    // all graphics use this as a base\n\n    activeBatchers: Batcher[] = [];\n\n    gpuContextHash: Record<number, GpuGraphicsContext> = {};\n\n    // used for non-batchable graphics\n    graphicsDataContextHash: Record<number, GraphicsContextRenderData> = {};\n\n    private _needsContextNeedsRebuild: GraphicsContext[] = [];\n\n    prerender()\n    {\n        this.returnActiveBatchers();\n    }\n\n    getContextRenderData(context: GraphicsContext): GraphicsContextRenderData\n    {\n        return this.graphicsDataContextHash[context.uid] || this.initContextRenderData(context);\n    }\n\n    // Context management functions\n    updateGpuContext(context: GraphicsContext)\n    {\n        let gpuContext: GpuGraphicsContext = this.gpuContextHash[context.uid]\n\n        || this.initContext(context);\n\n        if (context.dirty)\n        {\n            if (gpuContext)\n            {\n                this.cleanGraphicsContextData(context);\n            }\n            else\n            {\n                gpuContext = this.initContext(context);\n            }\n\n            const contextBatches = buildContextBatches(context);\n\n            let size = 0;\n\n            const batchMode = context.batchMode;\n\n            let isBatchable = true;\n            // check the size...\n\n            if (batchMode === 'auto')\n            {\n                for (let i = 0; i < contextBatches.length; i++)\n                {\n                    size += contextBatches[i].vertexSize;\n\n                    if (size > 100)\n                    {\n                        isBatchable = false;\n                        break;\n                    }\n                }\n            }\n            else if (batchMode === 'no-batch')\n            {\n                isBatchable = false;\n            }\n\n            gpuContext = this.gpuContextHash[context.uid] = {\n                isBatchable,\n                batches: contextBatches,\n            };\n\n            context.dirty = false;\n        }\n\n        return gpuContext;\n    }\n\n    getGpuContext(context: GraphicsContext): GpuGraphicsContext\n    {\n        return this.gpuContextHash[context.uid] || this.initContext(context);\n    }\n\n    private returnActiveBatchers()\n    {\n        for (let i = 0; i < this.activeBatchers.length; i++)\n        {\n            BigPool.return(this.activeBatchers[i] as PoolItem);\n        }\n\n        this.activeBatchers.length = 0;\n    }\n\n    private initContextRenderData(context: GraphicsContext): GraphicsContextRenderData\n    {\n        const graphicsData: GraphicsContextRenderData = BigPool.get(GraphicsContextRenderData);// ();\n\n        const batches = this.gpuContextHash[context.uid].batches;\n\n        let vertexSize = 0;\n        let indexSize = 0;\n\n        batches.forEach((batch) =>\n        {\n            batch.applyTransform = false;\n            vertexSize += batch.geometryData.vertices.length;\n            indexSize += batch.geometryData.indices.length;\n        });\n\n        const batcher = BigPool.get(Batcher);\n\n        this.activeBatchers.push(batcher);\n\n        batcher.ensureAttributeBuffer(vertexSize);\n        batcher.ensureIndexBuffer(indexSize);\n\n        batcher.begin();\n\n        for (let i = 0; i < batches.length; i++)\n        {\n            const batch = batches[i];\n\n            batcher.add(batch);\n        }\n\n        batcher.finish();\n\n        const geometry = graphicsData.geometry;\n\n        geometry.indexBuffer.data = batcher.indexBuffer;\n\n        // not to self - this works as we are assigning the batchers array buffer\n        // once its up loaded - this buffer is then put back in the pool to be reused.\n        // this mean we don't have to creating new Batchers for each graphics items\n        geometry.buffers[0].data = batcher.attributeBuffer.float32View;\n\n        geometry.indexBuffer.update(batcher.indexSize * 4);\n        geometry.buffers[0].update(batcher.attributeSize * 4);\n\n        const drawBatches = batcher.batches;\n\n        for (let i = 0; i < drawBatches.length; i++)\n        {\n            const batch = drawBatches[i];\n\n            batch.textures.bindGroup = getTextureBatchBindGroup(batch.textures.textures);\n        }\n\n        this.graphicsDataContextHash[context.uid] = graphicsData;\n\n        graphicsData.batches = drawBatches;\n\n        return graphicsData;\n    }\n\n    private initContext(context: GraphicsContext): GpuGraphicsContext\n    {\n        const gpuContext = new GpuGraphicsContext();\n\n        this.gpuContextHash[context.uid] = gpuContext;\n\n        context.on('update', this.onGraphicsContextUpdate, this);\n        context.on('destroy', this.onGraphicsContextDestroy, this);\n\n        return this.gpuContextHash[context.uid];\n    }\n\n    protected onGraphicsContextUpdate(context: GraphicsContext)\n    {\n        this._needsContextNeedsRebuild.push(context);\n    }\n\n    protected onGraphicsContextDestroy(context: GraphicsContext)\n    {\n        this.cleanGraphicsContextData(context);\n        this.gpuContextHash[context.uid] = null;\n    }\n\n    private cleanGraphicsContextData(context: GraphicsContext)\n    {\n        const gpuContext: GpuGraphicsContext = this.gpuContextHash[context.uid];\n\n        if (!gpuContext.isBatchable)\n        {\n            if (this.graphicsDataContextHash[context.uid])\n            {\n                BigPool.return(this.getContextRenderData(context) as PoolItem);\n\n                // we will rebuild this...\n                this.graphicsDataContextHash[context.uid] = null;\n            }\n        }\n\n        if (gpuContext.batches)\n        {\n            gpuContext.batches.forEach((batch) =>\n            {\n                BigPool.return(batch as PoolItem);\n            });\n        }\n    }\n\n    destroy()\n    {\n        // boom!\n    }\n}\n"],"names":[],"mappings":"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"}