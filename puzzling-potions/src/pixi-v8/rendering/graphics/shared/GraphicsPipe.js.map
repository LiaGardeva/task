{"version":3,"file":"GraphicsPipe.js","sources":["../../../../src/rendering/graphics/shared/GraphicsPipe.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { State } from '../../renderers/shared/state/State';\nimport { BatchableGraphics } from './BatchableGraphics';\n\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Instruction } from '../../renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { BatchPipe, RenderPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../renderers/shared/Renderable';\nimport type { Shader } from '../../renderers/shared/shader/Shader';\nimport type { GpuGraphicsContext, GraphicsContextSystem } from './GraphicsContextSystem';\nimport type { GraphicsView } from './GraphicsView';\n\nexport interface GraphicsAdaptor\n{\n    init(): void;\n    execute(graphicsPipe: GraphicsPipe, renderable: Renderable<GraphicsView>): void;\n    destroy(): void;\n}\n\nexport interface GraphicsInstruction extends Instruction\n{\n    type: 'graphics';\n    renderable: Renderable<GraphicsView>;\n}\n\nexport interface GraphicsSystem\n{\n    graphicsContext: GraphicsContextSystem;\n    renderPipes: {\n        batch: BatchPipe\n    }\n}\n\nexport class GraphicsPipe implements RenderPipe<GraphicsView>\n{\n    /** @ignore */\n    static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'graphics',\n    } as const;\n\n    renderer: GraphicsSystem;\n    shader: Shader;\n    state: State = State.for2d();\n\n    // batchable graphics list, used to render batches\n    private renderableBatchesHash: Record<number, BatchableGraphics[]> = {};\n    private adaptor: GraphicsAdaptor;\n\n    constructor(renderer: GraphicsSystem, adaptor: GraphicsAdaptor)\n    {\n        this.renderer = renderer;\n\n        this.adaptor = adaptor;\n        this.adaptor.init();\n    }\n\n    validateRenderable(renderable: Renderable<GraphicsView>): boolean\n    {\n        // assume context is dirty..\n\n        const context = renderable.view.context;\n\n        const wasBatched = !!this.renderableBatchesHash[renderable.uid];\n\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n\n        if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable)\n        {\n            // TODO what if they are the same size??\n            return true;\n        }\n\n        return false;\n    }\n\n    addRenderable(renderable: Renderable<GraphicsView>, instructionSet: InstructionSet)\n    {\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(renderable.view.context);\n\n        // need to get batches here.. as we need to know if we can batch or not..\n        // this also overrides the current batches..\n\n        if (renderable.view.didUpdate)\n        {\n            renderable.view.didUpdate = false;\n\n            this.rebuild(renderable);\n        }\n\n        if (gpuContext.isBatchable)\n        {\n            this.addToBatcher(renderable, instructionSet);\n        }\n        else\n        {\n            this.renderer.renderPipes.batch.break(instructionSet);\n            instructionSet.add({\n                type: 'graphics',\n                renderable\n            } as GraphicsInstruction);\n        }\n    }\n\n    updateRenderable(renderable: Renderable<GraphicsView>)\n    {\n        const batches = this.renderableBatchesHash[renderable.uid];\n\n        if (batches)\n        {\n            for (let i = 0; i < batches.length; i++)\n            {\n                const batch = batches[i];\n\n                batch.batcher.updateElement(batch);\n            }\n        }\n    }\n\n    execute({ renderable }: GraphicsInstruction)\n    {\n        if (!renderable.isRenderable) return;\n\n        this.adaptor.execute(this, renderable);\n    }\n\n    rebuild(renderable: Renderable<GraphicsView>)\n    {\n        const wasBatched = !!this.renderableBatchesHash[renderable.uid];\n\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(renderable.view.context);\n\n        // TODO POOL the old batches!\n\n        if (wasBatched)\n        {\n            this.removeBatchForRenderable(renderable.uid);\n        }\n\n        if (gpuContext.isBatchable)\n        {\n            this.initBatchesForRenderable(renderable);\n        }\n\n        renderable.view.batched = gpuContext.isBatchable;\n    }\n\n    // Batchable graphics functions\n\n    private addToBatcher(renderable: Renderable<GraphicsView>, instructionSet: InstructionSet)\n    {\n        const batchPipe = this.renderer.renderPipes.batch;\n\n        const batches = this.getBatchesForRenderable(renderable);\n\n        for (let i = 0; i < batches.length; i++)\n        {\n            const batch = batches[i];\n\n            batchPipe.addToBatch(batch, instructionSet);\n        }\n    }\n\n    private getBatchesForRenderable(renderable: Renderable<GraphicsView>): BatchableGraphics[]\n    {\n        return this.renderableBatchesHash[renderable.uid] || this.initBatchesForRenderable(renderable);\n    }\n\n    private initBatchesForRenderable(renderable: Renderable<GraphicsView>): BatchableGraphics[]\n    {\n        const context = renderable.view.context;\n\n        const gpuContext: GpuGraphicsContext = this.renderer.graphicsContext.getGpuContext(context);\n\n        const batches = gpuContext.batches.map((batch) =>\n        {\n            // TODO pool this!!\n            const batchClone = BigPool.get(BatchableGraphics);\n\n            batch.copyTo(batchClone);\n\n            batchClone.renderable = renderable;\n\n            return batchClone;\n        });\n\n        this.renderableBatchesHash[renderable.uid] = batches;\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        renderable.on('destroyed', () =>\n        {\n            this.destroyRenderable(renderable);\n        });\n\n        return batches;\n    }\n\n    destroyRenderable(renderable: Renderable<GraphicsView>)\n    {\n        this.removeBatchForRenderable(renderable.uid);\n    }\n\n    private removeBatchForRenderable(renderableUid: number)\n    {\n        this.renderableBatchesHash[renderableUid].forEach((batch) =>\n        {\n            BigPool.return(batch as PoolItem);\n        });\n\n        this.renderableBatchesHash[renderableUid] = null;\n    }\n\n    destroy()\n    {\n        this.renderer = null;\n        this.shader.destroy();\n        this.shader = null;\n\n        this.adaptor.destroy();\n        this.adaptor = null;\n        this.state = null;\n\n        for (const i in this.renderableBatchesHash)\n        {\n            this.removeBatchForRenderable(i as unknown as number);\n        }\n\n        this.renderableBatchesHash = null;\n    }\n}\n"],"names":["State","BigPool","BatchableGraphics","ExtensionType"],"mappings":";;;;;;;;;AAmCO,MAAM,YACb,CAAA;AAAA,EAmBI,WAAA,CAAY,UAA0B,OACtC,EAAA;AAPA,IAAA,IAAA,CAAA,KAAA,GAAeA,YAAM,KAAM,EAAA,CAAA;AAG3B;AAAA,IAAA,IAAA,CAAQ,wBAA6D,EAAC,CAAA;AAKlE,IAAA,IAAA,CAAK,QAAW,GAAA,QAAA,CAAA;AAEhB,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA,CAAA;AACf,IAAA,IAAA,CAAK,QAAQ,IAAK,EAAA,CAAA;AAAA,GACtB;AAAA,EAEA,mBAAmB,UACnB,EAAA;AAGI,IAAM,MAAA,OAAA,GAAU,WAAW,IAAK,CAAA,OAAA,CAAA;AAEhC,IAAA,MAAM,aAAa,CAAC,CAAC,IAAK,CAAA,qBAAA,CAAsB,WAAW,GAAG,CAAA,CAAA;AAE9D,IAAA,MAAM,UAAa,GAAA,IAAA,CAAK,QAAS,CAAA,eAAA,CAAgB,iBAAiB,OAAO,CAAA,CAAA;AAEzE,IAAA,IAAI,UAAW,CAAA,WAAA,IAAe,UAAe,KAAA,UAAA,CAAW,WACxD,EAAA;AAEI,MAAO,OAAA,IAAA,CAAA;AAAA,KACX;AAEA,IAAO,OAAA,KAAA,CAAA;AAAA,GACX;AAAA,EAEA,aAAA,CAAc,YAAsC,cACpD,EAAA;AACI,IAAA,MAAM,aAAa,IAAK,CAAA,QAAA,CAAS,gBAAgB,gBAAiB,CAAA,UAAA,CAAW,KAAK,OAAO,CAAA,CAAA;AAKzF,IAAI,IAAA,UAAA,CAAW,KAAK,SACpB,EAAA;AACI,MAAA,UAAA,CAAW,KAAK,SAAY,GAAA,KAAA,CAAA;AAE5B,MAAA,IAAA,CAAK,QAAQ,UAAU,CAAA,CAAA;AAAA,KAC3B;AAEA,IAAA,IAAI,WAAW,WACf,EAAA;AACI,MAAK,IAAA,CAAA,YAAA,CAAa,YAAY,cAAc,CAAA,CAAA;AAAA,KAGhD,MAAA;AACI,MAAA,IAAA,CAAK,QAAS,CAAA,WAAA,CAAY,KAAM,CAAA,KAAA,CAAM,cAAc,CAAA,CAAA;AACpD,MAAA,cAAA,CAAe,GAAI,CAAA;AAAA,QACf,IAAM,EAAA,UAAA;AAAA,QACN,UAAA;AAAA,OACoB,CAAA,CAAA;AAAA,KAC5B;AAAA,GACJ;AAAA,EAEA,iBAAiB,UACjB,EAAA;AACI,IAAA,MAAM,OAAU,GAAA,IAAA,CAAK,qBAAsB,CAAA,UAAA,CAAW,GAAG,CAAA,CAAA;AAEzD,IAAA,IAAI,OACJ,EAAA;AACI,MAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,OAAA,CAAQ,QAAQ,CACpC,EAAA,EAAA;AACI,QAAM,MAAA,KAAA,GAAQ,QAAQ,CAAC,CAAA,CAAA;AAEvB,QAAM,KAAA,CAAA,OAAA,CAAQ,cAAc,KAAK,CAAA,CAAA;AAAA,OACrC;AAAA,KACJ;AAAA,GACJ;AAAA,EAEA,OAAA,CAAQ,EAAE,UAAA,EACV,EAAA;AACI,IAAA,IAAI,CAAC,UAAW,CAAA,YAAA;AAAc,MAAA,OAAA;AAE9B,IAAK,IAAA,CAAA,OAAA,CAAQ,OAAQ,CAAA,IAAA,EAAM,UAAU,CAAA,CAAA;AAAA,GACzC;AAAA,EAEA,QAAQ,UACR,EAAA;AACI,IAAA,MAAM,aAAa,CAAC,CAAC,IAAK,CAAA,qBAAA,CAAsB,WAAW,GAAG,CAAA,CAAA;AAE9D,IAAA,MAAM,aAAa,IAAK,CAAA,QAAA,CAAS,gBAAgB,gBAAiB,CAAA,UAAA,CAAW,KAAK,OAAO,CAAA,CAAA;AAIzF,IAAA,IAAI,UACJ,EAAA;AACI,MAAK,IAAA,CAAA,wBAAA,CAAyB,WAAW,GAAG,CAAA,CAAA;AAAA,KAChD;AAEA,IAAA,IAAI,WAAW,WACf,EAAA;AACI,MAAA,IAAA,CAAK,yBAAyB,UAAU,CAAA,CAAA;AAAA,KAC5C;AAEA,IAAW,UAAA,CAAA,IAAA,CAAK,UAAU,UAAW,CAAA,WAAA,CAAA;AAAA,GACzC;AAAA;AAAA,EAIQ,YAAA,CAAa,YAAsC,cAC3D,EAAA;AACI,IAAM,MAAA,SAAA,GAAY,IAAK,CAAA,QAAA,CAAS,WAAY,CAAA,KAAA,CAAA;AAE5C,IAAM,MAAA,OAAA,GAAU,IAAK,CAAA,uBAAA,CAAwB,UAAU,CAAA,CAAA;AAEvD,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,OAAA,CAAQ,QAAQ,CACpC,EAAA,EAAA;AACI,MAAM,MAAA,KAAA,GAAQ,QAAQ,CAAC,CAAA,CAAA;AAEvB,MAAU,SAAA,CAAA,UAAA,CAAW,OAAO,cAAc,CAAA,CAAA;AAAA,KAC9C;AAAA,GACJ;AAAA,EAEQ,wBAAwB,UAChC,EAAA;AACI,IAAA,OAAO,KAAK,qBAAsB,CAAA,UAAA,CAAW,GAAG,CAAK,IAAA,IAAA,CAAK,yBAAyB,UAAU,CAAA,CAAA;AAAA,GACjG;AAAA,EAEQ,yBAAyB,UACjC,EAAA;AACI,IAAM,MAAA,OAAA,GAAU,WAAW,IAAK,CAAA,OAAA,CAAA;AAEhC,IAAA,MAAM,UAAiC,GAAA,IAAA,CAAK,QAAS,CAAA,eAAA,CAAgB,cAAc,OAAO,CAAA,CAAA;AAE1F,IAAA,MAAM,OAAU,GAAA,UAAA,CAAW,OAAQ,CAAA,GAAA,CAAI,CAAC,KACxC,KAAA;AAEI,MAAM,MAAA,UAAA,GAAaC,iBAAQ,CAAA,GAAA,CAAIC,mCAAiB,CAAA,CAAA;AAEhD,MAAA,KAAA,CAAM,OAAO,UAAU,CAAA,CAAA;AAEvB,MAAA,UAAA,CAAW,UAAa,GAAA,UAAA,CAAA;AAExB,MAAO,OAAA,UAAA,CAAA;AAAA,KACV,CAAA,CAAA;AAED,IAAK,IAAA,CAAA,qBAAA,CAAsB,UAAW,CAAA,GAAG,CAAI,GAAA,OAAA,CAAA;AAG7C,IAAW,UAAA,CAAA,EAAA,CAAG,aAAa,MAC3B;AACI,MAAA,IAAA,CAAK,kBAAkB,UAAU,CAAA,CAAA;AAAA,KACpC,CAAA,CAAA;AAED,IAAO,OAAA,OAAA,CAAA;AAAA,GACX;AAAA,EAEA,kBAAkB,UAClB,EAAA;AACI,IAAK,IAAA,CAAA,wBAAA,CAAyB,WAAW,GAAG,CAAA,CAAA;AAAA,GAChD;AAAA,EAEQ,yBAAyB,aACjC,EAAA;AACI,IAAA,IAAA,CAAK,qBAAsB,CAAA,aAAa,CAAE,CAAA,OAAA,CAAQ,CAAC,KACnD,KAAA;AACI,MAAAD,iBAAA,CAAQ,OAAO,KAAiB,CAAA,CAAA;AAAA,KACnC,CAAA,CAAA;AAED,IAAK,IAAA,CAAA,qBAAA,CAAsB,aAAa,CAAI,GAAA,IAAA,CAAA;AAAA,GAChD;AAAA,EAEA,OACA,GAAA;AACI,IAAA,IAAA,CAAK,QAAW,GAAA,IAAA,CAAA;AAChB,IAAA,IAAA,CAAK,OAAO,OAAQ,EAAA,CAAA;AACpB,IAAA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;AAEd,IAAA,IAAA,CAAK,QAAQ,OAAQ,EAAA,CAAA;AACrB,IAAA,IAAA,CAAK,OAAU,GAAA,IAAA,CAAA;AACf,IAAA,IAAA,CAAK,KAAQ,GAAA,IAAA,CAAA;AAEb,IAAW,KAAA,MAAA,CAAA,IAAK,KAAK,qBACrB,EAAA;AACI,MAAA,IAAA,CAAK,yBAAyB,CAAsB,CAAA,CAAA;AAAA,KACxD;AAEA,IAAA,IAAA,CAAK,qBAAwB,GAAA,IAAA,CAAA;AAAA,GACjC;AACJ,CAAA;AAAA;AAxMa,YAAA,CAGF,SAAY,GAAA;AAAA,EACf,IAAM,EAAA;AAAA,IACFE,wBAAc,CAAA,UAAA;AAAA,IACdA,wBAAc,CAAA,WAAA;AAAA,IACdA,wBAAc,CAAA,WAAA;AAAA,GAClB;AAAA,EACA,IAAM,EAAA,UAAA;AACV,CAAA;;;;"}