{"version":3,"file":"FillGradient.js","sources":["../../../../../src/rendering/graphics/shared/fill/FillGradient.ts"],"sourcesContent":["import { Matrix } from '../../../../maths/Matrix';\nimport { settings } from '../../../../settings/settings';\nimport { convertNumberToHex } from '../../../../utils/color/convertNumberToHex';\nimport { ImageSource } from '../../../renderers/shared/texture/sources/ImageSource';\nimport { Texture } from '../../../renderers/shared/texture/Texture';\n\nexport type GradientType = 'linear' | 'radial';\n\n// export type GradientSource =\n//     string // CSS gradient string: 'linear-gradient(...)'\n//     | IGradientOptions // Gradient options: { x0, y0, x1, y1, ...}\n//     | Gradient; // class Gradient itself\n\nexport interface LinearGradientFillStyle\n{\n    x0: number;\n    y0: number;\n    x1: number;\n    y1: number;\n    colors: number[];\n    stops: number[];\n}\n\nlet UID = 0;\n\nexport class FillGradient implements CanvasGradient\n{\n    static defaultTextureSize = 256;\n\n    readonly uid = UID++;\n    readonly type: GradientType = 'linear';\n\n    x0: number;\n    y0: number;\n    x1: number;\n    y1: number;\n\n    texture: Texture;\n    transform: Matrix;\n    gradientStops: Array<{ offset: number, color: string }> = [];\n\n    constructor(x0: number, y0: number, x1: number, y1: number)\n    {\n        this.x0 = x0;\n        this.y0 = y0;\n\n        this.x1 = x1;\n        this.y1 = y1;\n    }\n\n    addColorStop(offset: number, color: number | string): this\n    {\n        color = convertNumberToHex(color);\n\n        this.gradientStops.push({ offset, color });\n\n        return this;\n    }\n\n    // TODO move to the system!\n    buildLinearGradient(): void\n    {\n        const defaultSize = FillGradient.defaultTextureSize;\n\n        const { gradientStops } = this;\n\n        const canvas = settings.ADAPTER.createCanvas();\n\n        canvas.width = defaultSize;\n        canvas.height = defaultSize;\n\n        const ctx = canvas.getContext('2d');\n\n        const gradient = ctx.createLinearGradient(0, 0, FillGradient.defaultTextureSize, 1);\n\n        for (let i = 0; i < gradientStops.length; i++)\n        {\n            const stop = gradientStops[i];\n\n            gradient.addColorStop(stop.offset, stop.color);\n        }\n\n        ctx.fillStyle = gradient;\n        ctx.fillRect(0, 0, defaultSize, defaultSize);\n\n        this.texture = new Texture({\n            source: new ImageSource({\n                resource: canvas\n            }),\n            style: {\n                addressModeU: 'clamp-to-edge',\n                addressModeV: 'repeat',\n            }\n        });\n\n        // generate some UVS based on the gradient direction sent\n\n        const { x0, y0, x1, y1 } = this;\n\n        const m = new Matrix();\n\n        // get angle\n        const dx = x1 - x0;\n        const dy = y1 - y0;\n\n        const dist = Math.sqrt((dx * dx) + (dy * dy));\n\n        const angle = Math.atan2(dy, dx);\n\n        m.translate(-x0, -y0);\n        m.scale(1 / defaultSize, 1 / defaultSize);\n        m.rotate(-angle);\n        m.scale(256 / dist, 1);\n\n        this.transform = m;\n    }\n}\n"],"names":["convertNumberToHex","settings","Texture","ImageSource","Matrix"],"mappings":"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"}