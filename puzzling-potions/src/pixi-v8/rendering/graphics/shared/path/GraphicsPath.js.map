{"version":3,"file":"GraphicsPath.js","sources":["../../../../../src/rendering/graphics/shared/path/GraphicsPath.ts"],"sourcesContent":["import { Point } from '../../../../maths/Point';\nimport { SVGToGraphicsPath } from '../svg/SVGToGraphicsPath';\nimport { ShapePath } from './ShapePath';\n\nimport type { Matrix } from '../../../../maths/Matrix';\nimport type { Bounds } from '../../../scene/bounds/Bounds';\n\nlet UID = 0;\n\nexport interface PathInstruction\n{\n    action: 'moveTo' | 'lineTo' | 'quadraticCurveTo' |\n    'bezierCurveTo' | 'arc' | 'closePath' |\n    'addPath' | 'arcTo' | 'ellipse' |\n    'rect' | 'roundRect' | 'arcToSvg' |\n    'poly' | 'circle';\n    data: any[];\n}\n\nexport class GraphicsPath\n{\n    instructions: PathInstruction[] = [];\n\n    uid = UID++;\n\n    dirty = true;\n\n    // needed for hit testing and bounds calculations\n    _shapePath: ShapePath;\n\n    get shapePath(): ShapePath\n    {\n        if (!this._shapePath)\n        {\n            this._shapePath = new ShapePath(this);\n        }\n\n        if (this.dirty)\n        {\n            this.dirty = false;\n            this._shapePath.buildPath();\n        }\n\n        return this._shapePath;\n    }\n\n    constructor(instructions?: string | PathInstruction[])\n    {\n        if (typeof instructions === 'string')\n        {\n            SVGToGraphicsPath(instructions, this);\n        }\n        else\n        {\n            this.instructions = instructions?.slice() ?? [];\n        }\n    }\n\n    addPath(path: GraphicsPath, transform?: Matrix): this\n    {\n        path = path.clone();\n        this.instructions.push({ action: 'addPath', data: [path, transform] });\n\n        this.dirty = true;\n\n        return this;\n    }\n    arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise?: boolean): this;\n    arc(...args: [number, number, number, number, number, boolean]): this\n    {\n        this.instructions.push({ action: 'arc', data: args });\n\n        this.dirty = true;\n\n        return this;\n    }\n    arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): this;\n    arcTo(...args: [number, number, number, number, number]): this\n    {\n        this.instructions.push({ action: 'arcTo', data: args });\n\n        this.dirty = true;\n\n        return this;\n    }\n\n    // eslint-disable-next-line max-len\n    arcToSvg(rx: number, ry: number, xAxisRotation: number, largeArcFlag: number, sweepFlag: number, x: number, y: number): this;\n    arcToSvg(...args: [number, number, number, number, number, number, number]): this\n    {\n        this.instructions.push({ action: 'arcToSvg', data: args });\n\n        this.dirty = true;\n\n        return this;\n    }\n\n    bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): this;\n    bezierCurveTo(...args: [number, number, number, number, number, number]): this\n    {\n        this.instructions.push({ action: 'bezierCurveTo', data: args });\n\n        this.dirty = true;\n\n        return this;\n    }\n    bezierCurveToShort(cp2x: number, cp2y: number, x: number, y: number): this\n    {\n        const last = this.instructions[this.instructions.length - 1];\n\n        const lastPoint = this.getLastPoint(Point.shared);\n\n        let cp1x = 0;\n        let cp1y = 0;\n\n        if (!last || last.action !== 'bezierCurveTo')\n        {\n            cp1x = lastPoint.x;\n            cp1y = lastPoint.y;\n        }\n        else\n        {\n            cp1x = last.data[2];\n            cp1y = last.data[3];\n\n            const currentX = lastPoint.x;\n            const currentY = lastPoint.y;\n\n            cp1x = currentX + (currentX - cp1x);\n            cp1y = currentY + (currentY - cp1y);\n        }\n\n        this.instructions.push({ action: 'bezierCurveTo', data: [cp1x, cp1y, cp2x, cp2y, x, y] });\n\n        this.dirty = true;\n\n        return this;\n    }\n    closePath(): this\n    {\n        this.instructions.push({ action: 'closePath', data: [] });\n\n        this.dirty = true;\n\n        return this;\n    }\n    ellipse(x: number, y: number, radiusX: number, radiusY: number, matrix?: Matrix): this;\n    ellipse(...args: [number, number, number, number, Matrix]): this\n    {\n        this.instructions.push({ action: 'ellipse', data: args });\n\n        // TODO nail this!\n\n        this.dirty = true;\n\n        return this;\n    }\n    lineTo(x: number, y: number): this;\n    lineTo(...args: [number, number]): this\n    {\n        this.instructions.push({ action: 'lineTo', data: args });\n\n        this.dirty = true;\n\n        return this;\n    }\n    moveTo(x: number, y: number): this;\n    moveTo(...args: [number, number]): this\n    {\n        this.instructions.push({ action: 'moveTo', data: args });\n\n        return this;\n    }\n    quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): this;\n    quadraticCurveTo(...args: [number, number, number, number]): this\n    {\n        this.instructions.push({ action: 'quadraticCurveTo', data: args });\n\n        this.dirty = true;\n\n        return this;\n    }\n    quadraticCurveToShort(x: number, y: number): this\n    {\n        // check if we have a previous quadraticCurveTo\n        const last = this.instructions[this.instructions.length - 1];\n\n        const lastPoint = this.getLastPoint(Point.shared);\n\n        let cpx1 = 0;\n        let cpy1 = 0;\n\n        if (!last || last.action !== 'quadraticCurveTo')\n        {\n            cpx1 = lastPoint.x;\n            cpy1 = lastPoint.y;\n        }\n        else\n        {\n            cpx1 = last.data[0];\n            cpy1 = last.data[1];\n\n            const currentX = lastPoint.x;\n            const currentY = lastPoint.y;\n\n            cpx1 = currentX + (currentX - cpx1);\n            cpy1 = currentY + (currentY - cpy1);\n        }\n\n        this.instructions.push({ action: 'quadraticCurveTo', data: [cpx1, cpy1, x, y] });\n\n        this.dirty = true;\n\n        return this;\n    }\n    rect(x: number, y: number, w: number, h: number, transform?: Matrix): this\n    {\n        this.instructions.push({ action: 'rect', data: [x, y, w, h, transform] });\n\n        this.dirty = true;\n\n        return this;\n    }\n    circle(x: number, y: number, radius: number, transform?: Matrix): this\n    {\n        this.instructions.push({ action: 'circle', data: [x, y, radius, transform] });\n\n        this.dirty = true;\n\n        return this;\n    }\n    roundRect(x: number, y: number, w: number, h: number, radii?: number, transform?: Matrix): this;\n    roundRect(...args: [number, number, number, number, number, Matrix?]): this\n    {\n        this.instructions.push({ action: 'roundRect', data: args });\n\n        this.dirty = true;\n\n        return this;\n    }\n\n    poly(points: number[], close?: boolean, transform?: Matrix): this;\n    poly(...args: [number[], boolean, Matrix?]): this\n    {\n        this.instructions.push({ action: 'poly', data: args });\n\n        this.dirty = true;\n\n        return this;\n    }\n\n    star(x: number, y: number, points: number, radius: number, innerRadius?: number, rotation = 0, transform?: Matrix): this\n    {\n        innerRadius = innerRadius || radius / 2;\n\n        const startAngle = (-1 * Math.PI / 2) + rotation;\n        const len = points * 2;\n        const delta = (Math.PI * 2) / len;\n        const polygon = [];\n\n        for (let i = 0; i < len; i++)\n        {\n            const r = i % 2 ? innerRadius : radius;\n            const angle = (i * delta) + startAngle;\n\n            polygon.push(\n                x + (r * Math.cos(angle)),\n                y + (r * Math.sin(angle))\n            );\n        }\n\n        this.poly(polygon, true, transform);\n\n        return this;\n    }\n\n    clone(deep = false): GraphicsPath\n    {\n        const newGraphicsPath2D = new GraphicsPath();\n\n        if (!deep)\n        {\n            newGraphicsPath2D.instructions = this.instructions.slice();\n        }\n        else\n        {\n            for (let i = 0; i < this.instructions.length; i++)\n            {\n                const instruction = this.instructions[i];\n\n                newGraphicsPath2D.instructions.push({ action: instruction.action, data: instruction.data.slice() });\n            }\n        }\n\n        return newGraphicsPath2D;\n    }\n\n    getLastPoint(out: Point): Point\n    {\n        let index = this.instructions.length - 1;\n\n        let lastInstruction = this.instructions[index];\n\n        if (!lastInstruction)\n        {\n            out.x = 0;\n            out.y = 0;\n\n            return out;\n        }\n\n        while (lastInstruction.action === 'closePath')\n        {\n            index--;\n\n            if (index < 0)\n            {\n                out.x = 0;\n                out.y = 0;\n\n                return out;\n            }\n\n            lastInstruction = this.instructions[index];\n        }\n\n        let x: number;\n        let y: number;\n        let transform: Matrix;\n\n        switch (lastInstruction.action)\n        {\n            case 'moveTo':\n            case 'lineTo':\n                out.x = lastInstruction.data[0];\n                out.y = lastInstruction.data[1];\n                break;\n            case 'quadraticCurveTo':\n                out.x = lastInstruction.data[2];\n                out.y = lastInstruction.data[3];\n                break;\n            case 'bezierCurveTo':\n                out.x = lastInstruction.data[4];\n                out.y = lastInstruction.data[5];\n                break;\n            case 'arc':\n            case 'arcToSvg':\n                out.x = lastInstruction.data[5];\n                out.y = lastInstruction.data[6];\n                break;\n            case 'addPath':\n                // TODO prolly should transform the last point of the path\n                out.x = lastInstruction.data[0].lastX;\n                out.y = lastInstruction.data[2].lastY;\n                break;\n            case 'rect':\n                // TODO transform...\n\n                transform = lastInstruction.data[4];\n                x = lastInstruction.data[0];\n                y = lastInstruction.data[1];\n\n                if (transform)\n                {\n                    const { a, b, c, d, tx, ty } = transform;\n\n                    out.x = (a * x) + (c * y) + tx;\n                    out.y = (b * x) + (d * y) + ty;\n                }\n                else\n                {\n                    out.x = x;\n                    out.y = y;\n                }\n\n                break;\n            default:\n                console.warn(`${lastInstruction.action} is not supported yet`);\n                break;\n        }\n\n        return out;\n    }\n\n    clear(): this\n    {\n        this.instructions.length = 0;\n        this.dirty = true;\n\n        return this;\n    }\n\n    transform(matrix: Matrix): this\n    {\n        if (matrix.isIdentity()) return this;\n\n        const a = matrix.a;\n        const b = matrix.b;\n        const c = matrix.c;\n        const d = matrix.d;\n        const tx = matrix.tx;\n        const ty = matrix.ty;\n\n        let x = 0;\n        let y = 0;\n\n        let cpx1 = 0;\n        let cpy1 = 0;\n        let cpx2 = 0;\n        let cpy2 = 0;\n\n        let rx = 0;\n        let ry = 0;\n\n        for (let i = 0; i < this.instructions.length; i++)\n        {\n            const instruction = this.instructions[i];\n            const data = instruction.data as any[];\n\n            switch (instruction.action)\n            {\n                case 'moveTo':\n                case 'lineTo':\n\n                    x = data[0];\n                    y = data[1];\n\n                    data[0] = (a * x) + (c * y) + tx;\n                    data[1] = (b * x) + (d * y) + ty;\n                    break;\n                case 'bezierCurveTo':\n\n                    cpx1 = data[0];\n                    cpy1 = data[1];\n                    cpx2 = data[2];\n                    cpy2 = data[3];\n\n                    x = data[4];\n                    y = data[5];\n\n                    data[0] = (a * cpx1) + (c * cpy1) + tx;\n                    data[1] = (b * cpx1) + (d * cpy1) + ty;\n                    data[2] = (a * cpx2) + (c * cpy2) + tx;\n                    data[3] = (b * cpx2) + (d * cpy2) + ty;\n                    data[4] = (a * x) + (c * y) + tx;\n                    data[5] = (b * x) + (d * y) + ty;\n                    break;\n\n                case 'quadraticCurveTo':\n\n                    cpx1 = data[0];\n                    cpy1 = data[1];\n\n                    x = data[2];\n                    y = data[3];\n\n                    data[0] = (a * cpx1) + (c * cpy1) + tx;\n                    data[1] = (b * cpx1) + (d * cpy1) + ty;\n\n                    data[2] = (a * x) + (c * y) + tx;\n                    data[3] = (b * x) + (d * y) + ty;\n\n                    break;\n\n                case 'arcToSvg':\n\n                    x = data[5];\n                    y = data[6];\n\n                    rx = data[0];\n                    ry = data[1];\n\n                    // multiply the radius by the transform..\n\n                    data[0] = (a * rx) + (c * ry);\n                    data[1] = (b * rx) + (d * ry);\n\n                    data[5] = (a * x) + (c * y) + tx;\n                    data[6] = (b * x) + (d * y) + ty;\n\n                    break;\n\n                case 'rect':\n\n                    data[4] = adjustTransform(data[4], matrix);\n                    break;\n                case 'ellipse':\n                    data[8] = adjustTransform(data[8], matrix);\n                    break;\n                case 'roundRect':\n                    data[5] = adjustTransform(data[5], matrix);\n                    break;\n\n                case 'addPath':\n                    data[0].transform(matrix);\n                    break;\n                default:\n                    console.warn('unknown transform action', instruction.action);\n                    break;\n            }\n        }\n\n        this.dirty = true;\n\n        return this;\n    }\n\n    get bounds(): Bounds\n    {\n        return this.shapePath.bounds;\n    }\n}\n\nfunction adjustTransform(currentMatrix: Matrix, transform?: Matrix): Matrix\n{\n    if (currentMatrix)\n    {\n        return currentMatrix.prepend(transform);\n    }\n\n    return transform.clone();\n}\n"],"names":["SVGToGraphicsPath","ShapePath","Point"],"mappings":"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"}