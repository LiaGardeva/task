{"version":3,"file":"ShapePath.mjs","sources":["../../../../../src/rendering/graphics/shared/path/ShapePath.ts"],"sourcesContent":["// a shape lets you build out a shape with lines and curves and primitives..\n\nimport { Circle } from '../../../../maths/shapes/Circle';\nimport { Ellipse } from '../../../../maths/shapes/Ellipse';\nimport { Polygon } from '../../../../maths/shapes/Polygon';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { RoundedRectangle } from '../../../../maths/shapes/RoundedRectangle';\nimport { Bounds } from '../../../scene/bounds/Bounds';\nimport { buildAdaptiveBezier } from '../buildCommands/buildAdaptiveBezier';\nimport { buildAdaptiveQuadratic } from '../buildCommands/buildAdaptiveQuadratic';\nimport { buildArc } from '../buildCommands/buildArc';\nimport { buildArcTo } from '../buildCommands/buildArcTo';\nimport { buildArcToSvg } from '../buildCommands/buildArcToSvg';\n\nimport type { Matrix } from '../../../../maths/Matrix';\nimport type { ShapePrimitive } from '../../../../maths/shapes/ShapePrimitive';\nimport type { GraphicsPath } from './GraphicsPath';\n\nconst tempRectangle = new Rectangle();\n\nexport class ShapePath\n{\n    shapePrimitives: {shape: ShapePrimitive, transform?: Matrix}[] = [];\n    currentPoly: Polygon | null = null;\n    graphicsPath2D: GraphicsPath;\n    _bounds = new Bounds();\n\n    constructor(graphicsPath2D: GraphicsPath)\n    {\n        this.graphicsPath2D = graphicsPath2D;\n    }\n\n    public moveTo(x: number, y: number): this\n    {\n        this.startPoly(x, y);\n\n        return this;\n    }\n\n    public lineTo(x: number, y: number): this\n    {\n        this._ensurePoly();\n\n        const points = this.currentPoly.points;\n\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        if (fromX !== x || fromY !== y)\n        {\n            points.push(x, y);\n        }\n\n        return this;\n    }\n\n    arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise: boolean): this\n    {\n        // TODO - if its 360 degrees.. make it a circle object?\n\n        this._ensurePoly(false);\n\n        const points = this.currentPoly.points;\n\n        buildArc(points, x, y, radius, startAngle, endAngle, anticlockwise);\n\n        return this;\n    }\n\n    arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): this\n    {\n        this._ensurePoly();\n\n        const points = this.currentPoly.points;\n\n        buildArcTo(points, x1, y1, x2, y2, radius);\n\n        return this;\n    }\n\n    arcToSvg(\n        rx: number, ry: number,\n        xAxisRotation: number, largeArcFlag: number, sweepFlag: number,\n        x: number, y: number\n    ): this\n    {\n        const points = this.currentPoly.points;\n\n        // this needs to work on both canvas and GPU backends so might want to move this to the Graphics2D path..\n        buildArcToSvg(\n            points,\n            this.currentPoly.lastX,\n            this.currentPoly.lastY,\n            x,\n            y,\n            rx,\n            ry,\n            xAxisRotation,\n            largeArcFlag,\n            sweepFlag,\n        );\n\n        return this;\n    }\n\n    bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): this\n    {\n        this._ensurePoly();\n\n        const currentPoly = this.currentPoly;\n\n        // ensure distance from last point to first control point is not too small\n\n        // TODO - make this a plugin that people can override..\n        buildAdaptiveBezier(\n            this.currentPoly.points,\n            currentPoly.lastX, currentPoly.lastY,\n            cp1x, cp1y, cp2x, cp2y, x, y\n        );\n\n        return this;\n    }\n\n    quadraticCurveTo(cp1x: number, cp1y: number, x: number, y: number): this\n    {\n        this._ensurePoly();\n\n        const currentPoly = this.currentPoly;\n\n        // ensure distance from last point to first control point is not too small\n\n        // TODO - make this a plugin that people can override..\n        buildAdaptiveQuadratic(\n            this.currentPoly.points,\n            currentPoly.lastX, currentPoly.lastY,\n            cp1x, cp1y, x, y\n        );\n\n        return this;\n    }\n\n    closePath(): this\n    {\n        this.endPoly(true);\n\n        return this;\n    }\n\n    addPath(path: GraphicsPath, transform?: Matrix): this\n    {\n        this.endPoly();\n\n        if (transform && !transform.isIdentity())\n        {\n            path = path.clone(true);\n            path.transform(transform);\n        }\n\n        for (let i = 0; i < path.instructions.length; i++)\n        {\n            const instruction = path.instructions[i];\n\n            // Sorry TS! this is the best we could do...\n            this[instruction.action](...(instruction.data as [never, never, never, never, never, never, never]));\n            // build out the path points\n        }\n\n        return this;\n    }\n\n    finish(closePath = false)\n    {\n        this.endPoly(closePath);\n    }\n\n    rect(x: number, y: number, w: number, h: number, transform?: Matrix): this\n    {\n        this.drawShape(new Rectangle(x, y, w, h), transform);\n\n        return this;\n    }\n\n    circle(x: number, y: number, radius: number, transform?: Matrix): this\n    {\n        this.drawShape(new Circle(x, y, radius), transform);\n\n        return this;\n    }\n\n    poly(points: number[], close?: boolean, transform?: Matrix): void\n    {\n        const polygon = new Polygon(points);\n\n        polygon.closePath = close;\n\n        this.drawShape(polygon, transform);\n    }\n\n    ellipse(x: number, y: number, radiusX: number, radiusY: number, transform?: Matrix): this\n    {\n        // TODO apply rotation to transform...\n\n        this.drawShape(new Ellipse(x, y, radiusX, radiusY), transform);\n\n        return this;\n    }\n\n    roundRect(x: number, y: number, w: number, h: number, radii?: number, transform?: Matrix): this\n    {\n        this.drawShape(new RoundedRectangle(x, y, w, h, radii), transform);\n\n        return this;\n    }\n\n    public drawShape(shape: ShapePrimitive, matrix?: Matrix): this\n    {\n        this.endPoly();\n\n        this.shapePrimitives.push({ shape, transform: matrix });\n\n        return this;\n    }\n\n    public startPoly(x: number, y: number): this\n    {\n        let currentPoly = this.currentPoly;\n\n        if (currentPoly)\n        {\n            this.endPoly();\n        }\n\n        currentPoly = new Polygon();\n\n        currentPoly.points.push(x, y);\n\n        this.currentPoly = currentPoly;\n\n        return this;\n    }\n\n    public endPoly(closePath = false): this\n    {\n        const shape = this.currentPoly;\n\n        if (shape && shape.points.length > 2)\n        {\n            shape.closePath = closePath;\n\n            this.shapePrimitives.push({ shape });\n        }\n\n        this.currentPoly = null;\n\n        return this;\n    }\n\n    private _ensurePoly(start = true): void\n    {\n        if (this.currentPoly) return;\n\n        this.currentPoly = new Polygon();\n\n        if (start)\n        {\n            // get last points..\n            const lastShape = this.shapePrimitives[this.shapePrimitives.length - 1];\n\n            if (lastShape)\n            {\n                // i KNOW its a rect..\n                let lx = lastShape.shape.x;\n                let ly = lastShape.shape.y;\n\n                if (lastShape.transform.isIdentity())\n                {\n                    const t = lastShape.transform;\n\n                    const tempX = lx;\n\n                    lx = (t.a * lx) + (t.c * ly) + t.tx;\n                    ly = (t.b * tempX) + (t.d * ly) + t.ty;\n                }\n\n                this.currentPoly.points.push(lx, lx);\n            }\n            else\n            {\n                this.currentPoly.points.push(0, 0);\n            }\n        }\n    }\n\n    buildPath()\n    {\n        const path = this.graphicsPath2D;\n\n        this.shapePrimitives.length = 0;\n        this.currentPoly = null;\n\n        for (let i = 0; i < path.instructions.length; i++)\n        {\n            const instruction = path.instructions[i];\n\n            // Sorry TS! this is the best we could do...\n            this[instruction.action](...(instruction.data as [never, never, never, never, never, never, never]));\n        }\n\n        this.finish();\n    }\n\n    isPointInPath(x: number, y: number): boolean\n    {\n        const shapePrimitives = this.shapePrimitives;\n\n        // TODO do a bounding box check first..\n        for (let i = 0; i < shapePrimitives.length; i++)\n        {\n            const shapePrimitive = shapePrimitives[i];\n\n            if (shapePrimitive.shape.contains(x, y))\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    get bounds(): Bounds\n    {\n        const bounds = this._bounds;\n\n        bounds.clear();\n\n        const shapePrimitives = this.shapePrimitives;\n\n        for (let i = 0; i < shapePrimitives.length; i++)\n        {\n            const shapePrimitive = shapePrimitives[i];\n\n            const boundsRect = shapePrimitive.shape.getBounds(tempRectangle);\n\n            if (shapePrimitive.transform)\n            {\n                bounds.pushMatrix(shapePrimitive.transform);\n                bounds.addRect(boundsRect);\n                bounds.popMatrix();\n            }\n            else\n            {\n                bounds.addRect(boundsRect);\n            }\n        }\n\n        return bounds;\n    }\n}\n"],"names":[],"mappings":"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"}