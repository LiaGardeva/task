{"version":3,"file":"SVGToGraphicsPath.js","sources":["../../../../../src/rendering/graphics/shared/svg/SVGToGraphicsPath.ts"],"sourcesContent":["import type { GraphicsPath } from '../path/GraphicsPath';\n\nconst commandSizeMap = {\n    a: 7,\n    c: 6,\n    h: 1,\n    l: 2,\n    m: 2,\n    q: 4,\n    s: 4,\n    t: 2,\n    v: 1,\n    z: 0,\n};\n\n// TODO optimise and cache the paths?\nexport function SVGToGraphicsPath(svgPath: string, path: GraphicsPath): GraphicsPath\n{\n    // get commands removing spaces at the end\n\n    const commands = svgPath.match(/[a-df-z][^a-df-z]*/gi);\n    // get command data size\n\n    const data = svgPath.match(/[+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?/g)?.map(parseFloat);\n\n    const betterCommands: string[] = [];\n\n    commands.forEach((command) =>\n    {\n        const data = command.match(/[+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?/g)?.map(parseFloat);\n\n        const type = command[0];\n\n        let totalInstructions = 1;\n\n        if (data)\n        {\n            totalInstructions = data.length / commandSizeMap[type.toLowerCase() as keyof typeof commandSizeMap];\n        }\n\n        for (let i = 0; i < totalInstructions; i++)\n        {\n            betterCommands.push(type);\n        }\n    });\n\n    let dataIndex = 0;\n\n    let lastX = 0;\n    let lastY = 0;\n\n    for (let i = 0; i < betterCommands.length; i++)\n    {\n        const type = betterCommands[i];\n\n        // const command = commands[i];\n\n        //        const type = betterCommand.type;\n\n        switch (type)\n        {\n            case 'M':\n                lastX = data[dataIndex++];\n                lastY = data[dataIndex++];\n\n                path.moveTo(lastX, lastY);\n                break;\n            case 'm':\n\n                lastX += data[dataIndex++];\n                lastY += data[dataIndex++];\n\n                path.moveTo(lastX, lastY);\n                break;\n            case 'H':\n                lastX = data[dataIndex++];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'h':\n                lastX += data[dataIndex++];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'V':\n                lastY = data[dataIndex++];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'v':\n                lastY += data[dataIndex++];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'L':\n                lastX = data[dataIndex++];\n                lastY = data[dataIndex++];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'l':\n                lastX += data[dataIndex++];\n                lastY += data[dataIndex++];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'C':\n\n                lastX = data[dataIndex + 4];\n                lastY = data[dataIndex + 5];\n\n                path.bezierCurveTo(\n                    data[dataIndex], data[dataIndex + 1],\n                    data[dataIndex + 2], data[dataIndex + 3],\n                    lastX, lastY\n                );\n\n                dataIndex += 6;\n                break;\n            case 'c':\n\n                path.bezierCurveTo(\n                    lastX + data[dataIndex], lastY + data[dataIndex + 1],\n                    lastX + data[dataIndex + 2], lastY + data[dataIndex + 3],\n                    lastX + data[dataIndex + 4], lastY + data[dataIndex + 5]\n                );\n\n                lastX += data[dataIndex + 4];\n                lastY += data[dataIndex + 5];\n\n                dataIndex += 6;\n                break;\n            case 'S':\n                lastX = data[dataIndex + 2];\n                lastY = data[dataIndex + 3];\n\n                path.bezierCurveToShort(\n                    data[dataIndex], data[dataIndex + 1],\n                    lastX, lastY\n                );\n\n                dataIndex += 4;\n                break;\n            case 's':\n                path.bezierCurveToShort(\n                    lastX + data[dataIndex], lastY + data[dataIndex + 1],\n                    lastX + data[dataIndex + 2], lastY + data[dataIndex + 3],\n                );\n\n                lastX += data[dataIndex + 2];\n                lastY += data[dataIndex + 3];\n\n                dataIndex += 4;\n                break;\n            case 'Q':\n                lastX = data[dataIndex + 2];\n                lastY = data[dataIndex + 3];\n\n                path.quadraticCurveTo(\n                    data[dataIndex], data[dataIndex + 1],\n                    lastX, lastY\n                );\n\n                dataIndex += 4;\n                break;\n            case 'q':\n\n                path.quadraticCurveTo(\n                    lastX + data[dataIndex], lastY + data[dataIndex + 1],\n                    lastX + data[dataIndex + 2], lastY + data[dataIndex + 3]\n                );\n\n                lastX += data[dataIndex + 2];\n                lastY += data[dataIndex + 3];\n\n                dataIndex += 4;\n                break;\n            case 'T':\n\n                lastX = data[dataIndex++];\n                lastY = data[dataIndex++];\n\n                path.quadraticCurveToShort(\n                    lastX, lastY\n                );\n\n                break;\n            case 't':\n\n                lastX += data[dataIndex++];\n                lastY += data[dataIndex++];\n\n                path.quadraticCurveToShort(\n                    lastX, lastY\n                );\n\n                break;\n            case 'A':\n\n                lastX = data[dataIndex + 5];\n                lastY = data[dataIndex + 6];\n\n                path.arcToSvg(\n                    data[dataIndex],\n                    data[dataIndex + 1],\n                    data[dataIndex + 2],\n                    data[dataIndex + 3],\n                    data[dataIndex + 4],\n                    lastX, lastY\n                );\n\n                dataIndex += 7;\n\n                break;\n            case 'a':\n                lastX += data[dataIndex + 5];\n                lastY += data[dataIndex + 6];\n\n                path.arcToSvg(\n                    data[dataIndex],\n                    data[dataIndex + 1],\n                    data[dataIndex + 2],\n                    data[dataIndex + 3],\n                    data[dataIndex + 4],\n                    lastX, lastY\n                );\n\n                dataIndex += 7;\n\n                break;\n            case 'Z':\n            case 'z':\n                path.closePath();\n                break;\n            default:\n                console.warn(`Unknown SVG path command: ${type}`);\n        }\n    }\n\n    return path;\n}\n"],"names":["data"],"mappings":"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"}