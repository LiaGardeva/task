{"version":3,"file":"MaskEffectManager.mjs","sources":["../../../../src/rendering/mask/shared/MaskEffectManager.ts"],"sourcesContent":["import { extensions, ExtensionType } from '../../../extensions/Extensions';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\n\nimport type { PoolItem, PoolItemConstructor } from '../../../utils/pool/Pool';\nimport type { Effect, EffectConstructor } from '../../scene/Effect';\n\ninterface MaskConversionTest\n{\n    test: (item: any) => boolean;\n    maskClass: new (item: any) => Effect & PoolItem;\n}\n\nexport class MaskEffectManagerClass\n{\n    _effectClasses: EffectConstructor[] = [];\n    private tests: MaskConversionTest[] = [];\n    private _initialized = false;\n\n    init()\n    {\n        if (this._initialized) return;\n\n        this._initialized = true;\n\n        this._effectClasses.forEach((test) =>\n        {\n            this.add({\n                test: test.test,\n                maskClass: test\n            });\n        });\n    }\n\n    add(test: MaskConversionTest)\n    {\n        this.tests.push(test);\n    }\n\n    getMaskEffect(item: any): Effect\n    {\n        if (!this._initialized) this.init();\n\n        for (let i = 0; i < this.tests.length; i++)\n        {\n            const test = this.tests[i];\n\n            if (test.test(item))\n            {\n                return BigPool.get(test.maskClass as PoolItemConstructor<Effect & PoolItem>, item);\n            }\n        }\n\n        return item;\n    }\n\n    returnMaskEffect(effect: Effect & PoolItem)\n    {\n        BigPool.return(effect);\n    }\n}\n\nexport const MaskEffectManager = new MaskEffectManagerClass();\n\n// Handle registration of extensions\nextensions\n    .handleByList(ExtensionType.MaskEffect, MaskEffectManager._effectClasses);\n"],"names":[],"mappings":";;;AAYO,MAAM,sBACb,CAAA;AAAA,EADO,WAAA,GAAA;AAEH,IAAA,IAAA,CAAA,cAAA,GAAsC,EAAC,CAAA;AACvC,IAAA,IAAA,CAAQ,QAA8B,EAAC,CAAA;AACvC,IAAA,IAAA,CAAQ,YAAe,GAAA,KAAA,CAAA;AAAA,GAAA;AAAA,EAEvB,IACA,GAAA;AACI,IAAA,IAAI,IAAK,CAAA,YAAA;AAAc,MAAA,OAAA;AAEvB,IAAA,IAAA,CAAK,YAAe,GAAA,IAAA,CAAA;AAEpB,IAAK,IAAA,CAAA,cAAA,CAAe,OAAQ,CAAA,CAAC,IAC7B,KAAA;AACI,MAAA,IAAA,CAAK,GAAI,CAAA;AAAA,QACL,MAAM,IAAK,CAAA,IAAA;AAAA,QACX,SAAW,EAAA,IAAA;AAAA,OACd,CAAA,CAAA;AAAA,KACJ,CAAA,CAAA;AAAA,GACL;AAAA,EAEA,IAAI,IACJ,EAAA;AACI,IAAK,IAAA,CAAA,KAAA,CAAM,KAAK,IAAI,CAAA,CAAA;AAAA,GACxB;AAAA,EAEA,cAAc,IACd,EAAA;AACI,IAAA,IAAI,CAAC,IAAK,CAAA,YAAA;AAAc,MAAA,IAAA,CAAK,IAAK,EAAA,CAAA;AAElC,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,IAAK,CAAA,KAAA,CAAM,QAAQ,CACvC,EAAA,EAAA;AACI,MAAM,MAAA,IAAA,GAAO,IAAK,CAAA,KAAA,CAAM,CAAC,CAAA,CAAA;AAEzB,MAAI,IAAA,IAAA,CAAK,IAAK,CAAA,IAAI,CAClB,EAAA;AACI,QAAA,OAAO,OAAQ,CAAA,GAAA,CAAI,IAAK,CAAA,SAAA,EAAqD,IAAI,CAAA,CAAA;AAAA,OACrF;AAAA,KACJ;AAEA,IAAO,OAAA,IAAA,CAAA;AAAA,GACX;AAAA,EAEA,iBAAiB,MACjB,EAAA;AACI,IAAA,OAAA,CAAQ,OAAO,MAAM,CAAA,CAAA;AAAA,GACzB;AACJ,CAAA;AAEa,MAAA,iBAAA,GAAoB,IAAI,sBAAuB,GAAA;AAG5D,UAAA,CACK,YAAa,CAAA,aAAA,CAAc,UAAY,EAAA,iBAAA,CAAkB,cAAc,CAAA;;;;"}