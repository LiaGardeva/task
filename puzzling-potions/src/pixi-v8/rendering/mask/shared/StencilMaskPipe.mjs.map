{"version":3,"file":"StencilMaskPipe.mjs","sources":["../../../../src/rendering/mask/shared/StencilMaskPipe.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { STENCIL_MODES } from '../../renderers/shared/state/const';\nimport { collectAllRenderables } from '../../scene/utils/buildInstructions';\n\nimport type { Instruction } from '../../renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../renderers/types';\nimport type { Container } from '../../scene/Container';\nimport type { StencilMask } from './StencilMask';\n\ntype MaskMode = 'pushMaskBegin' | 'pushMaskEnd' | 'popMaskBegin' | 'popMaskEnd';\n\nexport interface StencilMaskInstruction extends Instruction\n{\n    type: 'stencilMask',\n    action: MaskMode,\n    mask: StencilMask,\n}\n\nexport class StencilMaskPipe implements InstructionPipe<StencilMaskInstruction>\n{\n    static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'stencilMask',\n    } as const;\n\n    private renderer: Renderer;\n\n    // used when building and also when executing..\n    private maskStackHash: Record<number, number> = {};\n\n    private maskHash = new WeakMap<StencilMask, {\n        instructionsStart: number,\n        instructionsLength: number,\n    }>();\n\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    push(mask: StencilMask, _container: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this.renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            type: 'stencilMask',\n            action: 'pushMaskBegin',\n            mask,\n            canBundle: false,\n        } as StencilMaskInstruction);\n\n        const maskContainer = mask.mask;\n\n        maskContainer.includeInBuild = true;\n\n        if (!this.maskHash.has(mask))\n        {\n            this.maskHash.set(mask, {\n                instructionsStart: 0,\n                instructionsLength: 0,\n            });\n        }\n\n        const maskData = this.maskHash.get(mask);\n\n        maskData.instructionsStart = instructionSet.instructionSize;\n\n        collectAllRenderables(\n            maskContainer,\n            instructionSet,\n            renderer.renderPipes,\n        );\n\n        maskContainer.includeInBuild = false;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            type: 'stencilMask',\n            action: 'pushMaskEnd',\n            mask,\n            canBundle: false,\n        } as StencilMaskInstruction);\n\n        const instructionsLength = instructionSet.instructionSize - maskData.instructionsStart - 1;\n\n        maskData.instructionsLength = instructionsLength;\n\n        if (this.maskStackHash[_container.uid] === undefined)\n        {\n            this.maskStackHash[_container.uid] = 0;\n        }\n\n        this.maskStackHash[_container.uid]++;\n    }\n\n    pop(mask: StencilMask, _container: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this.renderer;\n\n        // stencil is stored based on current render target..\n\n        this.maskStackHash[_container.uid]--;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            type: 'stencilMask',\n            action: 'popMaskBegin',\n            canBundle: false,\n        });\n\n        const maskData = this.maskHash.get(mask);\n\n        if (this.maskStackHash[_container.uid])\n        {\n            for (let i = 0; i < maskData.instructionsLength; i++)\n            {\n                // eslint-disable-next-line max-len\n                instructionSet.instructions[instructionSet.instructionSize++] = instructionSet.instructions[maskData.instructionsStart++];\n            }\n        }\n\n        instructionSet.add({\n            type: 'stencilMask',\n            action: 'popMaskEnd',\n            canBundle: false,\n        });\n    }\n\n    execute(instruction: StencilMaskInstruction)\n    {\n        const renderer = this.renderer;\n        const currentRenderTargetUid = renderer.renderTarget.renderTarget.uid;\n\n        let maskStackIndex = this.maskStackHash[currentRenderTargetUid] ?? 0;\n\n        if (instruction.action === 'pushMaskBegin')\n        {\n            maskStackIndex++;\n            renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_ADD, maskStackIndex);\n            renderer.colorMask.setMask(0);\n        }\n        else if (instruction.action === 'pushMaskEnd')\n        {\n            renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n            renderer.colorMask.setMask(0xF);\n        }\n        else if (instruction.action === 'popMaskBegin')\n        {\n            maskStackIndex--;\n\n            if (maskStackIndex !== 0)\n            {\n                renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_REMOVE, maskStackIndex);\n                renderer.colorMask.setMask(0);\n            }\n        }\n        else if (instruction.action === 'popMaskEnd')\n        {\n            if (maskStackIndex === 0)\n            {\n                renderer.stencil.setStencilMode(STENCIL_MODES.DISABLED, maskStackIndex);\n            }\n            else\n            {\n                renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n            }\n\n            renderer.colorMask.setMask(0xF);\n        }\n\n        this.maskStackHash[currentRenderTargetUid] = maskStackIndex;\n    }\n\n    destroy()\n    {\n        this.renderer = null;\n        this.maskStackHash = null;\n        this.maskHash = null;\n    }\n}\n"],"names":[],"mappings":"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"}