{"version":3,"file":"BatchableMesh.mjs","sources":["../../../../src/rendering/mesh/shared/BatchableMesh.ts"],"sourcesContent":["import type { Batch, BatchableObject, Batcher } from '../../batcher/shared/Batcher';\nimport type { Renderable } from '../../renderers/shared/Renderable';\nimport type { Texture } from '../../renderers/shared/texture/Texture';\nimport type { MeshView } from './MeshView';\n\nexport class BatchableMesh implements BatchableObject\n{\n    indexStart: number;\n    textureId: number;\n    texture: Texture;\n    location: number;\n    batcher: Batcher = null;\n    batch: Batch = null;\n    renderable: Renderable<MeshView>;\n\n    get blendMode() { return this.renderable.layerBlendMode; }\n\n    reset()\n    {\n        this.renderable = null;\n        this.texture = null;\n        this.batcher = null;\n        this.batch = null;\n    }\n\n    packIndex(indexBuffer: Uint32Array, index: number, indicesOffset: number)\n    {\n        const indices = this.renderable.view.geometry.indices;\n\n        for (let i = 0; i < indices.length; i++)\n        {\n            indexBuffer[index++] = indices[i] + indicesOffset;\n        }\n    }\n\n    packAttributes(\n        float32View: Float32Array,\n        uint32View: Uint32Array,\n        index: number,\n        textureId: number\n    )\n    {\n        const renderable = this.renderable;\n\n        const geometry = this.renderable.view.geometry;\n\n        const wt = renderable.layerTransform;\n\n        // wt.toArray(true);\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        // const trim = texture.trim;\n        const positions = geometry.positions;\n        const uvs = geometry.uvs;\n\n        const abgr = renderable.layerColor;\n\n        for (let i = 0; i < positions.length; i += 2)\n        {\n            const x = positions[i];\n            const y = positions[i + 1];\n\n            float32View[index++] = (a * x) + (c * y) + tx;\n            float32View[index++] = (b * x) + (d * y) + ty;\n\n            // TODO implement texture matrix?\n            float32View[index++] = uvs[i];\n            float32View[index++] = uvs[i + 1];\n\n            uint32View[index++] = abgr;\n            float32View[index++] = textureId;\n        }\n    }\n\n    get vertexSize()\n    {\n        return this.renderable.view.geometry.positions.length / 2;\n    }\n\n    get indexSize()\n    {\n        return this.renderable.view.geometry.indices.length;\n    }\n}\n"],"names":[],"mappings":"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"}