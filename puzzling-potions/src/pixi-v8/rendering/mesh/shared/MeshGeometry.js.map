{"version":3,"file":"MeshGeometry.js","sources":["../../../../src/rendering/mesh/shared/MeshGeometry.ts"],"sourcesContent":["import { Buffer } from '../../renderers/shared/buffer/Buffer';\nimport { BufferUsage } from '../../renderers/shared/buffer/const';\nimport { Geometry } from '../../renderers/shared/geometry/Geometry';\n\nimport type { BatchMode } from '../../graphics/shared/GraphicsContext';\nimport type { Topology } from '../../renderers/shared/geometry/const';\n\nexport interface MeshGeometryOptions\n{\n    positions?: Float32Array;\n    uvs?: Float32Array;\n    indices?: Uint32Array;\n    topology?: Topology;\n}\n\nexport class MeshGeometry extends Geometry\n{\n    static defaultOptions: MeshGeometryOptions = {\n        topology: 'triangle-list',\n    };\n\n    batchMode: BatchMode = 'auto';\n\n    constructor(options: MeshGeometryOptions = {})\n    {\n        options = { ...MeshGeometry.defaultOptions, ...options };\n\n        const positions = options.positions || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n        const uvs = options.uvs || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n        const indices = options.indices || new Uint32Array([0, 1, 2, 0, 2, 3]);\n\n        const positionBuffer = new Buffer({\n            data: positions,\n            label: 'attribute-mesh-positions',\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n        });\n\n        const uvBuffer = new Buffer({\n            data: uvs,\n            label: 'attribute-mesh-uvs',\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n        });\n\n        const indexBuffer = new Buffer({\n            data: indices,\n            label: 'index-mesh-buffer',\n            usage: BufferUsage.INDEX | BufferUsage.COPY_DST,\n        });\n\n        super({\n            attributes: {\n                aPosition: {\n                    buffer: positionBuffer,\n                    shaderLocation: 0,\n                    format: 'float32x2',\n                    stride: 2 * 4,\n                    offset: 0,\n                },\n                aUV: {\n                    buffer: uvBuffer,\n                    shaderLocation: 1,\n                    format: 'float32x2',\n                    stride: 2 * 4,\n                    offset: 0,\n                },\n            },\n            indexBuffer,\n            topology: options.topology,\n        });\n    }\n\n    get positions(): Float32Array\n    {\n        return this.attributes.aPosition.buffer.data as Float32Array;\n    }\n\n    set positions(value: Float32Array)\n    {\n        this.attributes.aPosition.buffer.data = value;\n    }\n\n    get uvs(): Float32Array\n    {\n        return this.attributes.aUV.buffer.data as Float32Array;\n    }\n\n    set uvs(value: Float32Array)\n    {\n        this.attributes.aUV.buffer.data = value;\n    }\n\n    get indices(): Uint32Array\n    {\n        return this.indexBuffer.data as Uint32Array;\n    }\n\n    set indices(value: Uint32Array)\n    {\n        this.indexBuffer.data = value;\n    }\n}\n"],"names":["Geometry","Buffer","BufferUsage"],"mappings":"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"}