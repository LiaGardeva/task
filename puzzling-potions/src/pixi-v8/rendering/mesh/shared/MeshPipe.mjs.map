{"version":3,"file":"MeshPipe.mjs","sources":["../../../../src/rendering/mesh/shared/MeshPipe.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/Matrix';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { BindGroup } from '../../renderers/gpu/shader/BindGroup';\nimport { UniformGroup } from '../../renderers/shared/shader/UniformGroup';\nimport { State } from '../../renderers/shared/state/State';\nimport { Texture } from '../../renderers/shared/texture/Texture';\nimport { BatchableMesh } from './BatchableMesh';\nimport { MeshShader } from './MeshShader';\n\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Instruction } from '../../renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type {\n    InstructionPipe,\n    RenderPipe\n} from '../../renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../renderers/shared/Renderable';\nimport type { Renderer } from '../../renderers/types';\nimport type { MeshGeometry } from './MeshGeometry';\nimport type { MeshView } from './MeshView';\n\n// TODO Record mode is a P2, will get back to this as it's not a priority\n// const recordMode = true;\n\ninterface RenderableData\n{\n    batched: boolean;\n    indexSize: number;\n    vertexSize: number;\n}\n\nexport interface MeshAdaptor\n{\n    execute(meshPipe: MeshPipe, renderable: Renderable<MeshView>): void;\n}\n\nexport interface MeshInstruction extends Instruction\n{\n    type: 'mesh';\n    renderable: Renderable<MeshView>;\n}\n\n// eslint-disable-next-line max-len\nexport class MeshPipe implements RenderPipe<MeshView>, InstructionPipe<MeshInstruction>\n{\n    /** @ignore */\n    static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'mesh',\n    } as const;\n\n    localUniforms = new UniformGroup({\n        transformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n        color: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n    });\n\n    localUniformsBindGroup = new BindGroup({\n        0: this.localUniforms,\n    });\n\n    meshShader = new MeshShader({\n        texture: Texture.EMPTY,\n    });\n\n    renderer: Renderer;\n    state: State = State.for2d();\n\n    private renderableHash: Record<number, RenderableData> = {};\n    private gpuBatchableMeshHash: Record<number, BatchableMesh> = {};\n    private adaptor: MeshAdaptor;\n\n    constructor(renderer: Renderer, adaptor: MeshAdaptor)\n    {\n        this.renderer = renderer;\n        this.adaptor = adaptor;\n    }\n\n    validateRenderable(renderable: Renderable<MeshView>): boolean\n    {\n        const renderableData = this.getRenderableData(renderable);\n\n        const wasBatched = renderableData.batched;\n\n        const isBatched = renderable.view.batched;\n\n        renderableData.batched = isBatched;\n\n        if (wasBatched !== isBatched)\n        {\n            return true;\n        }\n        else if (isBatched)\n        {\n            const geometry = renderable.view._geometry;\n\n            // no need to break the batch if it's the same size\n            if (geometry.indices.length !== renderableData.indexSize\n                    || geometry.positions.length !== renderableData.vertexSize)\n            {\n                renderableData.indexSize = geometry.indices.length;\n                renderableData.vertexSize = geometry.positions.length;\n\n                return true;\n            }\n\n            const batchableMesh = this.getBatchableMesh(renderable);\n\n            const texture = renderable.view.texture;\n\n            if (batchableMesh.texture._source !== texture._source)\n            {\n                if (batchableMesh.texture._source !== texture._source)\n                {\n                    return batchableMesh.batcher.checkAndUpdateTexture(batchableMesh, texture);\n                }\n            }\n        }\n\n        return false;\n    }\n\n    addRenderable(renderable: Renderable<MeshView>, instructionSet: InstructionSet)\n    {\n        const batcher = this.renderer.renderPipes.batch;\n\n        const { batched } = this.getRenderableData(renderable);\n\n        if (batched)\n        {\n            const gpuBatchableMesh = this.getBatchableMesh(renderable);\n\n            gpuBatchableMesh.texture = renderable.view._texture;\n\n            batcher.addToBatch(gpuBatchableMesh, instructionSet);\n        }\n        else\n        {\n            batcher.break(instructionSet);\n\n            instructionSet.add({\n                type: 'mesh',\n                renderable\n            } as MeshInstruction);\n        }\n    }\n\n    updateRenderable(renderable: Renderable<MeshView>)\n    {\n        if (renderable.view.batched)\n        {\n            const gpuBatchableMesh = this.gpuBatchableMeshHash[renderable.uid];\n\n            gpuBatchableMesh.texture = renderable.view._texture;\n\n            gpuBatchableMesh.batcher.updateElement(gpuBatchableMesh);\n        }\n    }\n\n    destroyRenderable(renderable: Renderable<MeshView<MeshGeometry>>)\n    {\n        this.renderableHash[renderable.uid] = null;\n\n        const gpuMesh = this.gpuBatchableMeshHash[renderable.uid];\n\n        BigPool.return(gpuMesh as PoolItem);\n\n        this.gpuBatchableMeshHash[renderable.uid] = null;\n    }\n\n    execute({ renderable }: MeshInstruction)\n    {\n        if (!renderable.isRenderable) return;\n\n        this.adaptor.execute(this, renderable);\n    }\n\n    private getRenderableData(renderable: Renderable<MeshView>): RenderableData\n    {\n        return this.renderableHash[renderable.uid] || this.initRenderableData(renderable);\n    }\n\n    private initRenderableData(renderable: Renderable<MeshView>): RenderableData\n    {\n        const view = renderable.view;\n\n        this.renderableHash[renderable.uid] = {\n            batched: view.batched,\n            indexSize: view._geometry.indices.length,\n            vertexSize: view._geometry.positions.length,\n        };\n\n        renderable.on('destroyed', () =>\n        {\n            this.destroyRenderable(renderable);\n        });\n\n        return this.renderableHash[renderable.uid];\n    }\n\n    private getBatchableMesh(renderable: Renderable<MeshView>): BatchableMesh\n    {\n        return this.gpuBatchableMeshHash[renderable.uid] || this.initBatchableMesh(renderable);\n    }\n\n    private initBatchableMesh(renderable: Renderable<MeshView>): BatchableMesh\n    {\n        // TODO - make this batchable graphics??\n        const gpuMesh: BatchableMesh = BigPool.get(BatchableMesh);\n\n        gpuMesh.renderable = renderable;\n        gpuMesh.texture = renderable.view._texture;\n\n        this.gpuBatchableMeshHash[renderable.uid] = gpuMesh;\n\n        gpuMesh.renderable = renderable;\n\n        return gpuMesh;\n    }\n\n    destroy()\n    {\n        for (const i in this.gpuBatchableMeshHash)\n        {\n            if (this.gpuBatchableMeshHash[i])\n            {\n                BigPool.return(this.gpuBatchableMeshHash[i] as PoolItem);\n            }\n        }\n\n        this.gpuBatchableMeshHash = null;\n        this.renderableHash = null;\n\n        this.localUniforms = null;\n        this.localUniformsBindGroup = null;\n\n        this.meshShader.destroy();\n        this.meshShader = null;\n\n        this.adaptor = null;\n\n        this.renderer = null;\n        this.state = null;\n    }\n}\n"],"names":[],"mappings":"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"}