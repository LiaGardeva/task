{"version":3,"file":"MeshShader.js","sources":["../../../../src/rendering/mesh/shared/MeshShader.ts"],"sourcesContent":["import { GlProgram } from '../../renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../renderers/gpu/shader/GpuProgram';\nimport { Shader } from '../../renderers/shared/shader/Shader';\nimport programFrag from '../gl/mesh-default.frag';\nimport programVert from '../gl/mesh-default.vert';\nimport programWgsl from '../gpu/mesh-default.wgsl';\n\nimport type { Texture } from '../../renderers/shared/texture/Texture';\nimport type { TextureShader } from './MeshView';\n\ninterface MeshShaderOptions\n{\n    texture: Texture;\n}\n\nexport class MeshShader extends Shader implements TextureShader\n{\n    private _texture: Texture;\n\n    constructor(options: MeshShaderOptions)\n    {\n        const glProgram = GlProgram.from({\n            vertex: programVert,\n            fragment: programFrag,\n            name: 'mesh-default',\n        });\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: programWgsl,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source: programWgsl,\n                entryPoint: 'mainFragment',\n            }\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                uTexture: options.texture.source,\n                uSampler: options.texture.style,\n            }\n        });\n    }\n\n    get texture(): Texture\n    {\n        return this._texture;\n    }\n\n    set texture(value: Texture)\n    {\n        if (this._texture === value) return;\n\n        this._texture = value;\n\n        this.resources.uTexture = value.source;\n        this.resources.uSampler = value.style;\n    }\n}\n"],"names":["Shader","GlProgram","programVert","programFrag","GpuProgram","programWgsl"],"mappings":";;;;;;;;;;;AAeO,MAAM,mBAAmBA,aAChC,CAAA;AAAA,EAGI,YAAY,OACZ,EAAA;AACI,IAAM,MAAA,SAAA,GAAYC,oBAAU,IAAK,CAAA;AAAA,MAC7B,MAAQ,EAAAC,sBAAA;AAAA,MACR,QAAU,EAAAC,wBAAA;AAAA,MACV,IAAM,EAAA,cAAA;AAAA,KACT,CAAA,CAAA;AAED,IAAM,MAAA,UAAA,GAAaC,sBAAW,IAAK,CAAA;AAAA,MAC/B,MAAQ,EAAA;AAAA,QACJ,MAAQ,EAAAC,wBAAA;AAAA,QACR,UAAY,EAAA,YAAA;AAAA,OAChB;AAAA,MACA,QAAU,EAAA;AAAA,QACN,MAAQ,EAAAA,wBAAA;AAAA,QACR,UAAY,EAAA,cAAA;AAAA,OAChB;AAAA,KACH,CAAA,CAAA;AAED,IAAM,KAAA,CAAA;AAAA,MACF,SAAA;AAAA,MACA,UAAA;AAAA,MACA,SAAW,EAAA;AAAA,QACP,QAAA,EAAU,QAAQ,OAAQ,CAAA,MAAA;AAAA,QAC1B,QAAA,EAAU,QAAQ,OAAQ,CAAA,KAAA;AAAA,OAC9B;AAAA,KACH,CAAA,CAAA;AAAA,GACL;AAAA,EAEA,IAAI,OACJ,GAAA;AACI,IAAA,OAAO,IAAK,CAAA,QAAA,CAAA;AAAA,GAChB;AAAA,EAEA,IAAI,QAAQ,KACZ,EAAA;AACI,IAAA,IAAI,KAAK,QAAa,KAAA,KAAA;AAAO,MAAA,OAAA;AAE7B,IAAA,IAAA,CAAK,QAAW,GAAA,KAAA,CAAA;AAEhB,IAAK,IAAA,CAAA,SAAA,CAAU,WAAW,KAAM,CAAA,MAAA,CAAA;AAChC,IAAK,IAAA,CAAA,SAAA,CAAU,WAAW,KAAM,CAAA,KAAA,CAAA;AAAA,GACpC;AACJ;;;;"}