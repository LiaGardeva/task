{"version":3,"file":"MeshView.js","sources":["../../../../src/rendering/mesh/shared/MeshView.ts"],"sourcesContent":["import { Polygon } from '../../../maths/shapes/Polygon';\nimport { emptyViewObserver } from '../../renderers/shared/View';\n\nimport type { PointData } from '../../../maths/PointData';\nimport type { Shader } from '../../renderers/shared/shader/Shader';\nimport type { Texture } from '../../renderers/shared/texture/Texture';\nimport type { View } from '../../renderers/shared/View';\nimport type { Bounds } from '../../scene/bounds/Bounds';\nimport type { DestroyOptions } from '../../scene/destroyTypes';\nimport type { MeshGeometry } from './MeshGeometry';\n\nlet UID = 0;\n\nconst tempPolygon = new Polygon();\n\nexport interface TextureShader extends Shader\n{\n    texture: Texture;\n}\n\nexport interface MeshViewTextureOptions\n{\n    geometry: MeshGeometry;\n    texture: Texture;\n}\n\nexport interface MeshViewShaderOptions\n{\n    geometry: MeshGeometry;\n    shader: TextureShader;\n}\n\nexport type MeshViewOptions = MeshViewTextureOptions | MeshViewShaderOptions;\n\nexport class MeshView<GEOMETRY extends MeshGeometry = MeshGeometry>implements View\n{\n    uid: number = UID++;\n\n    type = 'mesh';\n\n    _texture: Texture;\n\n    _geometry: GEOMETRY;\n\n    // TODO this should be a shader type! As long as its compatible!\n    _shader?: TextureShader;\n\n    canBundle = true;\n\n    action?: string;\n\n    owner = emptyViewObserver;\n\n    constructor(options: MeshViewOptions)\n    {\n        this.shader = (options as MeshViewShaderOptions).shader;\n\n        if ((options as MeshViewTextureOptions).texture)\n        {\n            this.texture = (options as MeshViewTextureOptions).texture;\n        }\n\n        this._geometry = options.geometry as GEOMETRY;\n        this._geometry.on('update', this.onGeometryUpdate, this);\n    }\n\n    set shader(value: TextureShader)\n    {\n        if (this._shader === value) return;\n\n        this._shader = value;\n\n        this.onUpdate();\n    }\n\n    get shader()\n    {\n        return this._shader;\n    }\n\n    set geometry(value: GEOMETRY)\n    {\n        if (this._geometry === value) return;\n\n        this._geometry?.off('update', this.onUpdate, this);\n        value.on('update', this.onUpdate, this);\n\n        this._geometry = value;\n\n        this.onUpdate();\n    }\n\n    get geometry()\n    {\n        return this._geometry;\n    }\n\n    set texture(value: Texture)\n    {\n        if (this._texture === value) return;\n\n        if (this.shader)\n        {\n            this.shader.resources.uTexture = value.source;\n            this.shader.resources.uSampler = value.style;\n        }\n\n        this._texture = value;\n\n        this.onUpdate();\n    }\n\n    get texture()\n    {\n        return this._texture;\n    }\n\n    addBounds(bounds: Bounds)\n    {\n        bounds.addVertexData(this.geometry.positions, 0, this.geometry.positions.length);\n    }\n\n    public containsPoint(point: PointData)\n    {\n        const { x, y } = point;\n\n        const vertices = this.geometry.getBuffer('aPosition').data;\n\n        const points = tempPolygon.points;\n        const indices = this.geometry.getIndex().data;\n        const len = indices.length;\n        const step = this.geometry.topology === 'triangle-strip' ? 3 : 1;\n\n        for (let i = 0; i + 2 < len; i += step)\n        {\n            const ind0 = indices[i] * 2;\n            const ind1 = indices[i + 1] * 2;\n            const ind2 = indices[i + 2] * 2;\n\n            points[0] = vertices[ind0];\n            points[1] = vertices[ind0 + 1];\n            points[2] = vertices[ind1];\n            points[3] = vertices[ind1 + 1];\n            points[4] = vertices[ind2];\n            points[5] = vertices[ind2 + 1];\n\n            if (tempPolygon.contains(x, y))\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    get batched()\n    {\n        if (this._shader) return false;\n\n        if (this._geometry.batchMode === 'auto')\n        {\n            return this._geometry.positions.length / 2 <= 100;\n        }\n\n        return this._geometry.batchMode === 'batch';\n    }\n\n    /**\n     * Destroys this sprite renderable and optionally its texture.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the renderable as well\n     * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the renderable as well\n     */\n    public destroy(options: DestroyOptions = false): void\n    {\n        const destroyTexture = typeof options === 'boolean' ? options : options?.texture;\n\n        if (destroyTexture)\n        {\n            const destroyTextureSource = typeof options === 'boolean' ? options : options?.textureSource;\n\n            this._texture.destroy(destroyTextureSource);\n        }\n\n        this._texture = null;\n        this._geometry = null;\n        this._shader = null;\n    }\n\n    protected onGeometryUpdate()\n    {\n        this.onUpdate();\n    }\n\n    protected onUpdate()\n    {\n        this.owner.onViewUpdate();\n    }\n}\n"],"names":["Polygon","emptyViewObserver"],"mappings":"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"}