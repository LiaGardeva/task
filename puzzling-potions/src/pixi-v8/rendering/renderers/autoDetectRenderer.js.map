{"version":3,"file":"autoDetectRenderer.js","sources":["../../../src/rendering/renderers/autoDetectRenderer.ts"],"sourcesContent":["import { isWebGLSupported } from '../../utils/browser/isWebGLSupported';\nimport { isWebGPUSupported } from '../../utils/browser/isWebGPUSupported';\n\nimport type { WebGLOptions } from './gl/WebGLRenderer';\nimport type { WebGPUOptions } from './gpu/WebGPURenderer';\nimport type { Renderer } from './types';\n\nexport interface AutoDetectOptions extends WebGLOptions, WebGPUOptions\n{\n    preference?: 'webgl' | 'webgpu' | 'canvas';\n    manageImports?: boolean;\n    webgpu?: Partial<WebGPUOptions>;\n    webgl?: Partial<WebGLOptions>;\n}\n\nconst renderPriority = ['webgpu', 'webgl', 'canvas'];\n\nexport async function autoDetectRenderer(options: Partial<AutoDetectOptions>): Promise<Renderer>\n{\n    let preferredOrder: string[] = [];\n\n    if (options.preference)\n    {\n        preferredOrder.push(options.preference);\n\n        renderPriority.forEach((item) =>\n        {\n            if (item !== options.preference)\n            {\n                preferredOrder.push(item);\n            }\n        });\n    }\n    else\n    {\n        preferredOrder = renderPriority.slice();\n    }\n\n    let RendererClass: new () => Renderer;\n\n    if (options.manageImports ?? true)\n    {\n        await import('../../all');\n    }\n\n    let finalOptions: Partial<AutoDetectOptions> = {};\n\n    for (let i = 0; i < preferredOrder.length; i++)\n    {\n        const rendererType = preferredOrder[i];\n\n        if (rendererType === 'webgpu' && (await isWebGPUSupported()))\n        {\n            const { WebGPURenderer } = await import('./gpu/WebGPURenderer');\n\n            RendererClass = WebGPURenderer;\n\n            finalOptions = { ...options, ...options.webgpu };\n\n            break;\n        }\n        else if (rendererType === 'webgl' && isWebGLSupported())\n        {\n            const { WebGLRenderer } = await import('./gl/WebGLRenderer');\n\n            RendererClass = WebGLRenderer;\n\n            finalOptions = { ...options, ...options.webgl };\n\n            break;\n        }\n        else if (rendererType === 'canvas')\n        {\n            finalOptions = { ...options };\n\n            break;\n        }\n    }\n\n    delete finalOptions.webgpu;\n    delete finalOptions.webgl;\n\n    const renderer = new RendererClass();\n\n    await renderer.init(finalOptions);\n\n    return renderer;\n}\n"],"names":["isWebGPUSupported","isWebGLSupported"],"mappings":";;;;;;;AAeA,MAAM,cAAiB,GAAA,CAAC,QAAU,EAAA,OAAA,EAAS,QAAQ,CAAA,CAAA;AAEnD,eAAsB,mBAAmB,OACzC,EAAA;AACI,EAAA,IAAI,iBAA2B,EAAC,CAAA;AAEhC,EAAA,IAAI,QAAQ,UACZ,EAAA;AACI,IAAe,cAAA,CAAA,IAAA,CAAK,QAAQ,UAAU,CAAA,CAAA;AAEtC,IAAe,cAAA,CAAA,OAAA,CAAQ,CAAC,IACxB,KAAA;AACI,MAAI,IAAA,IAAA,KAAS,QAAQ,UACrB,EAAA;AACI,QAAA,cAAA,CAAe,KAAK,IAAI,CAAA,CAAA;AAAA,OAC5B;AAAA,KACH,CAAA,CAAA;AAAA,GAGL,MAAA;AACI,IAAA,cAAA,GAAiB,eAAe,KAAM,EAAA,CAAA;AAAA,GAC1C;AAEA,EAAI,IAAA,aAAA,CAAA;AAEJ,EAAI,IAAA,OAAA,CAAQ,iBAAiB,IAC7B,EAAA;AACI,IAAA,MAAM,oDAAO,cAAW,KAAA,CAAA;AAAA,GAC5B;AAEA,EAAA,IAAI,eAA2C,EAAC,CAAA;AAEhD,EAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,cAAA,CAAe,QAAQ,CAC3C,EAAA,EAAA;AACI,IAAM,MAAA,YAAA,GAAe,eAAe,CAAC,CAAA,CAAA;AAErC,IAAA,IAAI,YAAiB,KAAA,QAAA,IAAa,MAAMA,mCAAA,EACxC,EAAA;AACI,MAAA,MAAM,EAAE,cAAA,EAAmB,GAAA,MAAM,oDAAO,yBAAsB,KAAA,CAAA;AAE9D,MAAgB,aAAA,GAAA,cAAA,CAAA;AAEhB,MAAA,YAAA,GAAe,EAAE,GAAG,OAAS,EAAA,GAAG,QAAQ,MAAO,EAAA,CAAA;AAE/C,MAAA,MAAA;AAAA,KAEK,MAAA,IAAA,YAAA,KAAiB,OAAW,IAAAC,iCAAA,EACrC,EAAA;AACI,MAAA,MAAM,EAAE,aAAA,EAAkB,GAAA,MAAM,oDAAO,uBAAoB,KAAA,CAAA;AAE3D,MAAgB,aAAA,GAAA,aAAA,CAAA;AAEhB,MAAA,YAAA,GAAe,EAAE,GAAG,OAAS,EAAA,GAAG,QAAQ,KAAM,EAAA,CAAA;AAE9C,MAAA,MAAA;AAAA,KACJ,MAAA,IACS,iBAAiB,QAC1B,EAAA;AACI,MAAe,YAAA,GAAA,EAAE,GAAG,OAAQ,EAAA,CAAA;AAE5B,MAAA,MAAA;AAAA,KACJ;AAAA,GACJ;AAEA,EAAA,OAAO,YAAa,CAAA,MAAA,CAAA;AACpB,EAAA,OAAO,YAAa,CAAA,KAAA,CAAA;AAEpB,EAAM,MAAA,QAAA,GAAW,IAAI,aAAc,EAAA,CAAA;AAEnC,EAAM,MAAA,QAAA,CAAS,KAAK,YAAY,CAAA,CAAA;AAEhC,EAAO,OAAA,QAAA,CAAA;AACX;;;;"}