{"version":3,"file":"GlBackBufferSystem.js","sources":["../../../../src/rendering/renderers/gl/GlBackBufferSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { Shader } from '../shared/shader/Shader';\nimport { State } from '../shared/state/State';\nimport { TextureSource } from '../shared/texture/sources/TextureSource';\nimport { Texture } from '../shared/texture/Texture';\nimport { GlProgram } from './shader/GlProgram';\n\nimport type { RenderSurface } from '../gpu/renderTarget/GpuRenderTargetSystem';\nimport type { System } from '../shared/system/System';\nimport type { WebGLRenderer } from './WebGLRenderer';\n\nconst bigTriangleProgram = new GlProgram({\n    vertex: `\n        out vec2 vUv;\n\n        void main() {\n            vUv = vec2((gl_VertexID << 1) & 2, (gl_VertexID & 2));\n\n            gl_Position = vec4(vUv * 2.0f + -1.0f, 0.0f, 1.0f);\n\n            // flip dem UVs\n            vUv.y = 1.0f - vUv.y;\n        }`,\n    fragment: `\n        in vec2 vUv;\n        out vec4 fragColor;\n\n        uniform sampler2D uTexture;\n\n        void main() {\n            fragColor = texture(uTexture, vUv);\n        }`,\n    name: 'big-triangle',\n});\n\nconst bigTriangleShader = new Shader({\n    glProgram: bigTriangleProgram,\n    resources: {\n        uTexture: Texture.WHITE.source,\n    },\n});\n\nexport class GlBackBufferSystem implements System\n{\n    /** @ignore */\n    static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'backBuffer',\n    } as const;\n\n    backBufferTexture: Texture;\n    renderer: WebGLRenderer;\n    targetTexture: Texture;\n    useBackBuffer = false;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this.renderer = renderer;\n    }\n\n    init({ useBackBuffer }: { useBackBuffer?: boolean } = {})\n    {\n        this.useBackBuffer = useBackBuffer;\n    }\n\n    renderStart({ target, clear }: { target: RenderSurface, clear: boolean })\n    {\n        if (this.useBackBuffer)\n        {\n            const renderTarget = this.renderer.renderTarget.getRenderTarget(target);\n\n            this.targetTexture = renderTarget.colorTexture;\n\n            target = this._getBackBufferTexture(renderTarget.colorTexture);\n        }\n\n        this.renderer.renderTarget.start(target, clear, this.renderer.background.colorRgba);\n    }\n\n    renderEnd()\n    {\n        this._presentBackBuffer();\n    }\n\n    private _presentBackBuffer()\n    {\n        if (!this.useBackBuffer) return;\n\n        const renderer = this.renderer;\n        const gl = renderer.gl;\n\n        renderer.renderTarget.finishRenderPass();\n\n        renderer.renderTarget.bind(this.targetTexture, false);\n\n        bigTriangleShader.resources.uTexture = this.backBufferTexture.source;\n\n        renderer.shader.bind(bigTriangleShader, false);\n        renderer.state.set(State.for2d());\n\n        gl.drawArrays(gl.TRIANGLES, 0, 3);\n    }\n\n    private _getBackBufferTexture(targetTexture: Texture)\n    {\n        const source = targetTexture.source;\n\n        this.backBufferTexture = this.backBufferTexture || new Texture({\n            source: new TextureSource({\n                width: 1,\n                height: 1,\n                resolution: 1,\n                antialias: false,\n            }),\n        });\n\n        // this will not resize if its the same size already! No extra check required\n        this.backBufferTexture.source.resize(\n            source.width,\n            source.height,\n            source._resolution,\n        );\n\n        return this.backBufferTexture;\n    }\n\n    destroy()\n    {\n        //\n    }\n}\n"],"names":["GlProgram","Shader","Texture","State","TextureSource","ExtensionType"],"mappings":"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"}