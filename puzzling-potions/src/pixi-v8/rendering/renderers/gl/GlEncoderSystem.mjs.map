{"version":3,"file":"GlEncoderSystem.mjs","sources":["../../../../src/rendering/renderers/gl/GlEncoderSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { Rectangle } from '../../../maths/shapes/Rectangle';\nimport type { Bounds } from '../../scene/bounds/Bounds';\nimport type { GpuRenderTarget } from '../gpu/renderTarget/GpuRenderTarget';\nimport type { BindGroup } from '../gpu/shader/BindGroup';\nimport type { Topology } from '../shared/geometry/const';\nimport type { Geometry } from '../shared/geometry/Geometry';\nimport type { RenderTarget } from '../shared/renderTarget/RenderTarget';\nimport type { Shader } from '../shared/shader/Shader';\nimport type { State } from '../shared/state/State';\nimport type { System } from '../shared/system/System';\nimport type { WebGLRenderer } from './WebGLRenderer';\n\nexport class GlEncoderSystem implements System\n{\n    /** @ignore */\n    static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'encoder',\n    } as const;\n\n    readonly commandFinished = Promise.resolve();\n    private renderer: WebGLRenderer;\n    // private gl: WebGL2RenderingContext;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this.renderer = renderer;\n    }\n\n    start(): void\n    {\n        // generate a render pass description..\n    }\n\n    // protected contextChange(gl: GlRenderingContext): void\n    // {\n    //     this.gl = gl;\n    // }\n\n    beginRenderPass(renderTarget: RenderTarget, _gpuRenderTarget: GpuRenderTarget)\n    {\n        this.setViewport(renderTarget.viewport);\n    }\n\n    setViewport(_viewport: Rectangle): void\n    {\n        // this.renderPassEncoder.setViewport(\n        //     viewport.x,\n        //     viewport.y,\n        //     viewport.width,\n        //     viewport.height,\n        //     0, 1);\n    }\n\n    setScissor(bounds: Bounds): void\n    {\n        bounds.fit(this.renderer.renderTarget.renderTarget.viewport);\n\n        // this.renderPassEncoder.setScissorRect(\n        //     bounds.minX,\n        //     bounds.minY,\n        //     bounds.width,\n        //     bounds.height\n        // );\n    }\n\n    clearScissor(): void\n    {\n        //  const viewport = this.renderer.renderTarget.renderTarget.viewport;\n\n        // this.renderPassEncoder.setScissorRect(\n        //     viewport.x,\n        //     viewport.y,\n        //     viewport.width,\n        //     viewport.height\n        // );\n    }\n\n    setGeometry(geometry: Geometry, shader?: Shader)\n    {\n        this.renderer.geometry.bind(geometry, shader.glProgram);\n    }\n\n    setShaderBindGroups(_shader: Shader, _sync?: boolean)\n    {\n        // for (const i in shader.groups)\n        // {\n        //     const bindGroup = shader.groups[i] as BindGroup;\n\n        //     // update any uniforms?\n        //     if (sync)\n        //     {\n        //         this.syncBindGroup(bindGroup);\n        //     }\n\n        //     this.setBindGroup(i, bindGroup, shader.gpuProgram);\n        // }\n    }\n\n    syncBindGroup(_bindGroup: BindGroup)\n    {\n        // for (const j in bindGroup.resources)\n        // {\n        //     const resource = bindGroup.resources[j];\n\n        //     if (resource.group)\n        //     {\n        //         this.renderer.uniformBuffer.updateUniformAndUploadGroup(resource);\n        //     }\n        // }\n    }\n\n    draw(options: {\n        geometry: Geometry,\n        shader: Shader,\n        state?: State,\n        topology?: Topology,\n        size?: number,\n        start?: number,\n        instanceCount?: number\n        skipSync?: boolean,\n    })\n    {\n        const renderer = this.renderer;\n        const { geometry, shader, state, skipSync, topology: type, size, start, instanceCount } = options;\n\n        renderer.shader.bind(shader, skipSync);\n\n        renderer.geometry.bind(geometry, renderer.shader.activeProgram);\n\n        if (state)\n        {\n            renderer.state.set(state);\n        }\n\n        renderer.geometry.draw(type, size, start, instanceCount);\n    }\n\n    finishRenderPass()\n    {\n        // if (this.renderPassEncoder)\n        // {\n        //     this.renderPassEncoder.end();\n        //     this.renderPassEncoder = null;\n        // }\n    }\n\n    finish()\n    {\n        // this.finishRenderPass();\n\n        // this.gpu.device.queue.submit([this.commandEncoder.finish()]);\n\n        // this.resolveCommandFinished();\n    }\n\n    // restores a render pass if finishRenderPass was called\n    // not optimised as really used for debugging!\n    // used when we want to stop drawing and log a texture..\n    restoreRenderPass()\n    {\n        // do stuff\n    }\n\n    destroy()\n    {\n        // boom!\n    }\n}\n"],"names":[],"mappings":";;AAcO,MAAM,eACb,CAAA;AAAA;AAAA,EAaI,YAAY,QACZ,EAAA;AALA,IAAS,IAAA,CAAA,eAAA,GAAkB,QAAQ,OAAQ,EAAA,CAAA;AAMvC,IAAA,IAAA,CAAK,QAAW,GAAA,QAAA,CAAA;AAAA,GACpB;AAAA,EAEA,KACA,GAAA;AAAA,GAEA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,eAAA,CAAgB,cAA4B,gBAC5C,EAAA;AACI,IAAK,IAAA,CAAA,WAAA,CAAY,aAAa,QAAQ,CAAA,CAAA;AAAA,GAC1C;AAAA,EAEA,YAAY,SACZ,EAAA;AAAA,GAOA;AAAA,EAEA,WAAW,MACX,EAAA;AACI,IAAA,MAAA,CAAO,GAAI,CAAA,IAAA,CAAK,QAAS,CAAA,YAAA,CAAa,aAAa,QAAQ,CAAA,CAAA;AAAA,GAQ/D;AAAA,EAEA,YACA,GAAA;AAAA,GASA;AAAA,EAEA,WAAA,CAAY,UAAoB,MAChC,EAAA;AACI,IAAA,IAAA,CAAK,QAAS,CAAA,QAAA,CAAS,IAAK,CAAA,QAAA,EAAU,OAAO,SAAS,CAAA,CAAA;AAAA,GAC1D;AAAA,EAEA,mBAAA,CAAoB,SAAiB,KACrC,EAAA;AAAA,GAaA;AAAA,EAEA,cAAc,UACd,EAAA;AAAA,GAUA;AAAA,EAEA,KAAK,OAUL,EAAA;AACI,IAAA,MAAM,WAAW,IAAK,CAAA,QAAA,CAAA;AACtB,IAAM,MAAA,EAAE,QAAU,EAAA,MAAA,EAAQ,KAAO,EAAA,QAAA,EAAU,UAAU,IAAM,EAAA,IAAA,EAAM,KAAO,EAAA,aAAA,EAAkB,GAAA,OAAA,CAAA;AAE1F,IAAS,QAAA,CAAA,MAAA,CAAO,IAAK,CAAA,MAAA,EAAQ,QAAQ,CAAA,CAAA;AAErC,IAAA,QAAA,CAAS,QAAS,CAAA,IAAA,CAAK,QAAU,EAAA,QAAA,CAAS,OAAO,aAAa,CAAA,CAAA;AAE9D,IAAA,IAAI,KACJ,EAAA;AACI,MAAS,QAAA,CAAA,KAAA,CAAM,IAAI,KAAK,CAAA,CAAA;AAAA,KAC5B;AAEA,IAAA,QAAA,CAAS,QAAS,CAAA,IAAA,CAAK,IAAM,EAAA,IAAA,EAAM,OAAO,aAAa,CAAA,CAAA;AAAA,GAC3D;AAAA,EAEA,gBACA,GAAA;AAAA,GAMA;AAAA,EAEA,MACA,GAAA;AAAA,GAMA;AAAA;AAAA;AAAA;AAAA,EAKA,iBACA,GAAA;AAAA,GAEA;AAAA,EAEA,OACA,GAAA;AAAA,GAEA;AACJ,CAAA;AAAA;AA9Ja,eAAA,CAGF,SAAY,GAAA;AAAA,EACf,IAAM,EAAA;AAAA,IACF,aAAc,CAAA,WAAA;AAAA,GAClB;AAAA,EACA,IAAM,EAAA,SAAA;AACV,CAAA;;;;"}