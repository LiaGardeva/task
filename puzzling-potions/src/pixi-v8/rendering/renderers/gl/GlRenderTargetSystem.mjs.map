{"version":3,"file":"GlRenderTargetSystem.mjs","sources":["../../../../src/rendering/renderers/gl/GlRenderTargetSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/Matrix';\nimport { isRenderingToScreen } from '../shared/renderTarget/isRenderingToScreen';\nimport { RenderTarget } from '../shared/renderTarget/RenderTarget';\nimport { SystemRunner } from '../shared/system/SystemRunner';\nimport { Texture } from '../shared/texture/Texture';\nimport { getCanvasTexture } from '../shared/texture/utils/getCanvasTexture';\nimport { GlRenderTarget } from './GlRenderTarget';\n\nimport type { ICanvas } from '../../../settings/adapter/ICanvas';\nimport type { RenderSurface, RGBAArray } from '../gpu/renderTarget/GpuRenderTargetSystem';\nimport type { System } from '../shared/system/System';\nimport type { GlRenderingContext } from './context/GlRenderingContext';\nimport type { WebGLRenderer } from './WebGLRenderer';\n\nexport class GlRenderTargetSystem implements System\n{\n    /** @ignore */\n    static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'renderTarget',\n    } as const;\n\n    rootProjectionMatrix: Matrix;\n    renderingToScreen: boolean;\n    rootRenderTarget: RenderTarget;\n    renderTarget: RenderTarget;\n\n    onRenderTargetChange = new SystemRunner('onRenderTargetChange');\n\n    // TODO work on this later!\n    // multiRender = true;\n    private gl: GlRenderingContext;\n\n    private renderSurfaceToRenderTargetHash: Map<RenderSurface, RenderTarget> = new Map();\n    private gpuRenderTargetHash: Record<number, GlRenderTarget> = {};\n\n    private renderer: WebGLRenderer;\n\n    private renderTargetStack: RenderTarget[] = [];\n\n    private defaultClearColor: RGBAArray = [0, 0, 0, 0];\n    private clearColorCache: RGBAArray = [0, 0, 0, 0];\n\n    private viewPortCache = {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n    };\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this.rootProjectionMatrix = new Matrix();\n\n        this.renderer = renderer;\n    }\n\n    contextChange(gl: GlRenderingContext): void\n    {\n        this.gl = gl;\n    }\n\n    start(rootRenderSurface: any, clear = true, clearColor?: RGBAArray): void\n    {\n        this.renderTargetStack.length = 0;\n\n        const renderTarget = this.getRenderTarget(rootRenderSurface);\n\n        this.rootRenderTarget = renderTarget;\n\n        this.renderingToScreen = isRenderingToScreen(this.rootRenderTarget);\n\n        this.rootProjectionMatrix = renderTarget.projectionMatrix;\n\n        this.push(renderTarget, clear, clearColor);\n    }\n\n    renderEnd(): void\n    {\n        this.finish();\n    }\n\n    bind(renderSurface: RenderSurface, clear = true, clearColor?: RGBAArray): RenderTarget\n    {\n        const renderTarget = this.getRenderTarget(renderSurface);\n\n        this.renderTarget = renderTarget;\n\n        const gpuRenderTarget = this.getGpuRenderTarget(renderTarget);\n\n        if (renderTarget.dirtyId !== gpuRenderTarget.dirtyId)\n        {\n            gpuRenderTarget.dirtyId = renderTarget.dirtyId;\n            this.resizeGpuRenderTarget(renderTarget);\n        }\n\n        const gl = this.gl;\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, gpuRenderTarget.framebuffer);\n\n        // unbind the current render texture..\n        renderTarget.colorTextures.forEach((texture) =>\n        {\n            this.renderer.texture.unbind(texture);\n        });\n\n        const viewport = renderTarget.viewport;\n\n        let viewPortY = viewport.y;\n\n        if (renderTarget.isRoot)\n        {\n            // /TODO this is the same logic?\n            viewPortY = this.renderer.view.element.height - viewport.height;\n        }\n\n        const viewPortCache = this.viewPortCache;\n\n        if (viewPortCache.x !== viewport.x\n            || viewPortCache.y !== viewPortY\n            || viewPortCache.width !== viewport.width\n            || viewPortCache.height !== viewport.height)\n        {\n            viewPortCache.x = viewport.x;\n            viewPortCache.y = viewPortY;\n            viewPortCache.width = viewport.width;\n            viewPortCache.height = viewport.height;\n\n            gl.viewport(\n                viewport.x,\n                viewPortY,\n                viewport.width,\n                viewport.height,\n            );\n        }\n\n        if (clear)\n        {\n            const gl = this.gl;\n\n            if (clear)\n            {\n                clearColor = clearColor ?? this.defaultClearColor;\n\n                const clearColorCache = this.clearColorCache;\n\n                if (clearColorCache[0] !== clearColor[0]\n                     || clearColorCache[1] !== clearColor[1]\n                     || clearColorCache[2] !== clearColor[2]\n                     || clearColorCache[3] !== clearColor[3])\n                {\n                    clearColorCache[0] = clearColor[0];\n                    clearColorCache[1] = clearColor[1];\n                    clearColorCache[2] = clearColor[2];\n                    clearColorCache[3] = clearColor[3];\n\n                    gl.clearColor(clearColor[0], clearColor[1], clearColor[2], clearColor[3]);\n                }\n\n                gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);\n            }\n        }\n\n        this.onRenderTargetChange.emit(renderTarget);\n\n        return renderTarget;\n    }\n\n    /**\n     * returns the gpu texture for the first color texture in the render target\n     * mainly used by the filter manager to get copy the texture for blending\n     * @param renderTarget\n     * @returns a gpu texture\n     */\n    getGpuColorTexture(renderTarget: RenderTarget): Texture\n    {\n        return renderTarget.colorTexture;\n    }\n\n    push(renderSurface: RenderSurface, clear = true, clearColor?: RGBAArray)\n    {\n        const renderTarget = this.bind(renderSurface, clear, clearColor);\n\n        this.renderTargetStack.push(renderTarget);\n\n        return renderTarget;\n    }\n\n    pop()\n    {\n        this.renderTargetStack.pop();\n\n        this.bind(this.renderTargetStack[this.renderTargetStack.length - 1], false);\n    }\n\n    getRenderTarget(renderSurface: RenderSurface): RenderTarget\n    {\n        return this.renderSurfaceToRenderTargetHash.get(renderSurface) ?? this.initRenderTarget(renderSurface);\n    }\n\n    private initRenderTarget(renderSurface: RenderSurface): RenderTarget\n    {\n        let renderTarget: RenderTarget = null;\n\n        if (renderSurface instanceof HTMLCanvasElement)\n        {\n            renderSurface = getCanvasTexture(renderSurface as ICanvas);\n        }\n\n        if (renderSurface instanceof RenderTarget)\n        {\n            renderTarget = renderSurface;\n        }\n        else if (renderSurface instanceof Texture)\n        {\n            renderTarget = new RenderTarget({\n                colorTextures: [renderSurface],\n            });\n\n            if (renderSurface.source.resource instanceof HTMLCanvasElement)\n            {\n                renderTarget.isRoot = true;\n            }\n\n            renderSurface.source.on('destroy', () =>\n            {\n                renderTarget.destroy();\n            });\n        }\n\n        this.renderSurfaceToRenderTargetHash.set(renderSurface, renderTarget);\n\n        return renderTarget;\n    }\n\n    finishRenderPass()\n    {\n        const glRenderTarget = this.getGpuRenderTarget(this.renderTarget);\n\n        if (!glRenderTarget.msaa) return;\n\n        const gl = this.renderer.gl;\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, glRenderTarget.resolveTargetFramebuffer);\n        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, glRenderTarget.framebuffer);\n\n        gl.blitFramebuffer(\n            0, 0, glRenderTarget.width, glRenderTarget.height,\n            0, 0, glRenderTarget.width, glRenderTarget.height,\n            gl.COLOR_BUFFER_BIT, gl.NEAREST,\n        );\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, glRenderTarget.framebuffer);\n        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);\n    }\n\n    finish()\n    {\n        // NOTHING TO DO JUST YET..\n    }\n\n    copyToTexture(\n        sourceRenderSurfaceTexture: RenderTarget,\n        destinationTexture: Texture,\n        origin: { x: number; y: number; },\n        size: { width: number; height: number; }\n    )\n    {\n        const renderer = this.renderer;\n\n        const baseTexture = renderer.renderTarget.getGpuColorTexture(sourceRenderSurfaceTexture);\n\n        renderer.renderTarget.bind(baseTexture, false);\n\n        renderer.texture.bind(destinationTexture, 0);\n\n        const gl = renderer.gl;\n\n        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0,\n            0, 0,\n            origin.x,\n            origin.y,\n            size.width,\n            size.height\n        );\n\n        return destinationTexture;\n    }\n\n    private getGpuRenderTarget(renderTarget: RenderTarget)\n    {\n        return this.gpuRenderTargetHash[renderTarget.uid] || this.initGpuRenderTarget(renderTarget);\n    }\n\n    private initGpuRenderTarget(renderTarget: RenderTarget)\n    {\n        const renderer = this.renderer;\n\n        const gl = renderer.gl;\n\n        // do single...\n\n        const glRenderTarget = new GlRenderTarget();\n\n        // we are rendering to a canvas..\n        if (renderTarget.colorTexture.source.resource instanceof HTMLCanvasElement)\n        {\n            this.gpuRenderTargetHash[renderTarget.uid] = glRenderTarget;\n\n            glRenderTarget.framebuffer = null;\n\n            return glRenderTarget;\n        }\n\n        this.initColor(renderTarget, glRenderTarget);\n\n        if (renderTarget.stencil)\n        {\n            this.initStencil(glRenderTarget);\n        }\n\n        // set up a depth texture..\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n        this.gpuRenderTargetHash[renderTarget.uid] = glRenderTarget;\n\n        return glRenderTarget;\n    }\n\n    private resizeGpuRenderTarget(renderTarget: RenderTarget)\n    {\n        if (renderTarget.isRoot) return;\n\n        const glRenderTarget = this.getGpuRenderTarget(renderTarget);\n\n        this.resizeColor(renderTarget, glRenderTarget);\n\n        if (renderTarget.stencil)\n        {\n            this.resizeStencil(glRenderTarget);\n        }\n    }\n\n    private initColor(renderTarget: RenderTarget, glRenderTarget: GlRenderTarget)\n    {\n        const renderer = this.renderer;\n\n        const gl = renderer.gl;\n        // deal with our outputs..\n        const resolveTargetFramebuffer = gl.createFramebuffer();\n\n        glRenderTarget.resolveTargetFramebuffer = resolveTargetFramebuffer;\n\n        // set up the texture..\n        gl.bindFramebuffer(gl.FRAMEBUFFER, resolveTargetFramebuffer);\n\n        glRenderTarget.width = renderTarget.colorTexture.source.pixelWidth;\n        glRenderTarget.height = renderTarget.colorTexture.source.pixelHeight;\n\n        renderTarget.colorTextures.forEach((colorTexture, i) =>\n        {\n            const source = colorTexture.source;\n\n            if (source.antialias)\n            {\n                glRenderTarget.msaa = true;\n            }\n\n            // TODO bindSource could return the glTexture\n            renderer.texture.bindSource(source, 0);\n            const glSource = renderer.texture.getGlSource(source);\n\n            const glTexture = glSource.texture;\n\n            gl.framebufferTexture2D(gl.FRAMEBUFFER,\n                gl.COLOR_ATTACHMENT0 + i,\n                3553, // texture.target,\n                glTexture,\n                0);// mipLevel);\n        });\n\n        if (glRenderTarget.msaa)\n        {\n            const viewFramebuffer = gl.createFramebuffer();\n\n            glRenderTarget.framebuffer = viewFramebuffer;\n\n            gl.bindFramebuffer(gl.FRAMEBUFFER, viewFramebuffer);\n\n            renderTarget.colorTextures.forEach((_, i) =>\n            {\n                const msaaRenderBuffer = gl.createRenderbuffer();\n\n                glRenderTarget.msaaRenderBuffer[i] = msaaRenderBuffer;\n            });\n        }\n        else\n        {\n            glRenderTarget.framebuffer = resolveTargetFramebuffer;\n        }\n    }\n\n    private resizeColor(renderTarget: RenderTarget, glRenderTarget: GlRenderTarget)\n    {\n        const source = renderTarget.colorTexture.source;\n\n        glRenderTarget.width = source.pixelWidth;\n        glRenderTarget.height = source.pixelHeight;\n\n        renderTarget.colorTextures.forEach((colorTexture, i) =>\n        {\n            // nno need to resize the first texture..\n            if (i === 0) return;\n\n            colorTexture.source.resize(source.width, source.height, source._resolution);\n        });\n\n        if (glRenderTarget.msaa)\n        {\n            const renderer = this.renderer;\n            const gl = renderer.gl;\n\n            const viewFramebuffer = glRenderTarget.framebuffer;\n\n            gl.bindFramebuffer(gl.FRAMEBUFFER, viewFramebuffer);\n\n            renderTarget.colorTextures.forEach((colorTexture, i) =>\n            {\n                const source = colorTexture.source;\n\n                renderer.texture.bindSource(source, 0);\n                const glSource = renderer.texture.getGlSource(source);\n\n                const glInternalFormat = glSource.internalFormat;\n\n                const msaaRenderBuffer = glRenderTarget.msaaRenderBuffer[i];\n\n                gl.bindRenderbuffer(\n                    gl.RENDERBUFFER,\n                    msaaRenderBuffer\n                );\n\n                gl.renderbufferStorageMultisample(\n                    gl.RENDERBUFFER,\n                    4,\n                    glInternalFormat,\n                    source.pixelWidth,\n                    source.pixelHeight\n                );\n\n                gl.framebufferRenderbuffer(\n                    gl.FRAMEBUFFER,\n                    gl.COLOR_ATTACHMENT0 + i,\n                    gl.RENDERBUFFER,\n                    msaaRenderBuffer\n                );\n            });\n        }\n    }\n\n    private initStencil(glRenderTarget: GlRenderTarget)\n    {\n        const gl = this.renderer.gl;\n\n        const depthStencilRenderBuffer = gl.createRenderbuffer();\n\n        glRenderTarget.depthStencilRenderBuffer = depthStencilRenderBuffer;\n\n        gl.bindRenderbuffer(\n            gl.RENDERBUFFER,\n            depthStencilRenderBuffer\n        );\n\n        gl.framebufferRenderbuffer(\n            gl.FRAMEBUFFER,\n            gl.DEPTH_STENCIL_ATTACHMENT,\n            gl.RENDERBUFFER,\n            depthStencilRenderBuffer\n        );\n    }\n\n    private resizeStencil(glRenderTarget: GlRenderTarget)\n    {\n        const gl = this.renderer.gl;\n\n        gl.bindRenderbuffer(\n            gl.RENDERBUFFER,\n            glRenderTarget.depthStencilRenderBuffer\n        );\n\n        if (glRenderTarget.msaa)\n        {\n            gl.renderbufferStorageMultisample(\n                gl.RENDERBUFFER,\n                4,\n                gl.DEPTH24_STENCIL8,\n                glRenderTarget.width,\n                glRenderTarget.height\n            );\n        }\n        else\n        {\n            gl.renderbufferStorage(\n                gl.RENDERBUFFER,\n                gl.DEPTH_STENCIL,\n                glRenderTarget.width,\n                glRenderTarget.height\n            );\n        }\n    }\n\n    destroy()\n    {\n        //\n    }\n}\n\n// finish(): void\n// {\n//     this.gl.finish();\n\n//     // TODO - implement this properly\n//     // if (this.renderer.view.multiView)\n//     // {\n//     //     const renderTarget = this.rootRenderTarget;\n\n//     //     // now copy it to where it needs to be!\n//     //     if (renderTarget.isRoot)\n//     //     {\n//     //\n//     //         // const canvas = renderTarget.colorTexture.source.resource;\n\n//     //         // if (!renderTarget.copyContext)\n//     //         // {\n//     //         //     renderTarget.copyContext = canvas.getContext('2d');\n//     //         // }\n\n//     //         // renderTarget.copyContext.drawImage(\n//     //         //     this.renderer.view.element,\n//     //         //     0, 0,\n//     //         // );\n//     //     }\n//     // }\n// }\n"],"names":["gl","source"],"mappings":"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"}