{"version":3,"file":"GlBufferSystem.js","sources":["../../../../../src/rendering/renderers/gl/buffer/GlBufferSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../../../extensions/Extensions';\nimport { BufferUsage } from '../../shared/buffer/const';\nimport { BUFFER_TYPE } from './const';\nimport { GlBuffer } from './GlBuffer';\n\nimport type { Buffer } from '../../shared/buffer/Buffer';\nimport type { System } from '../../shared/system/System';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\nimport type { WebGLRenderer } from '../WebGLRenderer';\n\n/**\n * System plugin to the renderer to manage buffers.\n *\n * WebGL uses Buffers as a way to store objects to the GPU.\n * This system makes working with them a lot easier.\n *\n * Buffers are used in three main places in WebGL\n * - geometry information\n * - Uniform information (via uniform buffer objects - a WebGL 2 only feature)\n * - Transform feedback information. (WebGL 2 only feature)\n *\n * This system will handle the binding of buffers to the GPU as well as uploading\n * them. With this system, you never need to work directly with GPU buffers, but instead work with\n * the PIXI.Buffer class.\n * @class\n * @memberof PIXI\n */\nexport class GlBufferSystem implements System\n{\n    /** @ignore */\n    static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'buffer',\n    } as const;\n\n    private gl: GlRenderingContext;\n\n    private _gpuBuffers: {[key: number]: GlBuffer} = {};\n\n    /** Cache keeping track of the base bound buffer bases */\n    private readonly boundBufferBases: {[key: number]: Buffer};\n\n    private renderer: WebGLRenderer;\n\n    /**\n     * @param {PIXI.Renderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer: WebGLRenderer)\n    {\n        this.renderer = renderer;\n        this.boundBufferBases = {};\n    }\n\n    /**\n     * @ignore\n     */\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    protected contextChange(): void\n    {\n        this.destroyAll(true);\n\n        this.gl = this.renderer.gl;\n    }\n\n    getGlBuffer(buffer: Buffer): GlBuffer\n    {\n        return this._gpuBuffers[buffer.uid] || this.createGLBuffer(buffer);\n    }\n\n    /**\n     * This binds specified buffer. On first run, it will create the webGL buffers for the context too\n     * @param buffer - the buffer to bind to the renderer\n     */\n    bind(buffer: Buffer): void\n    {\n        const { gl } = this;\n\n        const glBuffer = this.getGlBuffer(buffer);\n\n        gl.bindBuffer(glBuffer.type, glBuffer.buffer);\n    }\n\n    /**\n     * Binds an uniform buffer to at the given index.\n     *\n     * A cache is used so a buffer will not be bound again if already bound.\n     * @param buffer - the buffer to bind\n     * @param index - the base index to bind it to.\n     */\n    bindBufferBase(buffer: Buffer, index: number): void\n    {\n        const { gl } = this;\n\n        if (this.boundBufferBases[index] !== buffer)\n        {\n            const glBuffer = this.getGlBuffer(buffer);\n\n            this.boundBufferBases[index] = buffer;\n\n            gl.bindBufferBase(gl.UNIFORM_BUFFER, index, glBuffer.buffer);\n        }\n    }\n\n    /**\n     * Binds a buffer whilst also binding its range.\n     * This will make the buffer start from the offset supplied rather than 0 when it is read.\n     * @param buffer - the buffer to bind\n     * @param index - the base index to bind at, defaults to 0\n     * @param offset - the offset to bind at (this is blocks of 256). 0 = 0, 1 = 256, 2 = 512 etc\n     */\n    bindBufferRange(buffer: Buffer, index?: number, offset?: number): void\n    {\n        const { gl } = this;\n\n        offset = offset || 0;\n\n        const glBuffer = this.getGlBuffer(buffer);\n\n        gl.bindBufferRange(gl.UNIFORM_BUFFER, index || 0, glBuffer.buffer, offset * 256, 256);\n    }\n\n    /**\n     * Will ensure the data in the buffer is uploaded to the GPU.\n     * @param {PIXI.Buffer} buffer - the buffer to update\n     */\n    updateBuffer(buffer: Buffer): GlBuffer\n    {\n        const { gl } = this;\n\n        const glBuffer = this.getGlBuffer(buffer);\n\n        if (buffer._updateID === glBuffer.updateID)\n        {\n            return glBuffer;\n        }\n\n        glBuffer.updateID = buffer._updateID;\n\n        gl.bindBuffer(glBuffer.type, glBuffer.buffer);\n\n        if (glBuffer.byteLength >= buffer.data.byteLength)\n        {\n            // assuming our buffers are aligned to 4 bits...\n            // offset is always zero for now!\n            gl.bufferSubData(glBuffer.type, 0, buffer.data, 0, buffer._updateSize / 4);\n        }\n        else\n        {\n            const drawType = (buffer.descriptor.usage & BufferUsage.STATIC) ? gl.STATIC_DRAW : gl.DYNAMIC_DRAW;\n\n            glBuffer.byteLength = buffer.data.byteLength;\n\n            // assuming our buffers are aligned to 4 bits...\n            gl.bufferData(glBuffer.type, buffer.data, drawType);\n        }\n\n        return glBuffer;\n    }\n\n    /**\n     * dispose all WebGL resources of all managed buffers\n     * @param {boolean} [contextLost=false] - If context was lost, we suppress `gl.delete` calls\n     */\n    destroyAll(contextLost?: boolean): void\n    {\n        const gl = this.gl;\n\n        if (!contextLost)\n        {\n            for (const id in this._gpuBuffers)\n            {\n                gl.deleteBuffer(this._gpuBuffers[id].buffer);\n            }\n        }\n\n        this._gpuBuffers = {};\n    }\n\n    /**\n     * Disposes buffer\n     * @param {Buffer} buffer - buffer with data\n     * @param {boolean} [contextLost=false] - If context was lost, we suppress deleteVertexArray\n     */\n    protected onBufferDestroy(buffer: Buffer, contextLost?: boolean): void\n    {\n        const glBuffer = this._gpuBuffers[buffer.uid];\n\n        const gl = this.gl;\n\n        if (!contextLost)\n        {\n            gl.deleteBuffer(glBuffer.buffer);\n        }\n\n        this._gpuBuffers[buffer.uid] = null;\n    }\n\n    /**\n     * creates and attaches a GLBuffer object tied to the current context.\n     * @param buffer\n     * @protected\n     */\n    protected createGLBuffer(buffer: Buffer): GlBuffer\n    {\n        const { gl } = this;\n\n        let type = BUFFER_TYPE.ARRAY_BUFFER;\n\n        if ((buffer.descriptor.usage & BufferUsage.INDEX))\n        {\n            type = BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;\n        }\n        else if ((buffer.descriptor.usage & BufferUsage.UNIFORM))\n        {\n            type = BUFFER_TYPE.UNIFORM_BUFFER;\n        }\n\n        const glBuffer = new GlBuffer(gl.createBuffer(), type);\n\n        this._gpuBuffers[buffer.uid] = glBuffer;\n\n        buffer.on('destroy', this.onBufferDestroy, this);\n\n        return glBuffer;\n    }\n}\n"],"names":["BufferUsage","BUFFER_TYPE","GlBuffer","ExtensionType"],"mappings":"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"}