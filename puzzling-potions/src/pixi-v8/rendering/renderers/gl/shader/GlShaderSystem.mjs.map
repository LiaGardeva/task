{"version":3,"file":"GlShaderSystem.mjs","sources":["../../../../../src/rendering/renderers/gl/shader/GlShaderSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../../../extensions/Extensions';\nimport { BufferResource } from '../../shared/buffer/BufferResource';\nimport { UniformGroup } from '../../shared/shader/UniformGroup';\nimport { TextureSource } from '../../shared/texture/sources/TextureSource';\nimport { TextureStyle } from '../../shared/texture/TextureStyle';\nimport { generateProgram } from './program/generateProgram';\n\nimport type { Shader } from '../../shared/shader/Shader';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\nimport type { WebGLRenderer } from '../WebGLRenderer';\nimport type { GlProgram } from './GlProgram';\nimport type { GlProgramData } from './GlProgramData';\n\n// default sync data so we don't create a new one each time!\nconst defaultSyncData = {\n    textureCount: 0,\n    blockIndex: 0,\n};\n\nexport class GlShaderSystem\n{\n    /** @ignore */\n    static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'shader',\n    } as const;\n\n    programDataHash: Record<string, GlProgramData> = {};\n    renderer: WebGLRenderer;\n    gl: WebGL2RenderingContext;\n\n    activeProgram: GlProgram = null;\n    maxBindings: number;\n    nextIndex = 0;\n    boundUniformsIdsToIndexHash: Record<number, number> = {};\n    boundIndexToUniformsHash: Record<number, UniformGroup | BufferResource> = {};\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this.renderer = renderer;\n    }\n\n    contextChange(gl: GlRenderingContext): void\n    {\n        this.gl = gl;\n\n        this.maxBindings = gl.getParameter(gl.MAX_UNIFORM_BUFFER_BINDINGS);\n    }\n\n    bind(shader: Shader, skipSync?: boolean): void\n    {\n        this.setProgram(shader.glProgram);\n\n        if (skipSync) return;\n\n        defaultSyncData.textureCount = 0;\n        defaultSyncData.blockIndex = 0;\n\n        const gl = this.gl;\n\n        const programData = this.getProgramData(shader.glProgram);\n\n        // loop through the groups and sync everything...\n        for (const i in shader.groups)\n        {\n            const bindGroup = shader.groups[i];\n\n            for (const j in bindGroup.resources)\n            {\n                const resource = bindGroup.resources[j];\n\n                if (resource instanceof UniformGroup)\n                {\n                    if (resource.ubo)\n                    {\n                        this.bindUniformBlock(\n                            resource,\n                            shader.uniformBindMap[i as unknown as number][j as unknown as number],\n                            defaultSyncData.blockIndex++\n                        );\n                    }\n                    else\n                    {\n                        this.updateUniformGroup(resource);\n                    }\n                }\n                else if (resource instanceof BufferResource)\n                {\n                    this.bindUniformBlock(\n                        resource,\n                        shader.uniformBindMap[i as unknown as number][j as unknown as number],\n                        defaultSyncData.blockIndex++\n                    );\n                }\n                else if (resource instanceof TextureSource)\n                {\n                    // TODO really we should not be binding the sampler here too\n                    this.renderer.texture.bind(resource, defaultSyncData.textureCount);\n\n                    const uniformName = shader.uniformBindMap[i as unknown as number][j as unknown as number];\n\n                    const uniformData = programData.uniformData[uniformName];\n\n                    if (uniformData)\n                    {\n                        gl.uniform1i(uniformData.location, defaultSyncData.textureCount++);\n                    }\n                }\n                else if (resource instanceof TextureStyle)\n                {\n                    // TODO not doing anything here works is assuming that textures are bound with the style they own.\n                    // this.renderer.texture.bindSampler(resource, defaultSyncData.textureCount);\n                }\n            }\n        }\n    }\n\n    updateUniformGroup(uniformGroup: UniformGroup): void\n    {\n        this.renderer.uniformGroup.updateUniformGroup(uniformGroup, this.activeProgram, defaultSyncData);\n    }\n\n    bindUniformBlock(uniformGroup: UniformGroup | BufferResource, name: string, index = 0): void\n    {\n        const bufferSystem = this.renderer.buffer;\n        const programData = this.getProgramData(this.activeProgram);\n\n        const isBufferResource = (uniformGroup as BufferResource).bufferResource;\n\n        if (isBufferResource)\n        {\n            this.renderer.uniformBuffer.updateUniformGroup(uniformGroup as UniformGroup);\n        }\n\n        bufferSystem.updateBuffer(uniformGroup.buffer);\n\n        let boundIndex = this.boundUniformsIdsToIndexHash[uniformGroup.uid];\n\n        // check if it is already bound..\n        if (boundIndex === undefined)\n        {\n            const nextIndex = this.nextIndex++ % this.maxBindings;\n\n            const currentBoundUniformGroup = this.boundIndexToUniformsHash[nextIndex];\n\n            if (currentBoundUniformGroup)\n            {\n                this.boundUniformsIdsToIndexHash[currentBoundUniformGroup.uid] = undefined;\n            }\n\n            // find a free slot..\n            boundIndex = this.boundUniformsIdsToIndexHash[uniformGroup.uid] = nextIndex;\n            this.boundIndexToUniformsHash[nextIndex] = uniformGroup;\n\n            if (isBufferResource)\n            {\n                bufferSystem.bindBufferRange(uniformGroup.buffer, nextIndex, (uniformGroup as BufferResource).offset);\n            }\n            else\n            {\n                bufferSystem.bindBufferBase(uniformGroup.buffer, nextIndex);\n            }\n        }\n\n        const gl = this.gl;\n\n        const uniformBlockIndex = this.activeProgram.uniformBlockData[name].index;\n\n        if (programData.uniformBlockBindings[index] === boundIndex) return;\n        programData.uniformBlockBindings[index] = boundIndex;\n\n        gl.uniformBlockBinding(programData.program, uniformBlockIndex, boundIndex);\n    }\n\n    setProgram(program: GlProgram)\n    {\n        if (this.activeProgram === program) return;\n\n        this.activeProgram = program;\n\n        const programData = this.getProgramData(program);\n\n        this.gl.useProgram(programData.program);\n    }\n\n    getProgramData(program: GlProgram): GlProgramData\n    {\n        const key = program.key;\n\n        return this.programDataHash[key] || this.createProgramData(program);\n    }\n\n    createProgramData(program: GlProgram): GlProgramData\n    {\n        const key = program.key;\n\n        this.programDataHash[key] = generateProgram(this.gl, program);\n\n        return this.programDataHash[key];\n    }\n}\n"],"names":[],"mappings":"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"}