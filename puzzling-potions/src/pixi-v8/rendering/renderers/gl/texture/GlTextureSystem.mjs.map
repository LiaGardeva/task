{"version":3,"file":"GlTextureSystem.mjs","sources":["../../../../../src/rendering/renderers/gl/texture/GlTextureSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../../../extensions/Extensions';\nimport { Texture } from '../../shared/texture/Texture';\nimport { GlTexture } from './GlTexture';\nimport { glUploadBufferImageResource } from './uploaders/glUploadBufferImageResource';\nimport { glUploadImageResource } from './uploaders/glUploadImageResource';\nimport { mapFormatToGlFormat } from './utils/mapFormatToGlFormat';\nimport { mapFormatToGlInternalFormat } from './utils/mapFormatToGlInternalFormat';\nimport { mapFormatToGlType } from './utils/mapFormatToGlType';\nimport {\n    compareModeToGlCompare,\n    mipmapScaleModeToGlFilter,\n    scaleModeToGlFilter,\n    wrapModeToGlAddress\n} from './utils/pixiToGlMaps';\n\nimport type { System } from '../../shared/system/System';\nimport type { TextureSource } from '../../shared/texture/sources/TextureSource';\nimport type { BindableTexture } from '../../shared/texture/Texture';\nimport type { TextureStyle } from '../../shared/texture/TextureStyle';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\nimport type { WebGLRenderer } from '../WebGLRenderer';\nimport type { GLTextureUploader } from './uploaders/GLTextureUploader';\n\nexport class GlTextureSystem implements System\n{\n    /** @ignore */\n    static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'texture',\n    } as const;\n\n    readonly renderer: WebGLRenderer;\n\n    glTextures: Record<number, GlTexture> = {};\n    glSamplers: Record<string, WebGLSampler> = {};\n\n    boundTextures: TextureSource[] = [];\n    boundTexturesSamplers: number[] = [];\n    activeTextureLocation = -1;\n\n    boundSamplers: Record<number, WebGLSampler> = {};\n\n    managedTextureSources: Record<number, TextureSource> = {};\n\n    uploads: Record<string, GLTextureUploader> = {\n        image: glUploadImageResource,\n        buffer: glUploadBufferImageResource\n    };\n\n    gl: GlRenderingContext;\n    mapFormatToInternalFormat: Record<string, number>;\n    mapFormatToType: Record<string, number>;\n    mapFormatToFormat: Record<string, number>;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this.renderer = renderer;\n    }\n\n    protected contextChange(gl: GlRenderingContext): void\n    {\n        this.gl = gl;\n\n        if (!this.mapFormatToInternalFormat)\n        {\n            this.mapFormatToInternalFormat = mapFormatToGlInternalFormat(gl);\n            this.mapFormatToType = mapFormatToGlType(gl);\n            this.mapFormatToFormat = mapFormatToGlFormat(gl);\n        }\n\n        for (let i = 0; i < 16; i++)\n        {\n            this.bind(Texture.EMPTY, i);\n        }\n    }\n\n    bind(texture: BindableTexture, location = 0)\n    {\n        // if (this.boundTexturesSamplers[location] === texture.styleSourceKey) return;\n\n        // this.boundTexturesSamplers[location] = texture.styleSourceKey;\n\n        if (texture)\n        {\n            this.bindSource(texture.source, location);\n            this.bindSampler(texture.style, location);\n        }\n        else\n        {\n            this.bindSource(null, location);\n            this.bindSampler(null, location);\n        }\n    }\n\n    bindSource(source: TextureSource, location = 0): void\n    {\n        const gl = this.gl;\n\n        if (this.boundTextures[location] !== source)\n        {\n            this.boundTextures[location] = source;\n            this.activateLocation(location);\n\n            source = source || Texture.EMPTY.source;\n\n            // bind texture and source!\n            const glTexture = this.getGlSource(source);\n\n            gl.bindTexture(glTexture.target, glTexture.texture);\n        }\n    }\n\n    bindSampler(style: TextureStyle, location = 0): void\n    {\n        const gl = this.gl;\n\n        if (!style)\n        {\n            this.boundSamplers[location] = null;\n            gl.bindSampler(location, null);\n\n            return;\n        }\n\n        const sampler = this.getGlSampler(style);\n\n        if (this.boundSamplers[location] !== sampler)\n        {\n            this.boundSamplers[location] = sampler;\n            gl.bindSampler(location, sampler);\n        }\n    }\n\n    unbind(texture: Texture): void\n    {\n        const source = texture.source;\n        const boundTextures = this.boundTextures;\n        const gl = this.gl;\n\n        for (let i = 0; i < boundTextures.length; i++)\n        {\n            if (boundTextures[i] === source)\n            {\n                this.activateLocation(i);\n\n                const glTexture = this.getGlSource(source);\n\n                gl.bindTexture(glTexture.target, null);\n                boundTextures[i] = null;\n            }\n        }\n    }\n\n    activateLocation(location: number): void\n    {\n        if (this.activeTextureLocation !== location)\n        {\n            this.activeTextureLocation = location;\n            this.gl.activeTexture(this.gl.TEXTURE0 + location);\n        }\n    }\n\n    public initSource(source: TextureSource): GlTexture\n    {\n        const gl = this.gl;\n\n        const glTexture = new GlTexture(gl.createTexture());\n\n        glTexture.type = this.mapFormatToType[source.format];\n        glTexture.internalFormat = this.mapFormatToInternalFormat[source.format];\n        glTexture.format = this.mapFormatToFormat[source.format];\n\n        if (source.autoGenerateMipmaps)\n        {\n            const biggestDimension = Math.max(source.width, source.height);\n\n            source.mipLevelCount = Math.floor(Math.log2(biggestDimension)) + 1;\n        }\n\n        this.glTextures[source.uid] = glTexture;\n\n        source.on('update', this.onSourceUpdate, this);\n        source.on('destroy', this.onSourceDestroy, this);\n\n        this.onSourceUpdate(source);\n\n        return glTexture;\n    }\n\n    onSourceUpdate(source: TextureSource): void\n    {\n        const gl = this.gl;\n\n        const glTexture = this.glTextures[source.uid];\n\n        gl.bindTexture(gl.TEXTURE_2D, glTexture.texture);\n\n        this.boundTextures[this.activeTextureLocation] = source;\n\n        if (this.uploads[source.type])\n        {\n            this.uploads[source.type].upload(source, glTexture, this.gl);\n\n            if (source.autoGenerateMipmaps && source.mipLevelCount > 1)\n            {\n                gl.generateMipmap(glTexture.target);\n            }\n        }\n        else\n        {\n            // eslint-disable-next-line max-len\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, source.pixelWidth, source.pixelHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n        }\n    }\n\n    onSourceDestroy(source: TextureSource): void\n    {\n        const gl = this.gl;\n\n        source.off('destroy', this.onSourceDestroy, this);\n        source.off('update', this.onSourceUpdate, this);\n\n        const glTexture = this.glTextures[source.uid];\n\n        delete this.glTextures[source.uid];\n\n        gl.deleteTexture(glTexture.target);\n    }\n\n    initSampler(style: TextureStyle): WebGLSampler\n    {\n        const gl = this.gl;\n\n        const glSampler = this.gl.createSampler();\n\n        this.glSamplers[style.resourceId] = glSampler;\n\n        // 1. set the wrapping mode\n        gl.samplerParameteri(glSampler, gl.TEXTURE_WRAP_S, wrapModeToGlAddress[style.addressModeU]);\n        gl.samplerParameteri(glSampler, gl.TEXTURE_WRAP_T, wrapModeToGlAddress[style.addressModeV]);\n        gl.samplerParameteri(glSampler, gl.TEXTURE_WRAP_R, wrapModeToGlAddress[style.addressModeW]);\n\n        // 2. set the filtering mode\n        gl.samplerParameteri(glSampler, gl.TEXTURE_MAG_FILTER, scaleModeToGlFilter[style.minFilter]);\n\n        // assuming the currently bound texture is the one we want to set the filter for\n        // the only smelly part of this code, WebGPU is much better here :P\n        if (this.boundTextures[this.activeTextureLocation].mipLevelCount > 1)\n        {\n            const glFilterMode = mipmapScaleModeToGlFilter[style.minFilter][style.mipmapFilter];\n\n            gl.samplerParameteri(glSampler, gl.TEXTURE_MIN_FILTER, glFilterMode);\n        }\n        else\n        {\n            gl.samplerParameteri(glSampler, gl.TEXTURE_MIN_FILTER, scaleModeToGlFilter[style.magFilter]);\n        }\n\n        // 3. set the anisotropy\n        const anisotropicExt = this.renderer.context.extensions.anisotropicFiltering;\n\n        if (anisotropicExt && style.maxAnisotropy > 1)\n        {\n            const level = Math.min(style.maxAnisotropy, gl.getParameter(anisotropicExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT));\n\n            gl.samplerParameteri(glSampler, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, level);\n        }\n\n        // 4. set the compare mode\n        if (style.compare)\n        {\n            gl.samplerParameteri(glSampler, gl.TEXTURE_COMPARE_FUNC, compareModeToGlCompare[style.compare]);\n        }\n\n        return this.glSamplers[style.resourceId];\n    }\n\n    getGlSampler(sampler: TextureStyle): WebGLSampler\n    {\n        return this.glSamplers[sampler.resourceId] || this.initSampler(sampler);\n    }\n\n    getGlSource(source: TextureSource): GlTexture\n    {\n        return this.glTextures[source.uid] || this.initSource(source);\n    }\n\n    destroy(): void\n    {\n        throw new Error('Method not implemented.');\n    }\n}\n"],"names":[],"mappings":"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"}