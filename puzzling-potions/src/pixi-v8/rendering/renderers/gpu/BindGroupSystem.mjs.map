{"version":3,"file":"BindGroupSystem.mjs","sources":["../../../../src/rendering/renderers/gpu/BindGroupSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { Buffer } from '../shared/buffer/Buffer';\nimport type { BufferResource } from '../shared/buffer/BufferResource';\nimport type { UniformGroup } from '../shared/shader/UniformGroup';\nimport type { System } from '../shared/system/System';\nimport type { TextureSource } from '../shared/texture/sources/TextureSource';\nimport type { TextureStyle } from '../shared/texture/TextureStyle';\nimport type { GPU } from './GpuDeviceSystem';\nimport type { BindGroup } from './shader/BindGroup';\nimport type { BindResource } from './shader/BindResource';\nimport type { GpuProgram } from './shader/GpuProgram';\nimport type { WebGPURenderer } from './WebGPURenderer';\n\nexport class BindGroupSystem implements System\n{\n    /** @ignore */\n    static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'bindGroup',\n    } as const;\n\n    private readonly renderer: WebGPURenderer;\n\n    private hash: Record<string, GPUBindGroup> = {};\n    private gpu: GPU;\n\n    // TODO implement a way to tidy up unused bind groups!\n    // private bindGroupCount = 0;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        this.renderer = renderer;\n    }\n\n    protected contextChange(gpu: GPU): void\n    {\n        this.gpu = gpu;\n    }\n\n    getBindGroup(bindGroup: BindGroup, program: GpuProgram, groupIndex: number): GPUBindGroup\n    {\n        bindGroup.updateKey();\n\n        const gpuBindGroup = this.hash[bindGroup.key] || this.createBindGroup(bindGroup, program, groupIndex);\n\n        // TODO update the usageTick - and destroy unused ones!\n        // bindGroup.usageTick\n\n        return gpuBindGroup;\n    }\n\n    private createBindGroup(group: BindGroup, program: GpuProgram, groupIndex: number): GPUBindGroup\n    {\n        // this.bindGroupCount++;\n\n        const device = this.gpu.device;\n        const groupLayout = program.layout[groupIndex];\n        const entries: GPUBindGroupEntry[] = [];\n\n        for (const j in groupLayout)\n        {\n            const resource: BindResource = group.resources[j] ?? group.resources[groupLayout[j]];\n            let gpuResource: GPUSampler | GPUTextureView | GPUExternalTexture | GPUBufferBinding;\n            // TODO make this dynamic..\n\n            if (resource.resourceType === 'uniformGroup')\n            {\n                const uniformGroup = resource as UniformGroup;\n\n                this.renderer.uniformBuffer.updateUniformGroup(uniformGroup as UniformGroup);\n\n                const buffer = uniformGroup.buffer;\n\n                gpuResource = {\n                    buffer: this.renderer.buffer.getGPUBuffer(buffer),\n                    offset: 0,\n                    size: buffer.descriptor.size,\n                };\n            }\n            else if (resource.resourceType === 'buffer')\n            {\n                const buffer = resource as Buffer;\n\n                gpuResource = {\n                    buffer: this.renderer.buffer.getGPUBuffer(buffer),\n                    offset: 0,\n                    size: buffer.descriptor.size,\n                };\n            }\n            else if (resource.resourceType === 'bufferResource')\n            {\n                const bufferResource = resource as BufferResource;\n\n                gpuResource = {\n                    buffer: this.renderer.buffer.getGPUBuffer(bufferResource.buffer),\n                    offset: bufferResource.offset,\n                    size: bufferResource.size,\n                };\n            }\n            else if (resource.resourceType === 'textureSampler')\n            {\n                const sampler = resource as TextureStyle;\n\n                gpuResource = this.renderer.texture.getGpuSampler(sampler);\n            }\n            else if (resource.resourceType === 'textureSource')\n            {\n                const texture = resource as TextureSource;\n\n                gpuResource = this.renderer.texture.getGpuSource(texture).createView({\n\n                });\n            }\n\n            entries.push({\n                binding: groupLayout[j],\n                resource: gpuResource,\n            });\n        }\n\n        const gpuBindGroup = device.createBindGroup({\n            layout: program._gpuLayout.bindGroups[groupIndex],\n            entries,\n        });\n\n        this.hash[group.key] = gpuBindGroup;\n\n        return gpuBindGroup;\n    }\n\n    destroy(): void\n    {\n        // boom!\n    }\n}\n"],"names":[],"mappings":";;AAcO,MAAM,eACb,CAAA;AAAA;AAAA;AAAA,EAiBI,YAAY,QACZ,EAAA;AAPA,IAAA,IAAA,CAAQ,OAAqC,EAAC,CAAA;AAQ1C,IAAA,IAAA,CAAK,QAAW,GAAA,QAAA,CAAA;AAAA,GACpB;AAAA,EAEU,cAAc,GACxB,EAAA;AACI,IAAA,IAAA,CAAK,GAAM,GAAA,GAAA,CAAA;AAAA,GACf;AAAA,EAEA,YAAA,CAAa,SAAsB,EAAA,OAAA,EAAqB,UACxD,EAAA;AACI,IAAA,SAAA,CAAU,SAAU,EAAA,CAAA;AAEpB,IAAM,MAAA,YAAA,GAAe,IAAK,CAAA,IAAA,CAAK,SAAU,CAAA,GAAG,KAAK,IAAK,CAAA,eAAA,CAAgB,SAAW,EAAA,OAAA,EAAS,UAAU,CAAA,CAAA;AAKpG,IAAO,OAAA,YAAA,CAAA;AAAA,GACX;AAAA,EAEQ,eAAA,CAAgB,KAAkB,EAAA,OAAA,EAAqB,UAC/D,EAAA;AAGI,IAAM,MAAA,MAAA,GAAS,KAAK,GAAI,CAAA,MAAA,CAAA;AACxB,IAAM,MAAA,WAAA,GAAc,OAAQ,CAAA,MAAA,CAAO,UAAU,CAAA,CAAA;AAC7C,IAAA,MAAM,UAA+B,EAAC,CAAA;AAEtC,IAAA,KAAA,MAAW,KAAK,WAChB,EAAA;AACI,MAAM,MAAA,QAAA,GAAyB,MAAM,SAAU,CAAA,CAAC,KAAK,KAAM,CAAA,SAAA,CAAU,WAAY,CAAA,CAAC,CAAC,CAAA,CAAA;AACnF,MAAI,IAAA,WAAA,CAAA;AAGJ,MAAI,IAAA,QAAA,CAAS,iBAAiB,cAC9B,EAAA;AACI,QAAA,MAAM,YAAe,GAAA,QAAA,CAAA;AAErB,QAAK,IAAA,CAAA,QAAA,CAAS,aAAc,CAAA,kBAAA,CAAmB,YAA4B,CAAA,CAAA;AAE3E,QAAA,MAAM,SAAS,YAAa,CAAA,MAAA,CAAA;AAE5B,QAAc,WAAA,GAAA;AAAA,UACV,MAAQ,EAAA,IAAA,CAAK,QAAS,CAAA,MAAA,CAAO,aAAa,MAAM,CAAA;AAAA,UAChD,MAAQ,EAAA,CAAA;AAAA,UACR,IAAA,EAAM,OAAO,UAAW,CAAA,IAAA;AAAA,SAC5B,CAAA;AAAA,OACJ,MAAA,IACS,QAAS,CAAA,YAAA,KAAiB,QACnC,EAAA;AACI,QAAA,MAAM,MAAS,GAAA,QAAA,CAAA;AAEf,QAAc,WAAA,GAAA;AAAA,UACV,MAAQ,EAAA,IAAA,CAAK,QAAS,CAAA,MAAA,CAAO,aAAa,MAAM,CAAA;AAAA,UAChD,MAAQ,EAAA,CAAA;AAAA,UACR,IAAA,EAAM,OAAO,UAAW,CAAA,IAAA;AAAA,SAC5B,CAAA;AAAA,OACJ,MAAA,IACS,QAAS,CAAA,YAAA,KAAiB,gBACnC,EAAA;AACI,QAAA,MAAM,cAAiB,GAAA,QAAA,CAAA;AAEvB,QAAc,WAAA,GAAA;AAAA,UACV,QAAQ,IAAK,CAAA,QAAA,CAAS,MAAO,CAAA,YAAA,CAAa,eAAe,MAAM,CAAA;AAAA,UAC/D,QAAQ,cAAe,CAAA,MAAA;AAAA,UACvB,MAAM,cAAe,CAAA,IAAA;AAAA,SACzB,CAAA;AAAA,OACJ,MAAA,IACS,QAAS,CAAA,YAAA,KAAiB,gBACnC,EAAA;AACI,QAAA,MAAM,OAAU,GAAA,QAAA,CAAA;AAEhB,QAAA,WAAA,GAAc,IAAK,CAAA,QAAA,CAAS,OAAQ,CAAA,aAAA,CAAc,OAAO,CAAA,CAAA;AAAA,OAC7D,MAAA,IACS,QAAS,CAAA,YAAA,KAAiB,eACnC,EAAA;AACI,QAAA,MAAM,OAAU,GAAA,QAAA,CAAA;AAEhB,QAAc,WAAA,GAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,YAAA,CAAa,OAAO,CAAE,CAAA,UAAA,CAAW,EAEpE,CAAA,CAAA;AAAA,OACL;AAEA,MAAA,OAAA,CAAQ,IAAK,CAAA;AAAA,QACT,OAAA,EAAS,YAAY,CAAC,CAAA;AAAA,QACtB,QAAU,EAAA,WAAA;AAAA,OACb,CAAA,CAAA;AAAA,KACL;AAEA,IAAM,MAAA,YAAA,GAAe,OAAO,eAAgB,CAAA;AAAA,MACxC,MAAQ,EAAA,OAAA,CAAQ,UAAW,CAAA,UAAA,CAAW,UAAU,CAAA;AAAA,MAChD,OAAA;AAAA,KACH,CAAA,CAAA;AAED,IAAK,IAAA,CAAA,IAAA,CAAK,KAAM,CAAA,GAAG,CAAI,GAAA,YAAA,CAAA;AAEvB,IAAO,OAAA,YAAA,CAAA;AAAA,GACX;AAAA,EAEA,OACA,GAAA;AAAA,GAEA;AACJ,CAAA;AAAA;AA3Ha,eAAA,CAGF,SAAY,GAAA;AAAA,EACf,IAAM,EAAA;AAAA,IACF,aAAc,CAAA,YAAA;AAAA,GAClB;AAAA,EACA,IAAM,EAAA,WAAA;AACV,CAAA;;;;"}