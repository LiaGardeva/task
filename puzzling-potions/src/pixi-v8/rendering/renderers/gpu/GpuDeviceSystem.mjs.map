{"version":3,"file":"GpuDeviceSystem.mjs","sources":["../../../../src/rendering/renderers/gpu/GpuDeviceSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { System } from '../shared/system/System';\nimport type { WebGPURenderer } from './WebGPURenderer';\n\nexport interface GPU\n{\n    adapter: GPUAdapter;\n    device: GPUDevice;\n}\n\n/**\n * System plugin to the renderer to manage the context.\n * @class\n * @extends PIXI.System\n * @memberof PIXI\n */\nexport class GpuDeviceSystem implements System\n{\n    /** @ignore */\n    static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'device',\n    } as const;\n\n    gpu: GPU;\n\n    private _renderer: WebGPURenderer;\n    private _initPromise: Promise<void>;\n\n    /**\n     * @param {PIXI.Renderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer: WebGPURenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public async init(): Promise<void>\n    {\n        if (this._initPromise) return this._initPromise;\n\n        this._initPromise = this.createDeviceAndAdaptor({})\n            .then((gpu) =>\n            {\n                this.gpu = gpu;\n\n                this._renderer.runners.contextChange.emit(this.gpu);\n            });\n\n        return this._initPromise;\n    }\n\n    /**\n     * Handle the context change event\n     * @param gpu\n     */\n    protected contextChange(gpu: GPU): void\n    {\n        this._renderer.gpu = gpu;\n    }\n\n    /**\n     * Helper class to create a WebGL Context\n     * @param {object} options - An options object that gets passed in to the canvas element containing the\n     *    context attributes\n     * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/getContext\n     * @returns {WebGLRenderingContext} the WebGL context\n     */\n    async createDeviceAndAdaptor(options: GPURequestAdapterOptions): Promise<GPU>\n    {\n        // TODO we only need one of these..\n        const adapter = await navigator.gpu.requestAdapter(options);\n        // TODO and one of these!\n        const device = await adapter.requestDevice();\n\n        return { adapter, device };\n    }\n\n    destroy(): void\n    {\n        this._renderer = null;\n    }\n}\n"],"names":[],"mappings":";;AAiBO,MAAM,eACb,CAAA;AAAA;AAAA;AAAA;AAAA,EAiBI,YAAY,QACZ,EAAA;AACI,IAAA,IAAA,CAAK,SAAY,GAAA,QAAA,CAAA;AAAA,GACrB;AAAA,EAEA,MAAa,IACb,GAAA;AACI,IAAA,IAAI,IAAK,CAAA,YAAA;AAAc,MAAA,OAAO,IAAK,CAAA,YAAA,CAAA;AAEnC,IAAK,IAAA,CAAA,YAAA,GAAe,KAAK,sBAAuB,CAAA,EAAE,CAC7C,CAAA,IAAA,CAAK,CAAC,GACP,KAAA;AACI,MAAA,IAAA,CAAK,GAAM,GAAA,GAAA,CAAA;AAEX,MAAA,IAAA,CAAK,SAAU,CAAA,OAAA,CAAQ,aAAc,CAAA,IAAA,CAAK,KAAK,GAAG,CAAA,CAAA;AAAA,KACrD,CAAA,CAAA;AAEL,IAAA,OAAO,IAAK,CAAA,YAAA,CAAA;AAAA,GAChB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMU,cAAc,GACxB,EAAA;AACI,IAAA,IAAA,CAAK,UAAU,GAAM,GAAA,GAAA,CAAA;AAAA,GACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,uBAAuB,OAC7B,EAAA;AAEI,IAAA,MAAM,OAAU,GAAA,MAAM,SAAU,CAAA,GAAA,CAAI,eAAe,OAAO,CAAA,CAAA;AAE1D,IAAM,MAAA,MAAA,GAAS,MAAM,OAAA,CAAQ,aAAc,EAAA,CAAA;AAE3C,IAAO,OAAA,EAAE,SAAS,MAAO,EAAA,CAAA;AAAA,GAC7B;AAAA,EAEA,OACA,GAAA;AACI,IAAA,IAAA,CAAK,SAAY,GAAA,IAAA,CAAA;AAAA,GACrB;AACJ,CAAA;AAAA;AApEa,eAAA,CAGF,SAAY,GAAA;AAAA,EACf,IAAM,EAAA;AAAA,IACF,aAAc,CAAA,YAAA;AAAA,GAClB;AAAA,EACA,IAAM,EAAA,QAAA;AACV,CAAA;;;;"}