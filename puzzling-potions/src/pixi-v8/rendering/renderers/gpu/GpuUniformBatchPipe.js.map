{"version":3,"file":"GpuUniformBatchPipe.js","sources":["../../../../src/rendering/renderers/gpu/GpuUniformBatchPipe.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { Buffer } from '../shared/buffer/Buffer';\nimport { BufferResource } from '../shared/buffer/BufferResource';\nimport { BufferUsage } from '../shared/buffer/const';\nimport { UniformBufferBatch } from './buffer/UniformBufferBatch';\nimport { BindGroup } from './shader/BindGroup';\n\nimport type { UniformGroup } from '../shared/shader/UniformGroup';\nimport type { WebGPURenderer } from './WebGPURenderer';\n\nconst minUniformOffsetAlignment = 128;// 256 / 2;\n\n// TODO renderStart and renderFinish - perhaps just make them instructions to fit the architecture of the\n// rest of the system\nexport class GpuUniformBatchPipe\n{\n    /** @ignore */\n    static extension = {\n        type: [\n            ExtensionType.WebGPUPipes,\n        ],\n        name: 'uniformBatch',\n    } as const;\n\n    private renderer: WebGPURenderer;\n\n    private bindGroupHash: Record<number, BindGroup> = {};\n    private batchBuffer: UniformBufferBatch;\n\n    // number of buffers..\n    private buffers: Buffer[] = [];\n\n    private bindGroups: BindGroup[] = [];\n    private bufferResources: BufferResource[] = [];\n\n    constructor(renderer: WebGPURenderer)\n    {\n        this.renderer = renderer;\n\n        this.batchBuffer = new UniformBufferBatch({ minUniformOffsetAlignment });\n\n        const totalBuffers = (256 / minUniformOffsetAlignment);\n\n        for (let i = 0; i < totalBuffers; i++)\n        {\n            let usage = BufferUsage.UNIFORM | BufferUsage.COPY_DST;\n\n            if (i === 0) usage |= BufferUsage.COPY_SRC;\n\n            this.buffers.push(new Buffer({\n                data: this.batchBuffer.data,\n                usage\n            }));\n        }\n    }\n\n    renderEnd()\n    {\n        this.uploadBindGroups();\n        this.resetBindGroups();\n    }\n\n    private resetBindGroups()\n    {\n        for (const i in this.bindGroupHash)\n        {\n            this.bindGroupHash[i] = null;\n        }\n\n        this.batchBuffer.clear();\n    }\n\n    // just works for single bind groups for now\n    getUniformBindGroup(group: UniformGroup<any>, duplicate: boolean): BindGroup\n    {\n        if (!duplicate && this.bindGroupHash[group.uid])\n        {\n            return this.bindGroupHash[group.uid];\n        }\n\n        this.renderer.uniformBuffer.ensureUniformGroup(group);\n\n        const data = group.buffer.data as Float32Array;\n\n        const offset = this.batchBuffer.addEmptyGroup(data.length);\n\n        this.renderer.uniformBuffer.syncUniformGroup(group, this.batchBuffer.data, offset / 4);\n\n        this.bindGroupHash[group.uid] = this.getBindGroup(offset / minUniformOffsetAlignment);\n\n        return this.bindGroupHash[group.uid];\n    }\n\n    getUniformBufferResource(group: UniformGroup<any>): BufferResource\n    {\n        this.renderer.uniformBuffer.updateUniformGroup(group);\n\n        const data = group.buffer.data as Float32Array;\n\n        const offset = this.batchBuffer.addGroup(data);\n\n        return this.getBufferResource(offset / minUniformOffsetAlignment);\n    }\n\n    getArrayBindGroup(data: Float32Array): BindGroup\n    {\n        const offset = this.batchBuffer.addGroup(data);\n\n        return this.getBindGroup(offset / minUniformOffsetAlignment);\n    }\n\n    getArrayBufferResource(data: Float32Array): BufferResource\n    {\n        const offset = this.batchBuffer.addGroup(data);\n\n        const index = offset / minUniformOffsetAlignment;\n\n        return this.getBufferResource(index);\n    }\n\n    getBufferResource(index: number): BufferResource\n    {\n        if (!this.bufferResources[index])\n        {\n            const buffer = this.buffers[index % 2];\n\n            this.bufferResources[index] = new BufferResource({\n                buffer,\n                offset: ((index / 2) | 0) * 256,\n                size: minUniformOffsetAlignment\n            });\n        }\n\n        return this.bufferResources[index];\n    }\n\n    getBindGroup(index: number): BindGroup\n    {\n        if (!this.bindGroups[index])\n        {\n            // even!\n            const bindGroup = new BindGroup({\n                0: this.getBufferResource(index),\n            });\n\n            this.bindGroups[index] = bindGroup;\n        }\n\n        return this.bindGroups[index];\n    }\n\n    uploadBindGroups()\n    {\n        const bufferSystem = this.renderer.buffer;\n\n        const firstBuffer = this.buffers[0];\n\n        firstBuffer.update(this.batchBuffer.byteIndex);\n\n        bufferSystem.updateBuffer(firstBuffer);\n\n        const commandEncoder = this.renderer.gpu.device.createCommandEncoder();\n\n        for (let i = 1; i < this.buffers.length; i++)\n        {\n            const buffer = this.buffers[i];\n\n            commandEncoder.copyBufferToBuffer(\n                bufferSystem.getGPUBuffer(firstBuffer),\n                minUniformOffsetAlignment,\n                bufferSystem.getGPUBuffer(buffer),\n                0,\n                this.batchBuffer.byteIndex\n            );\n        }\n\n        // TODO make a system that will que up all commands in to one array?\n        this.renderer.gpu.device.queue.submit([commandEncoder.finish()]);\n\n        // WEbGL code for if we ever need it..\n        // const gl = this.renderer.gl as GlRenderingContext;\n\n        // const srcBuffer = bufferSystem.updateBuffer(this.uboEven);\n\n        // const dstBuffer = bufferSystem.updateBuffer(this.uboOdd);\n\n        // gl.bindBuffer(gl.COPY_READ_BUFFER, srcBuffer.buffer);\n        // gl.bindBuffer(gl.ARRAY_BUFFER, dstBuffer.buffer);\n\n        // // console.warn('No GPU device');\n        // gl.copyBufferSubData(gl.COPY_READ_BUFFER, gl.ARRAY_BUFFER, 0, 0, this.batchBuffer.byteIndex);\n    }\n\n    destroy()\n    {\n        for (let i = 0; i < this.bindGroups.length; i++)\n        {\n            this.bindGroups[i].destroy();\n        }\n\n        this.bindGroups = null;\n        this.bindGroupHash = null;\n\n        for (let i = 0; i < this.buffers.length; i++)\n        {\n            this.buffers[i].destroy();\n        }\n        this.buffers = null;\n\n        for (let i = 0; i < this.bufferResources.length; i++)\n        {\n            this.bufferResources[i].destroy();\n        }\n\n        this.bufferResources = null;\n\n        this.batchBuffer.destroy();\n        this.bindGroupHash = null;\n\n        this.renderer = null;\n    }\n}\n"],"names":["UniformBufferBatch","BufferUsage","Buffer","BufferResource","BindGroup","ExtensionType"],"mappings":"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"}