{"version":3,"file":"PipelineSystem.mjs","sources":["../../../../../src/rendering/renderers/gpu/pipeline/PipelineSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../../../extensions/Extensions';\nimport { createIdFromString } from '../../shared/createIdFromString';\nimport { STENCIL_MODES } from '../../shared/state/const';\nimport { GpuStencilModesToPixi } from '../state/GpuStencilModesToPixi';\n\nimport type { Topology } from '../../shared/geometry/const';\nimport type { Geometry } from '../../shared/geometry/Geometry';\nimport type { State } from '../../shared/state/State';\nimport type { System } from '../../shared/system/System';\nimport type { GPU } from '../GpuDeviceSystem';\nimport type { GpuProgram } from '../shader/GpuProgram';\nimport type { WebGPURenderer } from '../WebGPURenderer';\n\nconst topologyStringToId = {\n    'point-list': 0,\n    'line-list': 1,\n    'line-strip': 2,\n    'triangle-list': 3,\n    'triangle-strip': 4,\n};\n\n// TODO use BIG int to manage the ids\n// TODO can group the static ones together\n\n// geometryLayouts = 256; // 8 bits // 256 states // value 0-255;\n// shaderKeys = 256; // 8 bits // 256 states // value 0-255;\n// colorMask = 16;// 4 bits // 16 states // value 0-15;\n// state = 64; // 6 bits // 64 states // value 0-63;\n// blendMode = 32; // 5 bits // 32 states // value 0-31;\n// topology = 8; // 3 bits // 8 states // value 0-7;\n// stencilState = 8; // 3 bits // 8 states // value 0-7;\n// multiSampleCount = 1; // 1 bit // 2 states // value 0-1;\n// total bit 34;\n\nfunction getKey(\n    geometryId: number,\n    programId: number,\n    stateId: number,\n    blendModeId: number,\n    stencilStateId: number,\n    multiSampleCount: number,\n    colorMask: number,\n    topology: number,\n)\n{\n    return (geometryId << 26)\n    | (programId << 18)\n    | (colorMask << 14)\n    | (stateId << 8)\n    | (blendModeId << 3)\n    | (topology << 1)\n    | (stencilStateId << 4)\n    | multiSampleCount;\n}\nexport class PipelineSystem implements System\n{\n    /** @ignore */\n    static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'pipeline',\n    } as const;\n    readonly renderer: WebGPURenderer;\n\n    protected CONTEXT_UID: number;\n\n    private _moduleCache: Record<string, GPUShaderModule> = {};\n    private _bufferLayoutsCache: Record<number, GPUVertexBufferLayout[]> = {};\n\n    private _pipeCache: Record<number, GPURenderPipeline> = {};\n\n    private gpu: GPU;\n    private stencilState: GPUDepthStencilState;\n\n    private stencilMode: STENCIL_MODES;\n    private colorMask = 0b1111;\n    private multisampleCount = 1;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        this.renderer = renderer;\n    }\n\n    protected contextChange(gpu: GPU): void\n    {\n        this.gpu = gpu;\n        this.setStencilMode(STENCIL_MODES.DISABLED);\n    }\n\n    setMultisampleCount(multisampleCount: number): void\n    {\n        this.multisampleCount = multisampleCount;\n    }\n\n    setColorMask(colorMask: number): void\n    {\n        this.colorMask = colorMask;\n    }\n\n    setStencilMode(stencilMode: STENCIL_MODES): void\n    {\n        this.stencilMode = stencilMode;\n        this.stencilState = GpuStencilModesToPixi[stencilMode];\n    }\n\n    setPipeline(geometry: Geometry, program: GpuProgram, state: State, passEncoder: GPURenderPassEncoder): void\n    {\n        const pipeline = this.getPipeline(geometry, program, state);\n\n        passEncoder.setPipeline(pipeline);\n    }\n\n    getPipeline(geometry: Geometry, program: GpuProgram, state: State, topology?: Topology): GPURenderPipeline // a state...)\n    {\n        if (!geometry._layoutKey)\n        {\n            // prepare the geometry for the pipeline\n            this.generateBufferKey(geometry);\n        }\n\n        if (!program._layoutKey)\n        {\n            // prepare the program for the pipeline\n            this.generateProgramKey(program);\n            this.renderer.shader.createProgramLayout(program);\n        }\n\n        topology = topology || geometry.topology;\n\n        // now we have set the Ids - the key is different...\n        // eslint-disable-next-line max-len\n        const key = getKey(\n            geometry._layoutKey,\n            program._layoutKey,\n            state.data,\n            state._blendModeId,\n            this.stencilMode,\n            this.multisampleCount,\n            this.colorMask,\n            topologyStringToId[topology]\n        );\n\n        if (this._pipeCache[key]) return this._pipeCache[key];\n\n        this._pipeCache[key] = this.createPipeline(geometry, program, state, topology);\n\n        return this._pipeCache[key];\n    }\n\n    private createPipeline(geometry: Geometry, program: GpuProgram, state: State, topology: Topology): GPURenderPipeline\n    {\n        const device = this.gpu.device;\n\n        const buffers = this.createVertexBufferLayouts(geometry);\n\n        const blendModes = this.renderer.state.getColorTargets(state);\n\n        let depthStencil = this.stencilState;\n\n        // mask states..\n        depthStencil = GpuStencilModesToPixi[this.stencilMode];\n\n        blendModes[0].writeMask = this.stencilMode === STENCIL_MODES.RENDERING_MASK_ADD ? 0 : this.colorMask;\n\n        const descriptor: GPURenderPipelineDescriptor = {\n            // TODO later check if its helpful to create..\n            // layout,\n            vertex: {\n                module: this.getModule(program.vertex.source),\n                entryPoint: program.vertex.entryPoint,\n                // geometry..\n                buffers,\n            },\n            fragment: {\n                module: this.getModule(program.fragment.source),\n                entryPoint: program.fragment.entryPoint,\n                targets: blendModes,\n            },\n            primitive: {\n                topology,\n                cullMode: state.cullMode,\n            },\n            layout: program._gpuLayout.pipeline,\n            multisample: {\n                count:  this.multisampleCount,\n\n            },\n            depthStencil,\n            label: `PIXI Pipeline`,\n        };\n\n        const pipeline = device.createRenderPipeline(descriptor);\n\n        return pipeline;\n    }\n\n    private getModule(code: string): GPUShaderModule\n    {\n        return this._moduleCache[code] || this.createModule(code);\n    }\n\n    private createModule(code: string): GPUShaderModule\n    {\n        const device = this.gpu.device;\n\n        this._moduleCache[code] = device.createShaderModule({\n            code,\n        });\n\n        return this._moduleCache[code];\n    }\n\n    private generateProgramKey(program: GpuProgram): number\n    {\n        const { vertex, fragment } = program;\n\n        const bigKey = vertex.source + fragment.source + vertex.entryPoint + fragment.entryPoint;\n\n        program._layoutKey = createIdFromString(bigKey, 'program');\n\n        return program._layoutKey;\n    }\n\n    private generateBufferKey(geometry: Geometry): number\n    {\n        const keyGen = [];\n        let index = 0;\n        // generate a key..\n\n        const attributeKeys = Object.keys(geometry.attributes).sort();\n\n        for (let i = 0; i < attributeKeys.length; i++)\n        {\n            const attribute = geometry.attributes[attributeKeys[i]];\n\n            keyGen[index++] = attribute.shaderLocation;\n            keyGen[index++] = attribute.offset;\n            keyGen[index++] = attribute.format;\n            keyGen[index++] = attribute.stride;\n        }\n\n        const stringKey = keyGen.join('');\n\n        geometry._layoutKey = createIdFromString(stringKey, 'geometry');\n\n        return geometry._layoutKey;\n    }\n\n    private createVertexBufferLayouts(geometry: Geometry): GPUVertexBufferLayout[]\n    {\n        if (this._bufferLayoutsCache[geometry._layoutKey])\n        {\n            return this._bufferLayoutsCache[geometry._layoutKey];\n        }\n\n        const vertexBuffersLayout: GPUVertexBufferLayout[] = [];\n\n        geometry.buffers.forEach((buffer) =>\n        {\n            const bufferEntry: GPUVertexBufferLayout = {\n                arrayStride: 0,\n                stepMode: 'vertex',\n                attributes: [\n\n                ],\n            };\n\n            const bufferEntryAttributes = (bufferEntry.attributes as GPUVertexAttribute[]);\n\n            for (const i in geometry.attributes)\n            {\n                const attribute = geometry.attributes[i];\n\n                if (attribute.buffer === buffer)\n                {\n                    bufferEntry.arrayStride = attribute.stride;\n\n                    bufferEntryAttributes.push({\n                        shaderLocation: attribute.shaderLocation,\n                        offset: attribute.offset,\n                        format: attribute.format,\n                    });\n                }\n            }\n\n            if (bufferEntryAttributes.length)\n            {\n                vertexBuffersLayout.push(bufferEntry);\n            }\n        });\n\n        this._bufferLayoutsCache[geometry._layoutKey] = vertexBuffersLayout;\n\n        return vertexBuffersLayout;\n    }\n\n    destroy(): void\n    {\n        throw new Error('Method not implemented.');\n    }\n}\n"],"names":[],"mappings":";;;;;AAaA,MAAM,kBAAqB,GAAA;AAAA,EACvB,YAAc,EAAA,CAAA;AAAA,EACd,WAAa,EAAA,CAAA;AAAA,EACb,YAAc,EAAA,CAAA;AAAA,EACd,eAAiB,EAAA,CAAA;AAAA,EACjB,gBAAkB,EAAA,CAAA;AACtB,CAAA,CAAA;AAeA,SAAS,MAAA,CACL,YACA,SACA,EAAA,OAAA,EACA,aACA,cACA,EAAA,gBAAA,EACA,WACA,QAEJ,EAAA;AACI,EAAA,OAAQ,UAAc,IAAA,EAAA,GACnB,SAAa,IAAA,EAAA,GACb,SAAa,IAAA,EAAA,GACb,OAAW,IAAA,CAAA,GACX,WAAe,IAAA,CAAA,GACf,QAAY,IAAA,CAAA,GACZ,kBAAkB,CACnB,GAAA,gBAAA,CAAA;AACN,CAAA;AACO,MAAM,cACb,CAAA;AAAA,EAwBI,YAAY,QACZ,EAAA;AAbA,IAAA,IAAA,CAAQ,eAAgD,EAAC,CAAA;AACzD,IAAA,IAAA,CAAQ,sBAA+D,EAAC,CAAA;AAExE,IAAA,IAAA,CAAQ,aAAgD,EAAC,CAAA;AAMzD,IAAA,IAAA,CAAQ,SAAY,GAAA,EAAA,CAAA;AACpB,IAAA,IAAA,CAAQ,gBAAmB,GAAA,CAAA,CAAA;AAIvB,IAAA,IAAA,CAAK,QAAW,GAAA,QAAA,CAAA;AAAA,GACpB;AAAA,EAEU,cAAc,GACxB,EAAA;AACI,IAAA,IAAA,CAAK,GAAM,GAAA,GAAA,CAAA;AACX,IAAK,IAAA,CAAA,cAAA,CAAe,cAAc,QAAQ,CAAA,CAAA;AAAA,GAC9C;AAAA,EAEA,oBAAoB,gBACpB,EAAA;AACI,IAAA,IAAA,CAAK,gBAAmB,GAAA,gBAAA,CAAA;AAAA,GAC5B;AAAA,EAEA,aAAa,SACb,EAAA;AACI,IAAA,IAAA,CAAK,SAAY,GAAA,SAAA,CAAA;AAAA,GACrB;AAAA,EAEA,eAAe,WACf,EAAA;AACI,IAAA,IAAA,CAAK,WAAc,GAAA,WAAA,CAAA;AACnB,IAAK,IAAA,CAAA,YAAA,GAAe,sBAAsB,WAAW,CAAA,CAAA;AAAA,GACzD;AAAA,EAEA,WAAY,CAAA,QAAA,EAAoB,OAAqB,EAAA,KAAA,EAAc,WACnE,EAAA;AACI,IAAA,MAAM,QAAW,GAAA,IAAA,CAAK,WAAY,CAAA,QAAA,EAAU,SAAS,KAAK,CAAA,CAAA;AAE1D,IAAA,WAAA,CAAY,YAAY,QAAQ,CAAA,CAAA;AAAA,GACpC;AAAA,EAEA,WAAY,CAAA,QAAA,EAAoB,OAAqB,EAAA,KAAA,EAAc,QACnE,EAAA;AACI,IAAI,IAAA,CAAC,SAAS,UACd,EAAA;AAEI,MAAA,IAAA,CAAK,kBAAkB,QAAQ,CAAA,CAAA;AAAA,KACnC;AAEA,IAAI,IAAA,CAAC,QAAQ,UACb,EAAA;AAEI,MAAA,IAAA,CAAK,mBAAmB,OAAO,CAAA,CAAA;AAC/B,MAAK,IAAA,CAAA,QAAA,CAAS,MAAO,CAAA,mBAAA,CAAoB,OAAO,CAAA,CAAA;AAAA,KACpD;AAEA,IAAA,QAAA,GAAW,YAAY,QAAS,CAAA,QAAA,CAAA;AAIhC,IAAA,MAAM,GAAM,GAAA,MAAA;AAAA,MACR,QAAS,CAAA,UAAA;AAAA,MACT,OAAQ,CAAA,UAAA;AAAA,MACR,KAAM,CAAA,IAAA;AAAA,MACN,KAAM,CAAA,YAAA;AAAA,MACN,IAAK,CAAA,WAAA;AAAA,MACL,IAAK,CAAA,gBAAA;AAAA,MACL,IAAK,CAAA,SAAA;AAAA,MACL,mBAAmB,QAAQ,CAAA;AAAA,KAC/B,CAAA;AAEA,IAAI,IAAA,IAAA,CAAK,WAAW,GAAG,CAAA;AAAG,MAAO,OAAA,IAAA,CAAK,WAAW,GAAG,CAAA,CAAA;AAEpD,IAAK,IAAA,CAAA,UAAA,CAAW,GAAG,CAAI,GAAA,IAAA,CAAK,eAAe,QAAU,EAAA,OAAA,EAAS,OAAO,QAAQ,CAAA,CAAA;AAE7E,IAAO,OAAA,IAAA,CAAK,WAAW,GAAG,CAAA,CAAA;AAAA,GAC9B;AAAA,EAEQ,cAAe,CAAA,QAAA,EAAoB,OAAqB,EAAA,KAAA,EAAc,QAC9E,EAAA;AACI,IAAM,MAAA,MAAA,GAAS,KAAK,GAAI,CAAA,MAAA,CAAA;AAExB,IAAM,MAAA,OAAA,GAAU,IAAK,CAAA,yBAAA,CAA0B,QAAQ,CAAA,CAAA;AAEvD,IAAA,MAAM,UAAa,GAAA,IAAA,CAAK,QAAS,CAAA,KAAA,CAAM,gBAAgB,KAAK,CAAA,CAAA;AAE5D,IAAA,IAAI,eAAe,IAAK,CAAA,YAAA,CAAA;AAGxB,IAAe,YAAA,GAAA,qBAAA,CAAsB,KAAK,WAAW,CAAA,CAAA;AAErD,IAAW,UAAA,CAAA,CAAC,EAAE,SAAY,GAAA,IAAA,CAAK,gBAAgB,aAAc,CAAA,kBAAA,GAAqB,IAAI,IAAK,CAAA,SAAA,CAAA;AAE3F,IAAA,MAAM,UAA0C,GAAA;AAAA;AAAA;AAAA,MAG5C,MAAQ,EAAA;AAAA,QACJ,MAAQ,EAAA,IAAA,CAAK,SAAU,CAAA,OAAA,CAAQ,OAAO,MAAM,CAAA;AAAA,QAC5C,UAAA,EAAY,QAAQ,MAAO,CAAA,UAAA;AAAA;AAAA,QAE3B,OAAA;AAAA,OACJ;AAAA,MACA,QAAU,EAAA;AAAA,QACN,MAAQ,EAAA,IAAA,CAAK,SAAU,CAAA,OAAA,CAAQ,SAAS,MAAM,CAAA;AAAA,QAC9C,UAAA,EAAY,QAAQ,QAAS,CAAA,UAAA;AAAA,QAC7B,OAAS,EAAA,UAAA;AAAA,OACb;AAAA,MACA,SAAW,EAAA;AAAA,QACP,QAAA;AAAA,QACA,UAAU,KAAM,CAAA,QAAA;AAAA,OACpB;AAAA,MACA,MAAA,EAAQ,QAAQ,UAAW,CAAA,QAAA;AAAA,MAC3B,WAAa,EAAA;AAAA,QACT,OAAQ,IAAK,CAAA,gBAAA;AAAA,OAEjB;AAAA,MACA,YAAA;AAAA,MACA,KAAO,EAAA,CAAA,aAAA,CAAA;AAAA,KACX,CAAA;AAEA,IAAM,MAAA,QAAA,GAAW,MAAO,CAAA,oBAAA,CAAqB,UAAU,CAAA,CAAA;AAEvD,IAAO,OAAA,QAAA,CAAA;AAAA,GACX;AAAA,EAEQ,UAAU,IAClB,EAAA;AACI,IAAA,OAAO,KAAK,YAAa,CAAA,IAAI,CAAK,IAAA,IAAA,CAAK,aAAa,IAAI,CAAA,CAAA;AAAA,GAC5D;AAAA,EAEQ,aAAa,IACrB,EAAA;AACI,IAAM,MAAA,MAAA,GAAS,KAAK,GAAI,CAAA,MAAA,CAAA;AAExB,IAAA,IAAA,CAAK,YAAa,CAAA,IAAI,CAAI,GAAA,MAAA,CAAO,kBAAmB,CAAA;AAAA,MAChD,IAAA;AAAA,KACH,CAAA,CAAA;AAED,IAAO,OAAA,IAAA,CAAK,aAAa,IAAI,CAAA,CAAA;AAAA,GACjC;AAAA,EAEQ,mBAAmB,OAC3B,EAAA;AACI,IAAM,MAAA,EAAE,MAAQ,EAAA,QAAA,EAAa,GAAA,OAAA,CAAA;AAE7B,IAAA,MAAM,SAAS,MAAO,CAAA,MAAA,GAAS,SAAS,MAAS,GAAA,MAAA,CAAO,aAAa,QAAS,CAAA,UAAA,CAAA;AAE9E,IAAQ,OAAA,CAAA,UAAA,GAAa,kBAAmB,CAAA,MAAA,EAAQ,SAAS,CAAA,CAAA;AAEzD,IAAA,OAAO,OAAQ,CAAA,UAAA,CAAA;AAAA,GACnB;AAAA,EAEQ,kBAAkB,QAC1B,EAAA;AACI,IAAA,MAAM,SAAS,EAAC,CAAA;AAChB,IAAA,IAAI,KAAQ,GAAA,CAAA,CAAA;AAGZ,IAAA,MAAM,gBAAgB,MAAO,CAAA,IAAA,CAAK,QAAS,CAAA,UAAU,EAAE,IAAK,EAAA,CAAA;AAE5D,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,aAAA,CAAc,QAAQ,CAC1C,EAAA,EAAA;AACI,MAAA,MAAM,SAAY,GAAA,QAAA,CAAS,UAAW,CAAA,aAAA,CAAc,CAAC,CAAC,CAAA,CAAA;AAEtD,MAAO,MAAA,CAAA,KAAA,EAAO,IAAI,SAAU,CAAA,cAAA,CAAA;AAC5B,MAAO,MAAA,CAAA,KAAA,EAAO,IAAI,SAAU,CAAA,MAAA,CAAA;AAC5B,MAAO,MAAA,CAAA,KAAA,EAAO,IAAI,SAAU,CAAA,MAAA,CAAA;AAC5B,MAAO,MAAA,CAAA,KAAA,EAAO,IAAI,SAAU,CAAA,MAAA,CAAA;AAAA,KAChC;AAEA,IAAM,MAAA,SAAA,GAAY,MAAO,CAAA,IAAA,CAAK,EAAE,CAAA,CAAA;AAEhC,IAAS,QAAA,CAAA,UAAA,GAAa,kBAAmB,CAAA,SAAA,EAAW,UAAU,CAAA,CAAA;AAE9D,IAAA,OAAO,QAAS,CAAA,UAAA,CAAA;AAAA,GACpB;AAAA,EAEQ,0BAA0B,QAClC,EAAA;AACI,IAAA,IAAI,IAAK,CAAA,mBAAA,CAAoB,QAAS,CAAA,UAAU,CAChD,EAAA;AACI,MAAO,OAAA,IAAA,CAAK,mBAAoB,CAAA,QAAA,CAAS,UAAU,CAAA,CAAA;AAAA,KACvD;AAEA,IAAA,MAAM,sBAA+C,EAAC,CAAA;AAEtD,IAAS,QAAA,CAAA,OAAA,CAAQ,OAAQ,CAAA,CAAC,MAC1B,KAAA;AACI,MAAA,MAAM,WAAqC,GAAA;AAAA,QACvC,WAAa,EAAA,CAAA;AAAA,QACb,QAAU,EAAA,QAAA;AAAA,QACV,YAAY,EAEZ;AAAA,OACJ,CAAA;AAEA,MAAA,MAAM,wBAAyB,WAAY,CAAA,UAAA,CAAA;AAE3C,MAAW,KAAA,MAAA,CAAA,IAAK,SAAS,UACzB,EAAA;AACI,QAAM,MAAA,SAAA,GAAY,QAAS,CAAA,UAAA,CAAW,CAAC,CAAA,CAAA;AAEvC,QAAI,IAAA,SAAA,CAAU,WAAW,MACzB,EAAA;AACI,UAAA,WAAA,CAAY,cAAc,SAAU,CAAA,MAAA,CAAA;AAEpC,UAAA,qBAAA,CAAsB,IAAK,CAAA;AAAA,YACvB,gBAAgB,SAAU,CAAA,cAAA;AAAA,YAC1B,QAAQ,SAAU,CAAA,MAAA;AAAA,YAClB,QAAQ,SAAU,CAAA,MAAA;AAAA,WACrB,CAAA,CAAA;AAAA,SACL;AAAA,OACJ;AAEA,MAAA,IAAI,sBAAsB,MAC1B,EAAA;AACI,QAAA,mBAAA,CAAoB,KAAK,WAAW,CAAA,CAAA;AAAA,OACxC;AAAA,KACH,CAAA,CAAA;AAED,IAAK,IAAA,CAAA,mBAAA,CAAoB,QAAS,CAAA,UAAU,CAAI,GAAA,mBAAA,CAAA;AAEhD,IAAO,OAAA,mBAAA,CAAA;AAAA,GACX;AAAA,EAEA,OACA,GAAA;AACI,IAAM,MAAA,IAAI,MAAM,yBAAyB,CAAA,CAAA;AAAA,GAC7C;AACJ,CAAA;AAAA;AAvPa,cAAA,CAGF,SAAY,GAAA;AAAA,EACf,IAAM,EAAA;AAAA,IACF,aAAc,CAAA,YAAA;AAAA,GAClB;AAAA,EACA,IAAM,EAAA,UAAA;AACV,CAAA;;;;"}