{"version":3,"file":"GpuRenderTargetSystem.mjs","sources":["../../../../../src/rendering/renderers/gpu/renderTarget/GpuRenderTargetSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../../../extensions/Extensions';\nimport { Matrix } from '../../../../maths/Matrix';\nimport { isRenderingToScreen } from '../../shared/renderTarget/isRenderingToScreen';\nimport { RenderTarget } from '../../shared/renderTarget/RenderTarget';\nimport { SystemRunner } from '../../shared/system/SystemRunner';\nimport { TextureSource } from '../../shared/texture/sources/TextureSource';\nimport { Texture } from '../../shared/texture/Texture';\nimport { getCanvasTexture } from '../../shared/texture/utils/getCanvasTexture';\nimport { GpuRenderTarget } from './GpuRenderTarget';\n\nimport type { ICanvas } from '../../../../settings/adapter/ICanvas';\nimport type { System } from '../../shared/system/System';\nimport type { BindableTexture } from '../../shared/texture/Texture';\nimport type { GPU } from '../GpuDeviceSystem';\nimport type { WebGPURenderer } from '../WebGPURenderer';\n\nconst DEFAULT_CLEAR_COLOR = [0, 0, 0, 0];\n\nexport type RenderSurface = ICanvas | BindableTexture | RenderTarget;\n\nexport type RGBAArray = [number, number, number, number];\n\nexport class GpuRenderTargetSystem implements System\n{\n    /** @ignore */\n    static extension = {\n        type: [ExtensionType.WebGPUSystem],\n        name: 'renderTarget',\n    } as const;\n\n    rootRenderTarget: RenderTarget;\n    renderingToScreen: boolean;\n    rootProjectionMatrix = new Matrix();\n    renderTarget: RenderTarget;\n    onRenderTargetChange = new SystemRunner('onRenderTargetChange');\n\n    private renderSurfaceToRenderTargetHash: Map<RenderSurface, RenderTarget>\n        = new Map();\n    private gpuRenderTargetHash: Record<number, GpuRenderTarget> = {};\n\n    private renderTargetStack: RenderTarget[] = [];\n    private renderer: WebGPURenderer;\n\n    private gpu: GPU;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        this.renderer = renderer;\n    }\n\n    renderStart({\n        target,\n        clear,\n        clearColor,\n    }: {\n        target: RenderSurface;\n        clear: boolean;\n        clearColor: RGBAArray;\n    }): void\n    {\n        // generate a render pass description..\n        // create an encoder..\n\n        this.rootRenderTarget = this.getRenderTarget(target);\n        this.rootProjectionMatrix = this.rootRenderTarget.projectionMatrix;\n\n        this.renderingToScreen = isRenderingToScreen(this.rootRenderTarget);\n\n        this.renderTargetStack.length = 0;\n\n        this.renderer.encoder.start();\n\n        this.push(\n            this.rootRenderTarget,\n            clear,\n            clearColor ?? this.renderer.background.colorRgba\n        );\n    }\n\n    protected contextChange(gpu: GPU): void\n    {\n        this.gpu = gpu;\n    }\n\n    bind(\n        renderSurface: RenderSurface,\n        clear = true,\n        clearColor?: RGBAArray\n    ): RenderTarget\n    {\n        const renderTarget = this.getRenderTarget(renderSurface);\n\n        this.renderTarget = renderTarget;\n\n        const gpuRenderTarget = this.getGpuRenderTarget(renderTarget);\n\n        if (\n            renderTarget.width !== gpuRenderTarget.width\n            || renderTarget.height !== gpuRenderTarget.height\n        )\n        {\n            this.resizeGpuRenderTarget(renderTarget);\n        }\n\n        const descriptor = this.getDescriptor(renderTarget, clear, clearColor);\n\n        gpuRenderTarget.descriptor = descriptor;\n\n        // TODO we should not finish a render pass each time we bind\n        // for example filters - we would want to push / pop render targets\n        this.renderer.encoder.beginRenderPass(renderTarget, gpuRenderTarget);\n        this.renderer.pipeline.setMultisampleCount(gpuRenderTarget.msaaSamples);\n\n        this.onRenderTargetChange.emit(renderTarget);\n\n        return renderTarget;\n    }\n\n    /**\n     * returns the gpu texture for the first color texture in the render target\n     * mainly used by the filter manager to get copy the texture for blending\n     * @param renderTarget\n     * @returns a gpu texture\n     */\n    getGpuColorTexture(renderTarget: RenderTarget): GPUTexture\n    {\n        const gpuRenderTarget = this.getGpuRenderTarget(renderTarget);\n\n        if (gpuRenderTarget.contexts[0])\n        {\n            return gpuRenderTarget.contexts[0].getCurrentTexture();\n        }\n\n        return this.renderer.texture.getGpuSource(\n            renderTarget.colorTextures[0].source\n        );\n    }\n\n    getDescriptor(\n        renderTarget: RenderTarget,\n        clear: boolean,\n        clearValue: RGBAArray\n    ): GPURenderPassDescriptor\n    {\n        const gpuRenderTarget = this.getGpuRenderTarget(renderTarget);\n\n        const loadOp = clear ? 'clear' : 'load';\n\n        const colorAttachments = renderTarget.colorTextures.map(\n            (texture, i) =>\n            {\n                const context = gpuRenderTarget.contexts[i];\n\n                let view: GPUTextureView;\n                let resolveTarget: GPUTextureView;\n\n                if (context)\n                {\n                    const currentTexture = context.getCurrentTexture();\n\n                    const canvasTextureView = currentTexture.createView();\n\n                    view = canvasTextureView;\n                }\n                else\n                {\n                    view = this.renderer.texture.getTextureView(texture);\n                }\n\n                if (gpuRenderTarget.msaaTextures[i])\n                {\n                    resolveTarget = view;\n                    view = this.renderer.texture.getTextureView(\n                        gpuRenderTarget.msaaTextures[i]\n                    );\n                }\n\n                return {\n                    view, // assign each frame based on the swap chain!\n                    resolveTarget,\n                    clearValue: clearValue || DEFAULT_CLEAR_COLOR,\n                    storeOp: 'store',\n                    loadOp,\n                };\n            }\n        ) as GPURenderPassColorAttachment[];\n\n        let depthStencilAttachment;\n\n        if (renderTarget.depthTexture)\n        {\n            depthStencilAttachment = {\n                view: this.renderer.texture\n                    .getGpuSource(renderTarget.depthTexture.source)\n                    .createView(),\n                stencilStoreOp: 'store' as GPUStoreOp,\n                stencilLoadOp: loadOp as GPULoadOp,\n            };\n        }\n\n        const descriptor: GPURenderPassDescriptor = {\n            colorAttachments,\n            depthStencilAttachment,\n        };\n\n        // console.log(JSON.stringify(descriptor));\n\n        return descriptor;\n    }\n\n    push(renderSurface: RenderSurface, clear = true, clearColor?: RGBAArray)\n    {\n        const renderTarget = this.bind(renderSurface, clear, clearColor);\n\n        this.renderTargetStack.push(renderTarget);\n\n        return renderTarget;\n    }\n\n    pop()\n    {\n        this.renderTargetStack.pop();\n\n        this.bind(\n            this.renderTargetStack[this.renderTargetStack.length - 1],\n            false\n        );\n    }\n\n    getRenderTarget(renderSurface: RenderSurface): RenderTarget\n    {\n        return (\n            this.renderSurfaceToRenderTargetHash.get(renderSurface)\n            ?? this.initRenderTarget(renderSurface)\n        );\n    }\n\n    copyToTexture(\n        sourceRenderSurfaceTexture: RenderTarget,\n        destinationTexture: Texture,\n        origin: { x: number; y: number },\n        size: { width: number; height: number }\n    )\n    {\n        const renderer = this.renderer;\n\n        const baseGpuTexture = renderer.renderTarget.getGpuColorTexture(\n            sourceRenderSurfaceTexture\n        );\n        const backGpuTexture = renderer.texture.getGpuSource(\n            destinationTexture.source\n        );\n\n        renderer.encoder.commandEncoder.copyTextureToTexture(\n            {\n                texture: baseGpuTexture,\n                origin,\n            },\n            {\n                texture: backGpuTexture,\n            },\n            size\n        );\n\n        return destinationTexture;\n    }\n\n    restart()\n    {\n        this.bind(this.rootRenderTarget, false);\n    }\n\n    destroy()\n    {\n        // boom\n    }\n\n    private initRenderTarget(renderSurface: RenderSurface): RenderTarget\n    {\n        let renderTarget = null;\n\n        if (renderSurface instanceof HTMLCanvasElement)\n        {\n            renderSurface = getCanvasTexture(renderSurface as ICanvas);\n        }\n\n        if (renderSurface instanceof RenderTarget)\n        {\n            renderTarget = renderSurface;\n        }\n        else if (renderSurface instanceof Texture)\n        {\n            renderTarget = new RenderTarget({\n                colorTextures: [renderSurface],\n                depthTexture: renderSurface.source.depthStencil,\n            });\n        }\n\n        renderTarget.isRoot = true;\n\n        this.renderSurfaceToRenderTargetHash.set(renderSurface, renderTarget);\n\n        return renderTarget;\n    }\n\n    private getGpuRenderTarget(renderTarget: RenderTarget)\n    {\n        return (\n            this.gpuRenderTargetHash[renderTarget.uid]\n            || this.initGpuRenderTarget(renderTarget)\n        );\n    }\n\n    private initGpuRenderTarget(renderTarget: RenderTarget): GpuRenderTarget\n    {\n        // always false for WebGPU\n        renderTarget.isRoot = true;\n\n        const gpuRenderTarget = new GpuRenderTarget();\n\n        // create a context...\n        // is a canvas...\n\n        renderTarget.colorTextures.forEach((colorTexture, i) =>\n        {\n            if (colorTexture.source.resource instanceof HTMLCanvasElement)\n            {\n                const context\n                    = renderTarget.colorTexture.source.resource.getContext(\n                        'webgpu'\n                    ) as unknown as GPUCanvasContext;\n\n                try\n                {\n                    context.configure({\n                        device: this.gpu.device,\n                        // eslint-disable-next-line max-len\n                        usage:\n                            GPUTextureUsage.TEXTURE_BINDING\n                            | GPUTextureUsage.COPY_DST\n                            | GPUTextureUsage.RENDER_ATTACHMENT\n                            | GPUTextureUsage.COPY_SRC,\n                        format: 'bgra8unorm',\n                        alphaMode: 'opaque',\n                    });\n                }\n                catch (e)\n                {\n                    console.error(e);\n                }\n\n                gpuRenderTarget.contexts[i] = context;\n            }\n\n            gpuRenderTarget.msaa = colorTexture.source.antialias;\n\n            if (colorTexture.source.antialias)\n            {\n                const msaaTexture = new TextureSource({\n                    width: 0,\n                    height: 0,\n                    sampleCount: 4,\n                });\n\n                gpuRenderTarget.msaaTextures[i] = msaaTexture;\n            }\n        });\n\n        if (gpuRenderTarget.msaa)\n        {\n            gpuRenderTarget.msaaSamples = 4;\n\n            if (renderTarget.depthTexture)\n            {\n                renderTarget.depthTexture.source.sampleCount = 4;\n            }\n        }\n\n        this.gpuRenderTargetHash[renderTarget.uid] = gpuRenderTarget;\n\n        return gpuRenderTarget;\n    }\n\n    private resizeGpuRenderTarget(renderTarget: RenderTarget)\n    {\n        const gpuRenderTarget = this.getGpuRenderTarget(renderTarget);\n\n        gpuRenderTarget.width = renderTarget.width;\n        gpuRenderTarget.height = renderTarget.height;\n\n        if (gpuRenderTarget.msaa)\n        {\n            renderTarget.colorTextures.forEach((colorTexture, i) =>\n            {\n                const msaaTexture = gpuRenderTarget.msaaTextures[i];\n\n                msaaTexture?.resize(\n                    colorTexture.source.width,\n                    colorTexture.source.height,\n                    colorTexture.source._resolution\n                );\n            });\n        }\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;;AAgBA,MAAM,mBAAsB,GAAA,CAAC,CAAG,EAAA,CAAA,EAAG,GAAG,CAAC,CAAA,CAAA;AAMhC,MAAM,qBACb,CAAA;AAAA,EAsBI,YAAY,QACZ,EAAA;AAdA,IAAA,IAAA,CAAA,oBAAA,GAAuB,IAAI,MAAO,EAAA,CAAA;AAElC,IAAuB,IAAA,CAAA,oBAAA,GAAA,IAAI,aAAa,sBAAsB,CAAA,CAAA;AAE9D,IAAQ,IAAA,CAAA,+BAAA,uBACE,GAAI,EAAA,CAAA;AACd,IAAA,IAAA,CAAQ,sBAAuD,EAAC,CAAA;AAEhE,IAAA,IAAA,CAAQ,oBAAoC,EAAC,CAAA;AAOzC,IAAA,IAAA,CAAK,QAAW,GAAA,QAAA,CAAA;AAAA,GACpB;AAAA,EAEA,WAAY,CAAA;AAAA,IACR,MAAA;AAAA,IACA,KAAA;AAAA,IACA,UAAA;AAAA,GAMJ,EAAA;AAII,IAAK,IAAA,CAAA,gBAAA,GAAmB,IAAK,CAAA,eAAA,CAAgB,MAAM,CAAA,CAAA;AACnD,IAAK,IAAA,CAAA,oBAAA,GAAuB,KAAK,gBAAiB,CAAA,gBAAA,CAAA;AAElD,IAAK,IAAA,CAAA,iBAAA,GAAoB,mBAAoB,CAAA,IAAA,CAAK,gBAAgB,CAAA,CAAA;AAElE,IAAA,IAAA,CAAK,kBAAkB,MAAS,GAAA,CAAA,CAAA;AAEhC,IAAK,IAAA,CAAA,QAAA,CAAS,QAAQ,KAAM,EAAA,CAAA;AAE5B,IAAK,IAAA,CAAA,IAAA;AAAA,MACD,IAAK,CAAA,gBAAA;AAAA,MACL,KAAA;AAAA,MACA,UAAA,IAAc,IAAK,CAAA,QAAA,CAAS,UAAW,CAAA,SAAA;AAAA,KAC3C,CAAA;AAAA,GACJ;AAAA,EAEU,cAAc,GACxB,EAAA;AACI,IAAA,IAAA,CAAK,GAAM,GAAA,GAAA,CAAA;AAAA,GACf;AAAA,EAEA,IACI,CAAA,aAAA,EACA,KAAQ,GAAA,IAAA,EACR,UAEJ,EAAA;AACI,IAAM,MAAA,YAAA,GAAe,IAAK,CAAA,eAAA,CAAgB,aAAa,CAAA,CAAA;AAEvD,IAAA,IAAA,CAAK,YAAe,GAAA,YAAA,CAAA;AAEpB,IAAM,MAAA,eAAA,GAAkB,IAAK,CAAA,kBAAA,CAAmB,YAAY,CAAA,CAAA;AAE5D,IAAA,IACI,aAAa,KAAU,KAAA,eAAA,CAAgB,SACpC,YAAa,CAAA,MAAA,KAAW,gBAAgB,MAE/C,EAAA;AACI,MAAA,IAAA,CAAK,sBAAsB,YAAY,CAAA,CAAA;AAAA,KAC3C;AAEA,IAAA,MAAM,UAAa,GAAA,IAAA,CAAK,aAAc,CAAA,YAAA,EAAc,OAAO,UAAU,CAAA,CAAA;AAErE,IAAA,eAAA,CAAgB,UAAa,GAAA,UAAA,CAAA;AAI7B,IAAA,IAAA,CAAK,QAAS,CAAA,OAAA,CAAQ,eAAgB,CAAA,YAAA,EAAc,eAAe,CAAA,CAAA;AACnE,IAAA,IAAA,CAAK,QAAS,CAAA,QAAA,CAAS,mBAAoB,CAAA,eAAA,CAAgB,WAAW,CAAA,CAAA;AAEtE,IAAK,IAAA,CAAA,oBAAA,CAAqB,KAAK,YAAY,CAAA,CAAA;AAE3C,IAAO,OAAA,YAAA,CAAA;AAAA,GACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,mBAAmB,YACnB,EAAA;AACI,IAAM,MAAA,eAAA,GAAkB,IAAK,CAAA,kBAAA,CAAmB,YAAY,CAAA,CAAA;AAE5D,IAAI,IAAA,eAAA,CAAgB,QAAS,CAAA,CAAC,CAC9B,EAAA;AACI,MAAA,OAAO,eAAgB,CAAA,QAAA,CAAS,CAAC,CAAA,CAAE,iBAAkB,EAAA,CAAA;AAAA,KACzD;AAEA,IAAO,OAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,YAAA;AAAA,MACzB,YAAA,CAAa,aAAc,CAAA,CAAC,CAAE,CAAA,MAAA;AAAA,KAClC,CAAA;AAAA,GACJ;AAAA,EAEA,aAAA,CACI,YACA,EAAA,KAAA,EACA,UAEJ,EAAA;AACI,IAAM,MAAA,eAAA,GAAkB,IAAK,CAAA,kBAAA,CAAmB,YAAY,CAAA,CAAA;AAE5D,IAAM,MAAA,MAAA,GAAS,QAAQ,OAAU,GAAA,MAAA,CAAA;AAEjC,IAAM,MAAA,gBAAA,GAAmB,aAAa,aAAc,CAAA,GAAA;AAAA,MAChD,CAAC,SAAS,CACV,KAAA;AACI,QAAM,MAAA,OAAA,GAAU,eAAgB,CAAA,QAAA,CAAS,CAAC,CAAA,CAAA;AAE1C,QAAI,IAAA,IAAA,CAAA;AACJ,QAAI,IAAA,aAAA,CAAA;AAEJ,QAAA,IAAI,OACJ,EAAA;AACI,UAAM,MAAA,cAAA,GAAiB,QAAQ,iBAAkB,EAAA,CAAA;AAEjD,UAAM,MAAA,iBAAA,GAAoB,eAAe,UAAW,EAAA,CAAA;AAEpD,UAAO,IAAA,GAAA,iBAAA,CAAA;AAAA,SAGX,MAAA;AACI,UAAA,IAAA,GAAO,IAAK,CAAA,QAAA,CAAS,OAAQ,CAAA,cAAA,CAAe,OAAO,CAAA,CAAA;AAAA,SACvD;AAEA,QAAI,IAAA,eAAA,CAAgB,YAAa,CAAA,CAAC,CAClC,EAAA;AACI,UAAgB,aAAA,GAAA,IAAA,CAAA;AAChB,UAAO,IAAA,GAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,cAAA;AAAA,YACzB,eAAA,CAAgB,aAAa,CAAC,CAAA;AAAA,WAClC,CAAA;AAAA,SACJ;AAEA,QAAO,OAAA;AAAA,UACH,IAAA;AAAA;AAAA,UACA,aAAA;AAAA,UACA,YAAY,UAAc,IAAA,mBAAA;AAAA,UAC1B,OAAS,EAAA,OAAA;AAAA,UACT,MAAA;AAAA,SACJ,CAAA;AAAA,OACJ;AAAA,KACJ,CAAA;AAEA,IAAI,IAAA,sBAAA,CAAA;AAEJ,IAAA,IAAI,aAAa,YACjB,EAAA;AACI,MAAyB,sBAAA,GAAA;AAAA,QACrB,IAAA,EAAM,KAAK,QAAS,CAAA,OAAA,CACf,aAAa,YAAa,CAAA,YAAA,CAAa,MAAM,CAAA,CAC7C,UAAW,EAAA;AAAA,QAChB,cAAgB,EAAA,OAAA;AAAA,QAChB,aAAe,EAAA,MAAA;AAAA,OACnB,CAAA;AAAA,KACJ;AAEA,IAAA,MAAM,UAAsC,GAAA;AAAA,MACxC,gBAAA;AAAA,MACA,sBAAA;AAAA,KACJ,CAAA;AAIA,IAAO,OAAA,UAAA,CAAA;AAAA,GACX;AAAA,EAEA,IAAK,CAAA,aAAA,EAA8B,KAAQ,GAAA,IAAA,EAAM,UACjD,EAAA;AACI,IAAA,MAAM,YAAe,GAAA,IAAA,CAAK,IAAK,CAAA,aAAA,EAAe,OAAO,UAAU,CAAA,CAAA;AAE/D,IAAK,IAAA,CAAA,iBAAA,CAAkB,KAAK,YAAY,CAAA,CAAA;AAExC,IAAO,OAAA,YAAA,CAAA;AAAA,GACX;AAAA,EAEA,GACA,GAAA;AACI,IAAA,IAAA,CAAK,kBAAkB,GAAI,EAAA,CAAA;AAE3B,IAAK,IAAA,CAAA,IAAA;AAAA,MACD,IAAK,CAAA,iBAAA,CAAkB,IAAK,CAAA,iBAAA,CAAkB,SAAS,CAAC,CAAA;AAAA,MACxD,KAAA;AAAA,KACJ,CAAA;AAAA,GACJ;AAAA,EAEA,gBAAgB,aAChB,EAAA;AACI,IAAA,OACI,KAAK,+BAAgC,CAAA,GAAA,CAAI,aAAa,CACnD,IAAA,IAAA,CAAK,iBAAiB,aAAa,CAAA,CAAA;AAAA,GAE9C;AAAA,EAEA,aACI,CAAA,0BAAA,EACA,kBACA,EAAA,MAAA,EACA,IAEJ,EAAA;AACI,IAAA,MAAM,WAAW,IAAK,CAAA,QAAA,CAAA;AAEtB,IAAM,MAAA,cAAA,GAAiB,SAAS,YAAa,CAAA,kBAAA;AAAA,MACzC,0BAAA;AAAA,KACJ,CAAA;AACA,IAAM,MAAA,cAAA,GAAiB,SAAS,OAAQ,CAAA,YAAA;AAAA,MACpC,kBAAmB,CAAA,MAAA;AAAA,KACvB,CAAA;AAEA,IAAA,QAAA,CAAS,QAAQ,cAAe,CAAA,oBAAA;AAAA,MAC5B;AAAA,QACI,OAAS,EAAA,cAAA;AAAA,QACT,MAAA;AAAA,OACJ;AAAA,MACA;AAAA,QACI,OAAS,EAAA,cAAA;AAAA,OACb;AAAA,MACA,IAAA;AAAA,KACJ,CAAA;AAEA,IAAO,OAAA,kBAAA,CAAA;AAAA,GACX;AAAA,EAEA,OACA,GAAA;AACI,IAAK,IAAA,CAAA,IAAA,CAAK,IAAK,CAAA,gBAAA,EAAkB,KAAK,CAAA,CAAA;AAAA,GAC1C;AAAA,EAEA,OACA,GAAA;AAAA,GAEA;AAAA,EAEQ,iBAAiB,aACzB,EAAA;AACI,IAAA,IAAI,YAAe,GAAA,IAAA,CAAA;AAEnB,IAAA,IAAI,yBAAyB,iBAC7B,EAAA;AACI,MAAA,aAAA,GAAgB,iBAAiB,aAAwB,CAAA,CAAA;AAAA,KAC7D;AAEA,IAAA,IAAI,yBAAyB,YAC7B,EAAA;AACI,MAAe,YAAA,GAAA,aAAA,CAAA;AAAA,KACnB,MAAA,IACS,yBAAyB,OAClC,EAAA;AACI,MAAA,YAAA,GAAe,IAAI,YAAa,CAAA;AAAA,QAC5B,aAAA,EAAe,CAAC,aAAa,CAAA;AAAA,QAC7B,YAAA,EAAc,cAAc,MAAO,CAAA,YAAA;AAAA,OACtC,CAAA,CAAA;AAAA,KACL;AAEA,IAAA,YAAA,CAAa,MAAS,GAAA,IAAA,CAAA;AAEtB,IAAK,IAAA,CAAA,+BAAA,CAAgC,GAAI,CAAA,aAAA,EAAe,YAAY,CAAA,CAAA;AAEpE,IAAO,OAAA,YAAA,CAAA;AAAA,GACX;AAAA,EAEQ,mBAAmB,YAC3B,EAAA;AACI,IAAA,OACI,KAAK,mBAAoB,CAAA,YAAA,CAAa,GAAG,CACtC,IAAA,IAAA,CAAK,oBAAoB,YAAY,CAAA,CAAA;AAAA,GAEhD;AAAA,EAEQ,oBAAoB,YAC5B,EAAA;AAEI,IAAA,YAAA,CAAa,MAAS,GAAA,IAAA,CAAA;AAEtB,IAAM,MAAA,eAAA,GAAkB,IAAI,eAAgB,EAAA,CAAA;AAK5C,IAAA,YAAA,CAAa,aAAc,CAAA,OAAA,CAAQ,CAAC,YAAA,EAAc,CAClD,KAAA;AACI,MAAI,IAAA,YAAA,CAAa,MAAO,CAAA,QAAA,YAAoB,iBAC5C,EAAA;AACI,QAAA,MAAM,OACA,GAAA,YAAA,CAAa,YAAa,CAAA,MAAA,CAAO,QAAS,CAAA,UAAA;AAAA,UACxC,QAAA;AAAA,SACJ,CAAA;AAEJ,QACA,IAAA;AACI,UAAA,OAAA,CAAQ,SAAU,CAAA;AAAA,YACd,MAAA,EAAQ,KAAK,GAAI,CAAA,MAAA;AAAA;AAAA,YAEjB,OACI,eAAgB,CAAA,eAAA,GACd,gBAAgB,QAChB,GAAA,eAAA,CAAgB,oBAChB,eAAgB,CAAA,QAAA;AAAA,YACtB,MAAQ,EAAA,YAAA;AAAA,YACR,SAAW,EAAA,QAAA;AAAA,WACd,CAAA,CAAA;AAAA,iBAEE,CAAP,EAAA;AAEI,UAAA,OAAA,CAAQ,MAAM,CAAC,CAAA,CAAA;AAAA,SACnB;AAEA,QAAgB,eAAA,CAAA,QAAA,CAAS,CAAC,CAAI,GAAA,OAAA,CAAA;AAAA,OAClC;AAEA,MAAgB,eAAA,CAAA,IAAA,GAAO,aAAa,MAAO,CAAA,SAAA,CAAA;AAE3C,MAAI,IAAA,YAAA,CAAa,OAAO,SACxB,EAAA;AACI,QAAM,MAAA,WAAA,GAAc,IAAI,aAAc,CAAA;AAAA,UAClC,KAAO,EAAA,CAAA;AAAA,UACP,MAAQ,EAAA,CAAA;AAAA,UACR,WAAa,EAAA,CAAA;AAAA,SAChB,CAAA,CAAA;AAED,QAAgB,eAAA,CAAA,YAAA,CAAa,CAAC,CAAI,GAAA,WAAA,CAAA;AAAA,OACtC;AAAA,KACH,CAAA,CAAA;AAED,IAAA,IAAI,gBAAgB,IACpB,EAAA;AACI,MAAA,eAAA,CAAgB,WAAc,GAAA,CAAA,CAAA;AAE9B,MAAA,IAAI,aAAa,YACjB,EAAA;AACI,QAAa,YAAA,CAAA,YAAA,CAAa,OAAO,WAAc,GAAA,CAAA,CAAA;AAAA,OACnD;AAAA,KACJ;AAEA,IAAK,IAAA,CAAA,mBAAA,CAAoB,YAAa,CAAA,GAAG,CAAI,GAAA,eAAA,CAAA;AAE7C,IAAO,OAAA,eAAA,CAAA;AAAA,GACX;AAAA,EAEQ,sBAAsB,YAC9B,EAAA;AACI,IAAM,MAAA,eAAA,GAAkB,IAAK,CAAA,kBAAA,CAAmB,YAAY,CAAA,CAAA;AAE5D,IAAA,eAAA,CAAgB,QAAQ,YAAa,CAAA,KAAA,CAAA;AACrC,IAAA,eAAA,CAAgB,SAAS,YAAa,CAAA,MAAA,CAAA;AAEtC,IAAA,IAAI,gBAAgB,IACpB,EAAA;AACI,MAAA,YAAA,CAAa,aAAc,CAAA,OAAA,CAAQ,CAAC,YAAA,EAAc,CAClD,KAAA;AACI,QAAM,MAAA,WAAA,GAAc,eAAgB,CAAA,YAAA,CAAa,CAAC,CAAA,CAAA;AAElD,QAAa,WAAA,EAAA,MAAA;AAAA,UACT,aAAa,MAAO,CAAA,KAAA;AAAA,UACpB,aAAa,MAAO,CAAA,MAAA;AAAA,UACpB,aAAa,MAAO,CAAA,WAAA;AAAA,SACxB,CAAA;AAAA,OACH,CAAA,CAAA;AAAA,KACL;AAAA,GACJ;AACJ,CAAA;AAAA;AA9Xa,qBAAA,CAGF,SAAY,GAAA;AAAA,EACf,IAAA,EAAM,CAAC,aAAA,CAAc,YAAY,CAAA;AAAA,EACjC,IAAM,EAAA,cAAA;AACV,CAAA;;;;"}