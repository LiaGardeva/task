{"version":3,"file":"BindGroup.mjs","sources":["../../../../../src/rendering/renderers/gpu/shader/BindGroup.ts"],"sourcesContent":["import type { BindResource } from './BindResource';\n\nexport class BindGroup\n{\n    resources: Record<string, BindResource>;\n\n    usageTick = 0;\n    key: string;\n    private dirty = true;\n\n    constructor(resources?: Record<string, BindResource>)\n    {\n        this.resources = {};\n\n        let index = 0;\n\n        for (const i in resources)\n        {\n            const resource: BindResource = resources[i];\n\n            this.setResource(resource, index++);\n        }\n\n        this.updateKey();\n    }\n\n    update()\n    {\n        this.updateKey();\n    }\n\n    updateKey(): void\n    {\n        if (!this.dirty) return;\n\n        this.dirty = false;\n\n        const keyParts = [];\n        let index = 0;\n\n        // TODO - lets use big ints instead of strings...\n        for (const i in this.resources)\n        {\n            // TODO make this consistent...\n            keyParts[index++] = this.resources[i].resourceId;\n        }\n\n        this.key = keyParts.join('|');\n    }\n\n    setResource(resource: BindResource, index: number): void\n    {\n        const currentResource = this.resources[index];\n\n        if (resource === currentResource) return;\n\n        if (currentResource)\n        {\n            resource.off?.('change', this.onResourceChange, this);\n        }\n\n        resource.on?.('change', this.onResourceChange, this);\n\n        this.resources[index] = resource;\n        this.dirty = true;\n    }\n\n    getResource(index: number): BindResource\n    {\n        return this.resources[index];\n    }\n\n    destroy()\n    {\n        const resources = this.resources;\n\n        for (const i in resources)\n        {\n            const resource = resources[i];\n\n            resource.off?.('change', this.onResourceChange, this);\n        }\n\n        this.resources = null;\n    }\n\n    private onResourceChange()\n    {\n        this.dirty = true;\n        this.update();\n    }\n}\n"],"names":[],"mappings":"AAEO,MAAM,SACb,CAAA;AAAA,EAOI,YAAY,SACZ,EAAA;AALA,IAAY,IAAA,CAAA,SAAA,GAAA,CAAA,CAAA;AAEZ,IAAA,IAAA,CAAQ,KAAQ,GAAA,IAAA,CAAA;AAIZ,IAAA,IAAA,CAAK,YAAY,EAAC,CAAA;AAElB,IAAA,IAAI,KAAQ,GAAA,CAAA,CAAA;AAEZ,IAAA,KAAA,MAAW,KAAK,SAChB,EAAA;AACI,MAAM,MAAA,QAAA,GAAyB,UAAU,CAAC,CAAA,CAAA;AAE1C,MAAK,IAAA,CAAA,WAAA,CAAY,UAAU,KAAO,EAAA,CAAA,CAAA;AAAA,KACtC;AAEA,IAAA,IAAA,CAAK,SAAU,EAAA,CAAA;AAAA,GACnB;AAAA,EAEA,MACA,GAAA;AACI,IAAA,IAAA,CAAK,SAAU,EAAA,CAAA;AAAA,GACnB;AAAA,EAEA,SACA,GAAA;AACI,IAAA,IAAI,CAAC,IAAK,CAAA,KAAA;AAAO,MAAA,OAAA;AAEjB,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AAEb,IAAA,MAAM,WAAW,EAAC,CAAA;AAClB,IAAA,IAAI,KAAQ,GAAA,CAAA,CAAA;AAGZ,IAAW,KAAA,MAAA,CAAA,IAAK,KAAK,SACrB,EAAA;AAEI,MAAA,QAAA,CAAS,KAAO,EAAA,CAAA,GAAI,IAAK,CAAA,SAAA,CAAU,CAAC,CAAE,CAAA,UAAA,CAAA;AAAA,KAC1C;AAEA,IAAK,IAAA,CAAA,GAAA,GAAM,QAAS,CAAA,IAAA,CAAK,GAAG,CAAA,CAAA;AAAA,GAChC;AAAA,EAEA,WAAA,CAAY,UAAwB,KACpC,EAAA;AACI,IAAM,MAAA,eAAA,GAAkB,IAAK,CAAA,SAAA,CAAU,KAAK,CAAA,CAAA;AAE5C,IAAA,IAAI,QAAa,KAAA,eAAA;AAAiB,MAAA,OAAA;AAElC,IAAA,IAAI,eACJ,EAAA;AACI,MAAA,QAAA,CAAS,GAAM,GAAA,QAAA,EAAU,IAAK,CAAA,gBAAA,EAAkB,IAAI,CAAA,CAAA;AAAA,KACxD;AAEA,IAAA,QAAA,CAAS,EAAK,GAAA,QAAA,EAAU,IAAK,CAAA,gBAAA,EAAkB,IAAI,CAAA,CAAA;AAEnD,IAAK,IAAA,CAAA,SAAA,CAAU,KAAK,CAAI,GAAA,QAAA,CAAA;AACxB,IAAA,IAAA,CAAK,KAAQ,GAAA,IAAA,CAAA;AAAA,GACjB;AAAA,EAEA,YAAY,KACZ,EAAA;AACI,IAAO,OAAA,IAAA,CAAK,UAAU,KAAK,CAAA,CAAA;AAAA,GAC/B;AAAA,EAEA,OACA,GAAA;AACI,IAAA,MAAM,YAAY,IAAK,CAAA,SAAA,CAAA;AAEvB,IAAA,KAAA,MAAW,KAAK,SAChB,EAAA;AACI,MAAM,MAAA,QAAA,GAAW,UAAU,CAAC,CAAA,CAAA;AAE5B,MAAA,QAAA,CAAS,GAAM,GAAA,QAAA,EAAU,IAAK,CAAA,gBAAA,EAAkB,IAAI,CAAA,CAAA;AAAA,KACxD;AAEA,IAAA,IAAA,CAAK,SAAY,GAAA,IAAA,CAAA;AAAA,GACrB;AAAA,EAEQ,gBACR,GAAA;AACI,IAAA,IAAA,CAAK,KAAQ,GAAA,IAAA,CAAA;AACb,IAAA,IAAA,CAAK,MAAO,EAAA,CAAA;AAAA,GAChB;AACJ;;;;"}