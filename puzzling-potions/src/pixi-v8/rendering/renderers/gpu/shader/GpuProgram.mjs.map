{"version":3,"file":"GpuProgram.mjs","sources":["../../../../../src/rendering/renderers/gpu/shader/GpuProgram.ts"],"sourcesContent":["import { extractStructAndGroups } from './extractStructAndGroups';\nimport { generateGpuLayoutGroups } from './generateGpuLayoutGroups';\nimport { generateLayoutHash } from './generateLayoutHash';\n\nimport type { ProgramLayout, ProgramPipelineLayoutDescription } from '../../gl/shader/GlProgram';\nimport type { StructsAndGroups } from './extractStructAndGroups';\n\nexport interface ProgramSource\n{\n    source: string;\n    entryPoint?: string;\n}\n\nexport interface GpuProgramOptions\n{\n    fragment?: ProgramSource;\n    vertex?: ProgramSource;\n    compute?: ProgramSource;\n    layout?: ProgramLayout;\n    gpuLayout?: ProgramPipelineLayoutDescription;\n}\n\n// TODO incorporate later?\nexport interface SimpleShaderOptions\n{\n    fragment?: string;\n    vertex?: string;\n}\n\nexport class GpuProgram\n{\n    compute?: ProgramSource;\n    fragment?: ProgramSource;\n    vertex?: ProgramSource;\n\n    layout: ProgramLayout;\n\n    gpuLayout: ProgramPipelineLayoutDescription;\n\n    _layoutKey = 0;\n    _gpuLayout: {\n        bindGroups: GPUBindGroupLayout[];\n        pipeline: GPUPipelineLayout | 'auto';\n    };\n\n    structsAndGroups: StructsAndGroups;\n\n    constructor({ fragment, vertex, compute, layout, gpuLayout }: GpuProgramOptions)\n    {\n        this.fragment = fragment;\n        this.vertex = vertex;\n        this.compute = compute;\n\n        // TODO this should be cached - or dealt with at a system level.\n        const structsAndGroups = extractStructAndGroups(this.fragment.source);\n\n        this.structsAndGroups = structsAndGroups;\n\n        // todo layout\n        this.layout = layout ?? generateLayoutHash(structsAndGroups);\n\n        // struct properties!\n\n        this.gpuLayout = gpuLayout ?? generateGpuLayoutGroups(structsAndGroups);\n    }\n\n    destroy(): void\n    {\n        this._gpuLayout = null;\n        this.gpuLayout = null;\n        this.layout = null;\n        this.structsAndGroups = null;\n        this.fragment = null;\n        this.vertex = null;\n        this.compute = null;\n    }\n\n    static programCached: Record<string, GpuProgram> = {};\n    static from(options: GpuProgramOptions): GpuProgram\n    {\n        // eslint-disable-next-line max-len\n        const key = `${options.vertex.source}:${options.fragment.source}:${options.fragment.entryPoint}:${options.vertex.entryPoint}`;\n\n        if (!GpuProgram.programCached[key])\n        {\n            GpuProgram.programCached[key] = new GpuProgram(options);\n        }\n\n        return GpuProgram.programCached[key];\n    }\n}\n"],"names":[],"mappings":";;;;AA6BO,MAAM,cAAN,MACP;AAAA,EAiBI,YAAY,EAAE,QAAA,EAAU,QAAQ,OAAS,EAAA,MAAA,EAAQ,WACjD,EAAA;AATA,IAAa,IAAA,CAAA,UAAA,GAAA,CAAA,CAAA;AAUT,IAAA,IAAA,CAAK,QAAW,GAAA,QAAA,CAAA;AAChB,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA,CAAA;AACd,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA,CAAA;AAGf,IAAA,MAAM,gBAAmB,GAAA,sBAAA,CAAuB,IAAK,CAAA,QAAA,CAAS,MAAM,CAAA,CAAA;AAEpE,IAAA,IAAA,CAAK,gBAAmB,GAAA,gBAAA,CAAA;AAGxB,IAAK,IAAA,CAAA,MAAA,GAAS,MAAU,IAAA,kBAAA,CAAmB,gBAAgB,CAAA,CAAA;AAI3D,IAAK,IAAA,CAAA,SAAA,GAAY,SAAa,IAAA,uBAAA,CAAwB,gBAAgB,CAAA,CAAA;AAAA,GAC1E;AAAA,EAEA,OACA,GAAA;AACI,IAAA,IAAA,CAAK,UAAa,GAAA,IAAA,CAAA;AAClB,IAAA,IAAA,CAAK,SAAY,GAAA,IAAA,CAAA;AACjB,IAAA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;AACd,IAAA,IAAA,CAAK,gBAAmB,GAAA,IAAA,CAAA;AACxB,IAAA,IAAA,CAAK,QAAW,GAAA,IAAA,CAAA;AAChB,IAAA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;AACd,IAAA,IAAA,CAAK,OAAU,GAAA,IAAA,CAAA;AAAA,GACnB;AAAA,EAGA,OAAO,KAAK,OACZ,EAAA;AAEI,IAAA,MAAM,GAAM,GAAA,CAAA,EAAG,OAAQ,CAAA,MAAA,CAAO,MAAU,CAAA,CAAA,EAAA,OAAA,CAAQ,QAAS,CAAA,MAAA,CAAA,CAAA,EAAU,OAAQ,CAAA,QAAA,CAAS,UAAc,CAAA,CAAA,EAAA,OAAA,CAAQ,MAAO,CAAA,UAAA,CAAA,CAAA,CAAA;AAEjH,IAAA,IAAI,CAAC,WAAA,CAAW,aAAc,CAAA,GAAG,CACjC,EAAA;AACI,MAAA,WAAA,CAAW,aAAc,CAAA,GAAG,CAAI,GAAA,IAAI,YAAW,OAAO,CAAA,CAAA;AAAA,KAC1D;AAEA,IAAO,OAAA,WAAA,CAAW,cAAc,GAAG,CAAA,CAAA;AAAA,GACvC;AACJ,CAAA,CAAA;AA7DO,IAAM,UAAN,GAAA,YAAA;AAAM,UAAA,CAgDF,gBAA4C,EAAC;;;;"}