{"version":3,"file":"GpuTextureSystem.js","sources":["../../../../../src/rendering/renderers/gpu/texture/GpuTextureSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../../../extensions/Extensions';\nimport { BindGroup } from '../shader/BindGroup';\nimport { gpuUploadBufferImageResource } from './uploaders/gpuUploadBufferImageResource';\nimport { gpuUploadImageResource } from './uploaders/gpuUploadImageSource';\nimport { GpuMipmapGenerator } from './utils/GpuMipmapGenerator';\n\nimport type { System } from '../../shared/system/System';\nimport type { TextureSource } from '../../shared/texture/sources/TextureSource';\nimport type { BindableTexture, Texture } from '../../shared/texture/Texture';\nimport type { TextureStyle } from '../../shared/texture/TextureStyle';\nimport type { GPU } from '../GpuDeviceSystem';\nimport type { GpuTextureUploader } from './uploaders/GpuTextureUploader';\n\nexport class GpuTextureSystem implements System\n{\n    /** @ignore */\n    static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'texture',\n    } as const;\n\n    protected CONTEXT_UID: number;\n    gpuSources: Record<number, GPUTexture> = {};\n    gpuSamplers: Record<string, GPUSampler> = {};\n    bindGroupHash: Record<string, BindGroup> = {};\n    textureViewHash: Record<string, GPUTextureView> = {};\n\n    managedTextureSources: Record<number, TextureSource> = {};\n\n    uploads: Record<string, GpuTextureUploader> = {\n        image: gpuUploadImageResource,\n        buffer: gpuUploadBufferImageResource\n    };\n\n    gpu: GPU;\n    mipmapGenerator?: GpuMipmapGenerator;\n\n    protected contextChange(gpu: GPU): void\n    {\n        this.gpu = gpu;\n    }\n\n    public initSource(source: TextureSource): GPUTexture\n    {\n        if (source.autoGenerateMipmaps)\n        {\n            const biggestDimension = Math.max(source.pixelWidth, source.pixelHeight);\n\n            source.mipLevelCount = Math.floor(Math.log2(biggestDimension)) + 1;\n        }\n\n        const textureDescriptor = {\n            size: { width: source.pixelWidth, height: source.pixelHeight },\n            format: source.format,\n            sampleCount: source.sampleCount,\n            mipLevelCount: source.mipLevelCount,\n            dimension: source.dimension,\n            usage: GPUTextureUsage.TEXTURE_BINDING\n                | GPUTextureUsage.COPY_DST\n                | GPUTextureUsage.RENDER_ATTACHMENT\n                | GPUTextureUsage.COPY_SRC,\n        };\n\n        const gpuTexture = this.gpu.device.createTexture(textureDescriptor);\n\n        this.gpuSources[source.uid] = gpuTexture;\n\n        this.managedTextureSources[source.uid] = source;\n\n        source.on('update', this.onSourceUpdate, this);\n        source.on('destroy', this.onSourceDestroy, this);\n        source.on('resize', this.onSourceResize, this);\n\n        this.onSourceUpdate(source);\n\n        return gpuTexture;\n    }\n\n    onSourceUpdate(source: TextureSource): void\n    {\n        const gpuTexture = this.gpuSources[source.uid];\n\n        // destroyed!\n        if (!gpuTexture) return;\n\n        if (this.uploads[source.type])\n        {\n            this.uploads[source.type].upload(source, gpuTexture, this.gpu);\n        }\n\n        if (source.autoGenerateMipmaps && source.mipLevelCount > 1)\n        {\n            if (!this.mipmapGenerator)\n            {\n                this.mipmapGenerator = new GpuMipmapGenerator(this.gpu.device);\n            }\n\n            this.mipmapGenerator.generateMipmap(gpuTexture);\n        }\n    }\n\n    onSourceDestroy(source: TextureSource): void\n    {\n        source.off('update', this.onSourceUpdate, this);\n        source.off('destroy', this.onSourceDestroy, this);\n        source.off('resize', this.onSourceResize, this);\n\n        const gpuTexture = this.gpuSources[source.uid];\n\n        delete this.gpuSources[source.uid];\n\n        gpuTexture.destroy();\n    }\n\n    onSourceResize(source: TextureSource): void\n    {\n        const gpuTexture = this.gpuSources[source.uid];\n\n        if (gpuTexture.width !== source.pixelWidth || gpuTexture.height !== source.pixelHeight)\n        {\n            this.gpuSources[source.uid].destroy();\n            this.gpuSources[source.uid] = null;\n            this.initSource(source);\n        }\n    }\n\n    initSampler(sampler: TextureStyle): GPUSampler\n    {\n        this.gpuSamplers[sampler.resourceId] = this.gpu.device.createSampler(sampler);\n\n        return this.gpuSamplers[sampler.resourceId];\n    }\n\n    getGpuSampler(sampler: TextureStyle): GPUSampler\n    {\n        return this.gpuSamplers[sampler.resourceId] || this.initSampler(sampler);\n    }\n\n    getGpuSource(source: TextureSource): GPUTexture\n    {\n        return this.gpuSources[source.uid] || this.initSource(source);\n    }\n\n    getTextureBindGroup(texture: Texture)\n    {\n        return this.bindGroupHash[texture.id] ?? this.createTextureBindGroup(texture);\n    }\n\n    createTextureBindGroup(texture: Texture)\n    {\n        const bindGroupId = texture.id;\n\n        this.bindGroupHash[bindGroupId] = new BindGroup({\n            0: texture.source,\n            1: texture.style,\n        });\n\n        return this.bindGroupHash[bindGroupId];\n    }\n\n    getTextureView(texture: BindableTexture)\n    {\n        const source = texture.source;\n\n        return this.textureViewHash[source.uid] ?? this.createTextureView(source);\n    }\n\n    createTextureView(texture: TextureSource)\n    {\n        this.textureViewHash[texture.uid] = this.getGpuSource(texture).createView();\n\n        return this.textureViewHash[texture.uid];\n    }\n\n    destroy(): void\n    {\n        throw new Error('Method not implemented.');\n    }\n}\n"],"names":["gpuUploadImageResource","gpuUploadBufferImageResource","GpuMipmapGenerator","BindGroup","ExtensionType"],"mappings":"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"}