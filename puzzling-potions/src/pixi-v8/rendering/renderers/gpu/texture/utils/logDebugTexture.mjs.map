{"version":3,"file":"logDebugTexture.mjs","sources":["../../../../../../src/rendering/renderers/gpu/texture/utils/logDebugTexture.ts"],"sourcesContent":["import { settings } from '../../../../../settings/settings';\nimport { WebGPURenderer } from '../../WebGPURenderer';\n\nimport type { ICanvas } from '../../../../../settings/adapter/ICanvas';\nimport type { WebGLRenderer } from '../../../gl/WebGLRenderer';\nimport type { Texture } from '../../../shared/texture/Texture';\nimport type { Renderer } from '../../../types';\n\nexport function textureToCanvas(texture: Texture, renderer: WebGPURenderer): ICanvas\n{\n    // renderer.renderTarget.finish();\n\n    renderer.encoder.finishRenderPass();\n\n    // // create a canvas with webGPU context\n    const commandEncoder = renderer.encoder.commandEncoder;\n\n    // create canvas\n    const canvas = settings.ADAPTER.createCanvas();\n\n    canvas.width = texture.source.pixelWidth;\n    canvas.height = texture.source.pixelHeight;\n\n    const context = canvas.getContext('webgpu') as unknown as GPUCanvasContext;\n\n    context.configure({\n        device: renderer.gpu.device,\n        // eslint-disable-next-line max-len\n        usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n        format: 'bgra8unorm',\n        alphaMode: 'opaque',\n    });\n\n    commandEncoder.copyTextureToTexture({\n        texture: renderer.texture.getGpuSource(texture.source),\n        origin: {\n            x: 0,\n            y: 0,\n        },\n    }, {\n        texture: context.getCurrentTexture(),\n    }, {\n        width: canvas.width,\n        height: canvas.height,\n    });\n\n    renderer.encoder.restoreRenderPass();\n\n    return canvas;\n}\n\nfunction arrayPostDivide(\n    pixels: number[] | Uint8Array | Uint8ClampedArray, out: number[] | Uint8Array | Uint8ClampedArray\n): void\n{\n    for (let i = 0; i < pixels.length; i += 4)\n    {\n        const alpha = out[i + 3] = pixels[i + 3];\n\n        if (alpha !== 0)\n        {\n            out[i] = Math.round(Math.min(pixels[i] * 255.0 / alpha, 255.0));\n            out[i + 1] = Math.round(Math.min(pixels[i + 1] * 255.0 / alpha, 255.0));\n            out[i + 2] = Math.round(Math.min(pixels[i + 2] * 255.0 / alpha, 255.0));\n        }\n        else\n        {\n            out[i] = pixels[i];\n            out[i + 1] = pixels[i + 1];\n            out[i + 2] = pixels[i + 2];\n        }\n    }\n}\n\nexport function textureToCanvasWebGL(texture: Texture, renderer: WebGLRenderer): ICanvas\n{\n    const currentRenderTarget = renderer.renderTarget.renderTarget;\n\n    renderer.renderTarget.bind(texture, false);\n\n    const width = Math.round(texture.source.pixelWidth);\n    const height = Math.round(texture.source.pixelHeight);\n\n    const pixels = new Uint8Array(4 * width * height);\n\n    // create canvas\n    const canvas = settings.ADAPTER.createCanvas();\n\n    canvas.width = width;\n    canvas.height = height;\n\n    const gl = renderer.gl;\n\n    gl.readPixels(\n        Math.round(texture.frameX),\n        Math.round(texture.frameY),\n        width,\n        height,\n        gl.RGBA,\n        gl.UNSIGNED_BYTE,\n        pixels\n    );\n\n    const context = canvas.getContext('2d');\n\n    const canvasData = context.getImageData(0, 0, width, height);\n\n    arrayPostDivide(pixels, canvasData.data);\n\n    context.putImageData(canvasData, 0, 0);\n\n    // flip the canvas..\n    const canvas2 = settings.ADAPTER.createCanvas();\n\n    canvas2.width = width;\n    canvas2.height = height;\n\n    const context2 = canvas2.getContext('2d');\n\n    context2.scale(1, -1);\n\n    // We can't render to itself because we should be empty before render.\n    context2.drawImage(canvas, 0, -height);\n\n    renderer.renderTarget.bind(currentRenderTarget, false);\n\n    return canvas2;\n}\n\nexport async function logDebugTexture(texture: Texture, renderer: Renderer, size = 200)\n{\n    let canvas: ICanvas;\n\n    if (renderer instanceof WebGPURenderer)\n    {\n        canvas = textureToCanvas(texture, renderer);\n    }\n    else\n    {\n        canvas = textureToCanvasWebGL(texture, renderer);\n    }\n\n    await renderer.encoder.commandFinished;\n\n    const base64 = canvas.toDataURL();\n\n    const width = size;\n\n    // eslint-disable-next-line no-console\n    console.log(`logging texture ${texture.source.width}px ${texture.source.height}px`);\n\n    const style = [\n        'font-size: 1px;',\n        `padding: ${width}px ${300}px;`,\n        `background: url(${base64}) no-repeat;`,\n        'background-size: contain;',\n    ].join(' ');\n\n    // eslint-disable-next-line no-console\n    console.log('%c ', style);\n}\n"],"names":[],"mappings":"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"}