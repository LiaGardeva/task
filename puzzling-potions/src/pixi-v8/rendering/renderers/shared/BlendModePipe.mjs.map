{"version":3,"file":"BlendModePipe.mjs","sources":["../../../../src/rendering/renderers/shared/BlendModePipe.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { ColorBlend } from '../../filters/blend-modes/ColorBlend';\nimport { ColorBurnBlend } from '../../filters/blend-modes/ColorBurnBlend';\nimport { ColorDodgeBlend } from '../../filters/blend-modes/ColorDodgeBlend';\nimport { DarkenBlend } from '../../filters/blend-modes/DarkenBlend';\nimport { DifferenceBlend } from '../../filters/blend-modes/DifferenceBlend';\nimport { DivideBlend } from '../../filters/blend-modes/DivideBlend';\nimport { ExclusionBlend } from '../../filters/blend-modes/ExclusionBlend';\nimport { HardLightBlend } from '../../filters/blend-modes/HardLightBlend';\nimport { HardMixBlend } from '../../filters/blend-modes/HardMixBlend';\nimport { LightenBlend } from '../../filters/blend-modes/LightenBlend';\nimport { LinearBurnBlend } from '../../filters/blend-modes/LinearBurnBlend';\nimport { LinearDodgeBlend } from '../../filters/blend-modes/LinearDodgeBlend';\nimport { LinearLightBlend } from '../../filters/blend-modes/LinearLightBlend';\nimport { LuminosityBlend } from '../../filters/blend-modes/LuminosityBlend';\nimport { NegationBlend } from '../../filters/blend-modes/NegationBlend';\nimport { OverlayBlend } from '../../filters/blend-modes/OverlayBlend';\nimport { PinLightBlend } from '../../filters/blend-modes/PinLightBlend';\nimport { SaturationBlend } from '../../filters/blend-modes/SaturationBlend';\nimport { SoftLightBlend } from '../../filters/blend-modes/SoftLightBlend';\nimport { SubtractBlend } from '../../filters/blend-modes/SubtractBlend';\nimport { VividLightBlend } from '../../filters/blend-modes/VividLightBlend';\nimport { FilterEffect } from '../../filters/FilterEffect';\n\nimport type { BlendModeFilter } from '../../filters/blend-modes/BlendModeFilter';\nimport type { FilterInstruction } from '../../filters/shared/FilterSystem';\nimport type { Renderer } from '../types';\nimport type { Instruction } from './instructions/Instruction';\nimport type { InstructionSet } from './instructions/InstructionSet';\nimport type { InstructionPipe } from './instructions/RenderPipe';\nimport type { Renderable } from './Renderable';\nimport type { BLEND_MODES } from './state/const';\n\nexport interface AdvancedBlendInstruction extends Instruction\n{\n    type: 'blendMode',\n    blendMode: BLEND_MODES,\n    activeBlend: Renderable[],\n}\n\n// class map\nconst BLEND_MODE_FILTERS: Partial<Record<BLEND_MODES, new () => BlendModeFilter>> = {\n    color: ColorBlend,\n    'color-burn': ColorBurnBlend,\n    'color-dodge': ColorDodgeBlend,\n    darken: DarkenBlend,\n    difference: DifferenceBlend,\n    divide: DivideBlend,\n    exclusion: ExclusionBlend,\n    'hard-light': HardLightBlend,\n    'hard-mix': HardMixBlend,\n    lighten: LightenBlend,\n    'linear-burn': LinearBurnBlend,\n    'linear-dodge': LinearDodgeBlend,\n    'linear-light': LinearLightBlend,\n    luminosity: LuminosityBlend,\n    negation: NegationBlend,\n    overlay: OverlayBlend,\n    'pin-light': PinLightBlend,\n    saturation: SaturationBlend,\n    'soft-light': SoftLightBlend,\n    subtract: SubtractBlend,\n    'vivid-light': VividLightBlend,\n} as const;\n\nexport class BlendModePipe implements InstructionPipe<AdvancedBlendInstruction>\n{\n    static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'blendMode',\n    } as const;\n\n    private renderer: Renderer;\n\n    private renderableList: Renderable[];\n    private activeBlendMode: BLEND_MODES;\n\n    private isAdvanced = false;\n\n    private filterHash: Partial<Record<BLEND_MODES, FilterEffect>> = {};\n\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    setBlendMode(renderable: Renderable, blendMode: BLEND_MODES, instructionSet: InstructionSet)\n    {\n        if (this.activeBlendMode === blendMode)\n        {\n            if (this.isAdvanced)\n            {\n                this.renderableList.push(renderable);\n            }\n\n            return;\n        }\n\n        this.activeBlendMode = blendMode;\n\n        if (this.isAdvanced)\n        {\n            this.endAdvancedBlendMode(instructionSet);\n        }\n\n        this.isAdvanced = !!BLEND_MODE_FILTERS[blendMode];\n\n        if (this.isAdvanced)\n        {\n            this.beginAdvancedBlendMode(instructionSet);\n\n            this.renderableList.push(renderable);\n        }\n    }\n\n    private beginAdvancedBlendMode(instructionSet: InstructionSet)\n    {\n        this.renderer.renderPipes.batch.break(instructionSet);\n\n        const blendMode = this.activeBlendMode;\n\n        if (!BLEND_MODE_FILTERS[blendMode as keyof typeof BLEND_MODE_FILTERS])\n        {\n            console.warn(`Unable to assign 'BLEND_MODES.${blendMode}' using the blend mode pipeline`);\n\n            return;\n        }\n\n        // this does need an execute?\n        if (!this.filterHash[blendMode])\n        {\n            this.filterHash[blendMode] = new FilterEffect({\n                filters: [new BLEND_MODE_FILTERS[blendMode as keyof typeof BLEND_MODE_FILTERS]()]\n            });\n        }\n\n        const instruction: FilterInstruction = {\n            type: 'filter',\n            action: 'pushFilter',\n            renderables: [],\n            filterEffect: this.filterHash[blendMode],\n            canBundle: false,\n        };\n\n        this.renderableList = instruction.renderables;\n        instructionSet.add(instruction);\n    }\n\n    private endAdvancedBlendMode(instructionSet: InstructionSet)\n    {\n        this.renderableList = null;\n        this.renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            type: 'filter',\n            action: 'popFilter',\n            canBundle: false,\n        });\n    }\n\n    buildStart()\n    {\n        this.isAdvanced = false;\n    }\n\n    buildEnd(instructionSet: InstructionSet)\n    {\n        if (this.isAdvanced)\n        {\n            this.endAdvancedBlendMode(instructionSet);\n        }\n    }\n\n    destroy()\n    {\n        this.renderer = null;\n        this.renderableList = null;\n\n        for (const i in this.filterHash)\n        {\n            this.filterHash[i as BLEND_MODES].destroy();\n        }\n\n        this.filterHash = null;\n    }\n}\n"],"names":[],"mappings":"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"}