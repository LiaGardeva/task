{"version":3,"file":"View.js","sources":["../../../../src/rendering/renderers/shared/View.ts"],"sourcesContent":["import type { Point } from '../../../maths/Point';\nimport type { Bounds } from '../../scene/bounds/Bounds';\nimport type { DestroyOptions } from '../../scene/destroyTypes';\n\nexport interface ViewObserver\n{\n    onViewUpdate: () => void;\n}\n\nexport const emptyViewObserver: ViewObserver = {\n    onViewUpdate: () => { /* empty */ },\n};\n\nexport interface View\n{\n    uid: number;\n\n    batched: boolean;\n\n    /**\n     * an identifier that is used to identify the type of system that will be used to render this renderable\n     * eg, 'sprite' will use the sprite system (based on the systems name\n     */\n    type: string;\n\n    owner: ViewObserver;\n\n    addBounds: (bounds: Bounds) => void;\n    containsPoint: (point: Point) => boolean;\n\n    destroy(options?: DestroyOptions): void;\n}\n\n"],"names":[],"mappings":";;;;AASO,MAAM,iBAAkC,GAAA;AAAA,EAC3C,cAAc,MAAM;AAAA,GAAc;AACtC;;;;"}