{"version":3,"file":"BackgroundSystem.mjs","sources":["../../../../../src/rendering/renderers/shared/background/BackgroundSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../../../extensions/Extensions';\nimport { hex2rgb, hex2string } from '../../../../utils/color/hex';\n\nimport type { System } from '../system/System';\n\n/**\n * Options for the background system.\n * @ignore\n */\nexport interface BackgroundSystemOptions\n{\n    /**\n     * The background color used to clear the canvas. See {@link PIXI.ColorSource} for accepted color values.\n     * @memberof PIXI.WebGLOptions\n     */\n    backgroundColor: number; // TODO: ColorSource;\n    /**\n     * Alias for {@link PIXI.WebGLOptions.backgroundColor}\n     * @memberof PIXI.WebGLOptions\n     */\n    background?: number; // TODO: ColorSource\n    /**\n     * Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n     * @memberof PIXI.WebGLOptions\n     */\n    backgroundAlpha: number;\n    /**\n     * Whether to clear the canvas before new render passes.\n     * @memberof PIXI.WebGLOptions\n     */\n    clearBeforeRender: boolean;\n}\n\nexport const defaultBackgroundOptions = {\n    alpha: 1,\n    color: 0x000000,\n    clearBeforeRender: true,\n};\n\ntype ColorObject = { r: number; g: number; b: number; a: number };\n\n/**\n * The background system manages the background color and alpha of the main view.\n * @memberof PIXI\n */\nexport class BackgroundSystem implements System\n{\n    /** @ignore */\n    static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'background',\n        priority: 0,\n    } as const;\n\n    /** @ignore */\n    static defaultOptions: BackgroundSystemOptions = {\n        /**\n         * {@link PIXI.WebGLOptions.backgroundAlpha}\n         * @default 1\n         */\n        backgroundAlpha: 1,\n        /**\n         * {@link PIXI.WebGLOptions.backgroundColor}\n         * @default 0x000000\n         */\n        backgroundColor: 0x0,\n        /**\n         * {@link PIXI.WebGLOptions.clearBeforeRender}\n         * @default true\n         */\n        clearBeforeRender: true,\n    };\n\n    /**\n     * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.\n     * If the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every\n     * frame to set the canvas background color. If the scene is transparent PixiJS will use clearRect\n     * to clear the canvas every frame. Disable this by setting this to false. For example, if\n     * your game has a canvas filling background image you often don't need this set.\n     */\n    public clearBeforeRender: boolean;\n\n    private _backgroundColorString: string;\n    private _backgroundColorRgba: [number, number, number, number];\n    private _backgroundColor: number;\n    private readonly _backgroundColorRgbaObject: ColorObject;\n\n    constructor()\n    {\n        this.clearBeforeRender = true;\n\n        this._backgroundColor = 0x000000;\n\n        this._backgroundColorRgba = [0, 0, 0, 1];\n        this._backgroundColorRgbaObject = { r: 0, g: 0, b: 0, a: 1 };\n\n        this._backgroundColorString = '#000000';\n\n        this.color = this._backgroundColor; // run bg color setter\n        this.alpha = 1;\n    }\n\n    /**\n     * initiates the background system\n     * @param options - the options for the background colors\n     */\n    init(options: BackgroundSystemOptions): void\n    {\n        options = { ...defaultBackgroundOptions, ...options };\n\n        this.clearBeforeRender = options.clearBeforeRender;\n        this.color = options.backgroundColor || this._backgroundColor; // run bg color setter\n        this.alpha = options.backgroundAlpha;\n    }\n\n    /** The background color to fill if not transparent */\n    get color(): number\n    {\n        return this._backgroundColor;\n    }\n\n    set color(value: number)\n    {\n        this._backgroundColor = value;\n        this._backgroundColorString = hex2string(value);\n\n        const rgbaObject = this._backgroundColorRgbaObject;\n        const rgba = this._backgroundColorRgba;\n\n        hex2rgb(value, rgba);\n\n        rgbaObject.r = rgba[0];\n        rgbaObject.g = rgba[1];\n        rgbaObject.b = rgba[2];\n        rgbaObject.a = rgba[3];\n    }\n\n    /** The background color alpha. Setting this to 0 will make the canvas transparent. */\n    get alpha(): number\n    {\n        return this._backgroundColorRgba[3];\n    }\n\n    set alpha(value: number)\n    {\n        this._backgroundColorRgba[3] = value;\n    }\n\n    /** The background color as an [R, G, B, A] array. */\n    get colorRgba(): [number, number, number, number]\n    {\n        return this._backgroundColorRgba;\n    }\n\n    get colorRgbaObject(): ColorObject\n    {\n        return this._backgroundColorRgbaObject;\n    }\n\n    /** The background color as a string. */\n    get colorString(): string\n    {\n        return this._backgroundColorString;\n    }\n\n    destroy(): void\n    {\n        // ka boom!\n    }\n}\n"],"names":[],"mappings":"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"}