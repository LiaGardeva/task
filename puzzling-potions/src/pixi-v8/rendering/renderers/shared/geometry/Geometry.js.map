{"version":3,"file":"Geometry.js","sources":["../../../../../src/rendering/renderers/shared/geometry/Geometry.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { ensureIsBuffer } from './utils/ensureIsBuffer';\n\nimport type { Buffer, TypedArray } from '../buffer/Buffer';\nimport type { Topology, VertexFormat } from './const';\n\nexport interface Attribute\n{\n    buffer: Buffer;\n    stride: number;\n    offset: number;\n    format: VertexFormat;\n    instance?: boolean;\n    shaderLocation: number; // TODO - auto assign this move this?? introspection??\n    size?: number;\n    type?: number;\n    start?: number;\n}\n\ntype AttributesOption = Omit<Attribute, 'buffer'> & { buffer: Buffer | TypedArray | number[]};\n\nexport interface GeometryDescriptor\n{\n    label?: string;\n    attributes: Record<string, AttributesOption>;\n    indexBuffer?: Buffer | TypedArray | number[];\n    topology?: Topology;\n}\n\nlet UID = 1;\n\nexport class Geometry extends EventEmitter<{\n    update: Geometry,\n    destroy: Geometry,\n}>\n{\n    topology: Topology;\n\n    uid: number = UID++;\n    attributes: Record<string, Attribute>;\n    buffers: Buffer[];\n    indexBuffer: Buffer;\n\n    _layoutKey = 0;\n    _bufferLayout: Record<number, Buffer>;\n\n    tick = 0;\n\n    instanced: boolean;\n    instanceCount: number;\n\n    constructor({ attributes, indexBuffer, topology }: GeometryDescriptor)\n    {\n        super();\n\n        this.attributes = attributes as Record<string, Attribute>;\n        this.buffers = [];\n\n        for (const i in attributes)\n        {\n            const attribute = attributes[i];\n\n            attribute.buffer = ensureIsBuffer(attribute.buffer, false);\n\n            const bufferIndex = this.buffers.indexOf(attribute.buffer);\n\n            if (bufferIndex === -1)\n            {\n                this.buffers.push(attribute.buffer);\n\n                attribute.buffer.on('update', this.onBufferUpdate, this);\n            }\n        }\n\n        if (indexBuffer)\n        {\n            this.indexBuffer = ensureIsBuffer(indexBuffer, true);\n\n            this.buffers.push(this.indexBuffer);\n        }\n\n        this.topology = topology || 'triangle-list';\n    }\n\n    setBufferAtIndex(buffer: Buffer, index: number): void\n    {\n        const previousBuffer = this.buffers[index];\n\n        previousBuffer.off('update', this.onBufferUpdate, this);\n\n        buffer.on('update', this.onBufferUpdate, this);\n\n        this.buffers[index] = buffer;\n\n        for (const i in this.attributes)\n        {\n            const attribute = this.attributes[i];\n\n            if (attribute.buffer === previousBuffer)\n            {\n                attribute.buffer = buffer;\n            }\n        }\n    }\n\n    onBufferUpdate(): void\n    {\n        this.tick = this.tick++;\n        this.emit('update', this);\n    }\n\n    /**\n     * Returns the requested attribute.\n     * @param id - The name of the attribute required\n     * @returns - The attribute requested.\n     */\n    getAttribute(id: string): Attribute\n    {\n        return this.attributes[id];\n    }\n\n    /**\n     * Returns the index buffer\n     * @returns - The index buffer.\n     */\n    getIndex(): Buffer\n    {\n        return this.indexBuffer;\n    }\n\n    /**\n     * Returns the requested buffer.\n     * @param id - The name of the buffer required.\n     * @returns - The buffer requested.\n     */\n    getBuffer(id: string): Buffer\n    {\n        return this.getAttribute(id).buffer;\n    }\n\n    getSize(): number\n    {\n        for (const i in this.attributes)\n        {\n            const attribute = this.attributes[i];\n            const buffer = this.getBuffer(i);\n\n            // TODO use SIZE again like v7..\n            return (buffer.data as any).length / ((attribute.stride / 4) || attribute.size);\n        }\n\n        return 0;\n    }\n\n    destroy(destroyBuffers = false): void\n    {\n        this.emit('destroy', this);\n\n        this.removeAllListeners();\n\n        if (destroyBuffers)\n        {\n            this.buffers.forEach((buffer) => buffer.destroy());\n        }\n\n        this.attributes = null;\n        this.buffers = null;\n    }\n}\n\n"],"names":["EventEmitter","ensureIsBuffer"],"mappings":"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"}