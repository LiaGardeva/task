{"version":3,"file":"GlobalUniformSystem.mjs","sources":["../../../../../src/rendering/renderers/shared/renderTarget/GlobalUniformSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../../../extensions/Extensions';\nimport { Matrix } from '../../../../maths/Matrix';\nimport { Point } from '../../../../maths/Point';\nimport { BindGroup } from '../../gpu/shader/BindGroup';\nimport { UniformGroup } from '../shader/UniformGroup';\n\nimport type { PointData } from '../../../../maths/PointData';\nimport type { GlRenderTargetSystem } from '../../gl/GlRenderTargetSystem';\nimport type { GpuRenderTargetSystem } from '../../gpu/renderTarget/GpuRenderTargetSystem';\nimport type { WebGPURenderer } from '../../gpu/WebGPURenderer';\nimport type { Renderer } from '../../types';\nimport type { UniformBufferSystem } from '../shader/UniformBufferSystem';\nimport type { System } from '../system/System';\n\nexport type GlobalUniformGroup = UniformGroup<{\n    projectionMatrix: { value: Matrix; type: 'mat3x3<f32>' }\n    worldTransformMatrix: { value: Matrix; type: 'mat3x3<f32>' }\n    worldAlpha: { value: number; type: 'f32' }\n}>;\n\nexport interface GlobalUniformOptions\n{\n    projectionMatrix?: Matrix\n    worldTransformMatrix?: Matrix\n    worldColor?: number\n    offset?: PointData\n}\n\nexport interface GlobalUniformData\n{\n    projectionMatrix: Matrix\n    worldTransformMatrix: Matrix\n    worldColor: number\n    offset: PointData\n    bindGroup: BindGroup\n}\n\ninterface GlobalUniformRenderer\n{\n    renderTarget: GlRenderTargetSystem | GpuRenderTargetSystem\n    renderPipes: Renderer['renderPipes'];\n    uniformBuffer: UniformBufferSystem;\n}\n\nexport class GlobalUniformSystem implements System\n{\n    /** @ignore */\n    static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'globalUniforms',\n    } as const;\n\n    private renderer: GlobalUniformRenderer;\n\n    private stackIndex = 0;\n    private globalUniformDataStack: GlobalUniformData[] = [];\n\n    private uniformsPool: GlobalUniformGroup[] = [];\n    private activeUniforms: GlobalUniformGroup[] = [];\n\n    private bindGroupPool: BindGroup[] = [];\n    private activeBindGroups: BindGroup[] = [];\n\n    private currentGlobalUniformData: GlobalUniformData;\n\n    constructor(renderer: GlobalUniformRenderer)\n    {\n        this.renderer = renderer;\n    }\n\n    reset()\n    {\n        this.stackIndex = 0;\n\n        for (let i = 0; i < this.activeUniforms.length; i++)\n        {\n            this.uniformsPool.push(this.activeUniforms[i]);\n        }\n\n        for (let i = 0; i < this.activeBindGroups.length; i++)\n        {\n            this.bindGroupPool.push(this.activeBindGroups[i]);\n        }\n\n        this.activeUniforms.length = 0;\n        this.activeBindGroups.length = 0;\n    }\n\n    start(options: GlobalUniformOptions): void\n    {\n        this.reset();\n\n        this.push(options);\n    }\n\n    bind({\n        projectionMatrix,\n        worldTransformMatrix,\n        worldColor,\n        offset,\n    }: GlobalUniformOptions)\n    {\n        const currentGlobalUniformData = this.stackIndex ? this.globalUniformDataStack[this.stackIndex - 1] : {\n            projectionMatrix: this.renderer.renderTarget.renderTarget.projectionMatrix,\n            worldTransformMatrix: new Matrix(),\n            worldColor: 0xFFFFFFFF,\n            offset: new Point(),\n        };\n\n        const globalUniformData: GlobalUniformData = {\n            projectionMatrix: projectionMatrix || this.renderer.renderTarget.renderTarget.projectionMatrix,\n            worldTransformMatrix: worldTransformMatrix || currentGlobalUniformData.worldTransformMatrix,\n            worldColor: worldColor || currentGlobalUniformData.worldColor,\n            offset: offset || currentGlobalUniformData.offset,\n            bindGroup: null,\n        };\n\n        const uniformGroup = this.uniformsPool.pop() || this.createUniforms();\n\n        this.activeUniforms.push(uniformGroup);\n\n        const uniforms = uniformGroup.uniforms;\n\n        uniforms.projectionMatrix = globalUniformData.projectionMatrix;\n        uniforms.worldTransformMatrix.copyFrom(globalUniformData.worldTransformMatrix);\n\n        uniforms.worldTransformMatrix.tx -= globalUniformData.offset.x;\n        uniforms.worldTransformMatrix.ty -= globalUniformData.offset.y;\n\n        // TODO - this should be the full rgb color...\n        uniforms.worldAlpha = ((globalUniformData.worldColor >> 24) & 0xFF) / 255;\n\n        uniformGroup.update();\n\n        let bindGroup: BindGroup;\n\n        if ((this.renderer as WebGPURenderer).renderPipes.uniformBatch)\n        {\n            bindGroup = (this.renderer as WebGPURenderer).renderPipes.uniformBatch.getUniformBindGroup(uniformGroup, false);\n        }\n        else\n        {\n            this.renderer.uniformBuffer.updateUniformGroup(uniformGroup as UniformGroup);\n\n            bindGroup = this.bindGroupPool.pop() || new BindGroup();\n            this.activeBindGroups.push(bindGroup);\n            bindGroup.setResource(uniformGroup, 0);\n        }\n\n        globalUniformData.bindGroup = bindGroup;\n\n        this.currentGlobalUniformData = globalUniformData;\n    }\n\n    push(options: GlobalUniformOptions)\n    {\n        this.bind(options);\n\n        this.globalUniformDataStack[this.stackIndex++] = this.currentGlobalUniformData;\n    }\n\n    pop()\n    {\n        this.currentGlobalUniformData = this.globalUniformDataStack[--this.stackIndex - 1];\n    }\n\n    get bindGroup(): BindGroup\n    {\n        return this.currentGlobalUniformData.bindGroup;\n    }\n\n    get uniformGroup()\n    {\n        return this.currentGlobalUniformData.bindGroup.resources[0] as UniformGroup;\n    }\n\n    private createUniforms(): GlobalUniformGroup\n    {\n        const globalUniforms = new UniformGroup({\n            projectionMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            worldTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            // TODO - someone smart - set this to be a unorm8x4 rather than a vec4<f32>\n            worldAlpha: { value: 1, type: 'f32' },\n        }, {\n            ubo: true,\n            isStatic: true,\n        });\n\n        return globalUniforms;\n    }\n\n    destroy()\n    {\n        // boom!\n    }\n}\n"],"names":[],"mappings":"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"}