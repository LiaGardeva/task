{"version":3,"file":"RenderTarget.js","sources":["../../../../../src/rendering/renderers/shared/renderTarget/RenderTarget.ts"],"sourcesContent":["// what we are building is a platform and a framework.\n// import { Matrix } from '../../shared/maths/Matrix';\nimport { Matrix } from '../../../../maths/Matrix';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { calculateProjection } from '../../gpu/renderTarget/calculateProjection';\nimport { TextureSource } from '../texture/sources/TextureSource';\nimport { Texture } from '../texture/Texture';\n\nexport interface RenderTargetDescriptor\n{\n    width?: number;\n    height?: number;\n    resolution?: number;\n    colorTextures?: Texture[] | number;\n\n    // TODO this is actually depth and stencil buffer..\n    depthTexture?: Texture | boolean;\n    stencil?: boolean;\n    antialias?: boolean;\n}\n\nlet UID = 0;\n\nexport class RenderTarget\n{\n    static defaultDescriptor: RenderTargetDescriptor = {\n        width: 0,\n        height: 0,\n        resolution: 1,\n        colorTextures: 1,\n        stencil: true,\n        antialias: false, // save on perf by default!\n    };\n\n    uid = UID++;\n\n    width = 0;\n    height = 0;\n    resolution = 1;\n\n    colorTextures: Texture[] = [];\n\n    depthTexture: Texture;\n\n    clearColor = 0x000000;\n\n    antialias: boolean;\n    stencil: boolean;\n\n    dirtyId = 0;\n    isRoot = false;\n\n    private _viewport: Rectangle;\n    private _projectionMatrix = new Matrix();\n\n    constructor(descriptor: RenderTargetDescriptor = {})\n    {\n        descriptor = { ...RenderTarget.defaultDescriptor, ...descriptor };\n\n        this.width = descriptor.width;\n        this.height = descriptor.height;\n        this.resolution = descriptor.resolution;\n        this.stencil = descriptor.stencil;\n\n        this._viewport = new Rectangle(0, 0, this.width, this.height);\n\n        if (typeof descriptor.colorTextures === 'number')\n        {\n            for (let i = 0; i < descriptor.colorTextures; i++)\n            {\n                this.colorTextures.push(new Texture({\n                    source: new TextureSource({\n                        width: this.width,\n                        height: this.height,\n                        resolution: descriptor.resolution,\n                        antialias: descriptor.antialias,\n                    })\n                }));\n            }\n        }\n        else\n        {\n            this.colorTextures = [...descriptor.colorTextures];\n\n            const colorSource = this.colorTexture.source;\n\n            this.resize(colorSource.width, colorSource.height, colorSource._resolution);\n        }\n\n        // the first color texture drives the size of all others..\n        this.colorTexture.source.on('resize', this.onSourceResize, this);\n\n        // TODO should listen for texture destroyed?\n\n        if (descriptor.depthTexture)\n        {\n            this.depthTexture = new Texture({\n                source: new TextureSource({\n                    width: this.width,\n                    height: this.height,\n                    resolution: this.resolution,\n                    format: 'stencil8',\n                    // sampleCount: handled by the render target system..\n                })\n            });\n        }\n    }\n\n    get pixelWidth(): number\n    {\n        return this.width * this.resolution;\n    }\n\n    get pixelHeight(): number\n    {\n        return this.height * this.resolution;\n    }\n\n    get colorTexture(): Texture\n    {\n        return this.colorTextures[0];\n    }\n\n    get projectionMatrix(): Matrix\n    {\n        const texture = this.colorTexture;\n\n        // TODO - this needs to only happen on resize - or behind a dirty flag\n        calculateProjection(this._projectionMatrix, 0, 0, texture.frameWidth, texture.frameHeight, !this.isRoot);\n\n        return this._projectionMatrix;\n    }\n\n    get viewport(): Rectangle\n    {\n        // TODO - this needs to only happen on resize or when a texture frame changes\n        const texture = this.colorTexture;\n        const source = texture.source;\n\n        const pixelWidth = source.pixelWidth;\n        const pixelHeight = source.pixelHeight;\n\n        const viewport = this._viewport;\n        const frame = texture.layout.frame;\n\n        viewport.x = (frame.x * pixelWidth) | 0;\n        viewport.y = (frame.y * pixelHeight) | 0;\n        viewport.width = (frame.width * pixelWidth) | 0;\n        viewport.height = (frame.height * pixelHeight) | 0;\n\n        return viewport;\n    }\n\n    protected onSourceResize(source: TextureSource)\n    {\n        this.resize(source.width, source.height, source._resolution, true);\n    }\n\n    private resize(width: number, height: number, resolution = this.resolution, skipColorTexture = false)\n    {\n        this.width = width;\n        this.height = height;\n        this.resolution = resolution;\n\n        this.dirtyId++;\n\n        this.colorTextures.forEach((colorTexture, i) =>\n        {\n            if (skipColorTexture && i === 0) return;\n\n            colorTexture.source.resize(width, height, resolution);\n        });\n\n        if (this.depthTexture)\n        {\n            this.depthTexture.source.resize(width, height, resolution);\n        }\n    }\n\n    destroy()\n    {\n        throw new Error('Method not implemented.');\n    }\n}\n"],"names":["Matrix","Rectangle","Texture","TextureSource","calculateProjection"],"mappings":"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"}