{"version":3,"file":"Shader.js","sources":["../../../../../src/rendering/renderers/shared/shader/Shader.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { BindGroup } from '../../gpu/shader/BindGroup';\n\nimport type { GlProgram } from '../../gl/shader/GlProgram';\nimport type { GpuProgram } from '../../gpu/shader/GpuProgram';\n\nexport type ShaderGroups = Record<number, BindGroup>;\n\nexport interface ShaderWithGroupsDescriptor\n{\n    glProgram?: GlProgram;\n    gpuProgram?: GpuProgram;\n    groups: ShaderGroups;\n    groupMap?: Record<string, Record<string, any>>;\n}\n\nexport interface ShaderWithResourcesDescriptor\n{\n    glProgram?: GlProgram;\n    gpuProgram?: GpuProgram;\n    resources: Record<string, any>;\n}\n\ninterface GroupsData\n{\n    group: number\n    binding: number\n    name: string\n}\n\ntype ShaderDescriptor = ShaderWithGroupsDescriptor & ShaderWithResourcesDescriptor;\n\nexport class Shader extends EventEmitter<{\n    'destroy': Shader;\n}>\n{\n    gpuProgram: GpuProgram;\n    glProgram: GlProgram;\n\n    groups: Record<number, BindGroup>;\n    resources: Record<string, any>;\n\n    uniformBindMap: Record<number, Record<number, string>> = {};\n\n    constructor({ gpuProgram, glProgram, resources }: ShaderWithResourcesDescriptor);\n    constructor({ gpuProgram, glProgram, groups, groupMap }: ShaderWithGroupsDescriptor);\n    constructor({ gpuProgram, glProgram, groups, resources, groupMap }: ShaderDescriptor)\n    {\n        super();\n\n        this.gpuProgram = gpuProgram;\n        this.glProgram = glProgram;\n\n        const nameHash: Record<string, GroupsData> = {};\n\n        if (resources && groups)\n        {\n            throw new Error('[Shader] Cannot have both resources and groups');\n        }\n        else if (!resources && !groups)\n        {\n            throw new Error('[Shader] Must provide either resources or groups descriptor');\n        }\n        else if (!gpuProgram && groups && !groupMap)\n        {\n            throw new Error('[Shader] No group map or WebGPU shader provided - consider using resources instead.');\n        }\n        else if (!gpuProgram && groups && groupMap)\n        {\n            for (const i in groupMap)\n            {\n                for (const j in groupMap[i])\n                {\n                    const uniformName = groupMap[i][j];\n\n                    nameHash[uniformName] = {\n                        group: i as unknown as number,\n                        binding: j as unknown as number,\n                        name: uniformName\n                    };\n                }\n            }\n        }\n        else if (gpuProgram && groups && !groupMap)\n        {\n            const groupData = gpuProgram.structsAndGroups.groups;\n\n            groupMap = {};\n\n            groupData.forEach((data) =>\n            {\n                groupMap[data.group] = groupMap[data.group] || {};\n                groupMap[data.group][data.binding] = data.name;\n\n                nameHash[data.name] = data;\n            });\n        }\n        else if (resources)\n        {\n            if (!gpuProgram)\n            {\n                // build out a dummy bind group..\n                groupMap = {};\n                groups = {\n                    99: new BindGroup(),\n                };\n\n                let bindTick = 0;\n\n                for (const i in resources)\n                {\n                    // Yes i know this is a little strange, but wil line up the shaders neatly\n                    // basically we want to be driven by how webGPU does things.\n                    // so making a fake group will work and not affect gpu as it means no gpu shader was provided..\n                    nameHash[i] = { group: 99, binding: bindTick, name: i };\n                    groups[99].setResource(resources[i], bindTick);\n\n                    groupMap[99] = groupMap[99] || {};\n                    groupMap[99][bindTick] = i;\n\n                    bindTick++;\n                }\n            }\n            else\n            {\n                const groupData = gpuProgram.structsAndGroups.groups;\n\n                groupMap = {};\n\n                groupData.forEach((data) =>\n                {\n                    groupMap[data.group] = groupMap[data.group] || {};\n                    groupMap[data.group][data.binding] = data.name;\n\n                    nameHash[data.name] = data;\n                });\n            }\n\n            groups = {};\n\n            for (const i in resources)\n            {\n                const name = i;\n                const value = resources[i];\n\n                const data = nameHash[name];\n\n                if (data)\n                {\n                    groups[data.group] = groups[data.group] || new BindGroup();\n\n                    groups[data.group].setResource(value, data.binding);\n                }\n            }\n        }\n\n        this.groups = groups;\n        this.uniformBindMap = groupMap;\n\n        this.resources = this._buildResourceAccessor(groups, nameHash);\n    }\n\n    private _buildResourceAccessor(groups: ShaderGroups, nameHash: Record<string, GroupsData>)\n    {\n        const uniformsOut = {};\n\n        for (const i in nameHash)\n        {\n            const data = nameHash[i];\n\n            // add getter setter for uniforms\n            Object.defineProperty(uniformsOut, data.name, {\n                get()\n                {\n                    return groups[data.group].getResource(data.binding);\n                },\n                set(value)\n                {\n                    groups[data.group].setResource(value, data.binding);\n                }\n            });\n        }\n\n        return uniformsOut;\n    }\n\n    destroy(destroyProgram = false): void\n    {\n        this.emit('destroy', this);\n\n        if (destroyProgram)\n        {\n            this.gpuProgram?.destroy();\n            this.glProgram?.destroy();\n        }\n\n        this.gpuProgram = null;\n        this.glProgram = null;\n\n        this.groups = null;\n\n        this.removeAllListeners();\n\n        this.uniformBindMap = null;\n\n        this.resources = null;\n    }\n}\n"],"names":["EventEmitter","BindGroup"],"mappings":"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"}