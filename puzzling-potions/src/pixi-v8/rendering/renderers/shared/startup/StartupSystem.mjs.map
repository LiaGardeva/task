{"version":3,"file":"StartupSystem.mjs","sources":["../../../../../src/rendering/renderers/shared/startup/StartupSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../../../extensions/Extensions';\nimport { sayHello } from '../../../../utils/sayHello';\n\nimport type { ExtensionMetadata } from '../../../../extensions/Extensions';\nimport type { Renderer } from '../../types';\nimport type { ISystem } from '../system/ISystem';\n\n/**\n * Options for the startup system.\n * @ignore\n */\nexport interface StartupSystemOptions\n{\n    /**\n     * Whether to log the version and type information of renderer to console.\n     * @memberof PIXI.IRendererOptions\n     */\n    hello: boolean;\n}\n/**\n * A simple system responsible for initiating the renderer.\n * @memberof PIXI\n */export class StartupSystem implements ISystem<StartupSystemOptions>\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: [\n            ExtensionType.WebGLRendererSystem,\n            ExtensionType.WebGPURendererSystem,\n            ExtensionType.CanvasRendererSystem,\n        ],\n        name: 'startup',\n        priority: 0,\n    };\n\n    /** @ignore */\n    static defaultOptions: StartupSystemOptions = {\n        /**\n         * {@link PIXI.WebGLRendererOptions.hello}\n         * @default false\n         * @memberof PIXI.settings.GL_RENDER_OPTIONS\n         */\n        hello: false,\n    };\n\n    readonly renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * It all starts here! This initiates every system, passing in the options for any system by name.\n     * @param options - the config for the renderer and all its systems\n     */\n    run(options: StartupSystemOptions): void\n    {\n        const { renderer } = this;\n\n        renderer.runners.init.emit(renderer.options);\n\n        if (options.hello)\n        {\n            // eslint-disable-next-line no-console\n            sayHello(renderer.type);\n        }\n\n        // TODO: screen doesn't exist on renderer yet\n        // renderer.resize(renderer.screen.width, renderer.screen.height);\n    }\n\n    destroy(): void\n    {\n        // ka pow!\n    }\n}\n"],"names":[],"mappings":";;;AAsBU,MAAM,aAChB,CAAA;AAAA,EAwBI,YAAY,QACZ,EAAA;AACI,IAAA,IAAA,CAAK,QAAW,GAAA,QAAA,CAAA;AAAA,GACpB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,OACJ,EAAA;AACI,IAAM,MAAA,EAAE,UAAa,GAAA,IAAA,CAAA;AAErB,IAAA,QAAA,CAAS,OAAQ,CAAA,IAAA,CAAK,IAAK,CAAA,QAAA,CAAS,OAAO,CAAA,CAAA;AAE3C,IAAA,IAAI,QAAQ,KACZ,EAAA;AAEI,MAAA,QAAA,CAAS,SAAS,IAAI,CAAA,CAAA;AAAA,KAC1B;AAAA,GAIJ;AAAA,EAEA,OACA,GAAA;AAAA,GAEA;AACJ,CAAA;AAAA;AAtDgB,aAAA,CAGL,SAA+B,GAAA;AAAA,EAClC,IAAM,EAAA;AAAA,IACF,aAAc,CAAA,mBAAA;AAAA,IACd,aAAc,CAAA,oBAAA;AAAA,IACd,aAAc,CAAA,oBAAA;AAAA,GAClB;AAAA,EACA,IAAM,EAAA,SAAA;AAAA,EACN,QAAU,EAAA,CAAA;AACd,CAAA,CAAA;AAAA;AAXY,aAAA,CAcL,cAAuC,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM1C,KAAO,EAAA,KAAA;AACX,CAAA;;;;"}