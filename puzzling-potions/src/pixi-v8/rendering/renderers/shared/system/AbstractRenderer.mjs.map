{"version":3,"file":"AbstractRenderer.mjs","sources":["../../../../../src/rendering/renderers/shared/system/AbstractRenderer.ts"],"sourcesContent":["import { deprecation } from '../../../../utils/logging/deprecation';\nimport { Container } from '../../../scene/Container';\nimport { SystemRunner } from './SystemRunner';\n\nimport type { ICanvas } from '../../../../settings/adapter/ICanvas';\nimport type { RenderSurface } from '../../gpu/renderTarget/GpuRenderTargetSystem';\nimport type { Renderer } from '../../types';\nimport type { PipeConstructor } from '../instructions/RenderPipe';\nimport type { ViewSystem } from '../ViewSystem';\nimport type { System, SystemConstructor } from './System';\n\ninterface RendererConfig\n{\n    type: string;\n    runners?: string[];\n    systems: {name: string, value: SystemConstructor}[];\n    renderPipes: {name: string, value: PipeConstructor}[];\n    renderPipeAdaptors: {name: string, value: any}[];\n}\n\nexport interface RenderOptions\n{\n    container: Container;\n    target?: RenderSurface;\n}\n\nconst defaultRunners = [\n    'init',\n    'destroy',\n    'contextChange',\n    'reset',\n    'renderEnd',\n    'renderStart',\n    'render',\n    'update',\n    'postrender',\n    'prerender'\n] as const;\n\ntype DefaultRunners = typeof defaultRunners[number];\ntype Runners = {[key in DefaultRunners]: SystemRunner} & {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    [K: ({} & string) | ({} & symbol)]: SystemRunner;\n};\n\n/**\n * The SystemManager is a class that provides functions for managing a set of systems\n * This is a base class, that is generic (no render code or knowledge at all)\n */\nexport class AbstractRenderer<PIPES, OPTIONS>\n{\n    readonly type: string;\n\n    runners: Runners = {} as Runners;\n    renderPipes = {} as PIPES;\n    view: ViewSystem;\n\n    private _systemsHash: Record<string, System> = {};\n    private _lastObjectRendered: Container;\n\n    /**\n     * Set up a system with a collection of SystemClasses and runners.\n     * Systems are attached dynamically to this class when added.\n     * @param config - the config for the system manager\n     */\n    constructor(config: RendererConfig)\n    {\n        this.type = config.type;\n\n        const combinedRunners = [...defaultRunners, ...(config.runners ?? [])];\n\n        this.addRunners(...combinedRunners);\n        this.addSystems(config.systems);\n        this.addPipes(config.renderPipes, config.renderPipeAdaptors);\n    }\n\n    /**\n     * Initialize the renderer.\n     * @param options - The options to use to create the renderer.\n     */\n    async init(options: Partial<OPTIONS> = {})\n    {\n        // loop through all systems...\n        for (const systemName in this._systemsHash)\n        {\n            const system = this._systemsHash[systemName];\n\n            const defaultSystemOptions = (system.constructor as any).defaultOptions;\n\n            options = { ...defaultSystemOptions, ...options };\n        }\n\n        // await emits..\n        for (let i = 0; i < this.runners.init.items.length; i++)\n        {\n            await this.runners.init.items[i].init(options);\n        }\n    }\n\n    /**\n     * Renders the object to its view.\n     * @param options - The options to render with.\n     * @param options.container - The container to render.\n     * @param [options.target] - The target to render to.\n     */\n    public render(options: RenderOptions | Container): void\n    {\n        if (options instanceof Container)\n        {\n            options = { container: options };\n\n            // eslint-disable-next-line prefer-rest-params\n            if (arguments[1])\n            {\n                deprecation('8', 'passing target as a second argument is deprecated, please use render options instead');\n\n                // eslint-disable-next-line prefer-rest-params\n                options.target = arguments[1];\n            }\n        }\n\n        options.target ||= this.view.texture;\n\n        // TODO get rid of this\n        this._lastObjectRendered = options.container;\n\n        this.runners.prerender.emit(options);\n        this.runners.renderStart.emit(options);\n        this.runners.render.emit(options);\n        this.runners.renderEnd.emit(options);\n        this.runners.postrender.emit(options);\n    }\n\n    /**\n     * Resizes the WebGL view to the specified width and height.\n     * @param desiredScreenWidth - The desired width of the screen.\n     * @param desiredScreenHeight - The desired height of the screen.\n     * @param resolution - The resolution / device pixel ratio of the renderer.\n     */\n    public resize(desiredScreenWidth: number, desiredScreenHeight: number, resolution?: number): void\n    {\n        this.view.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n    }\n\n    /** The resolution / device pixel ratio of the renderer. */\n    get resolution(): number\n    {\n        return this.view.resolution;\n    }\n\n    set resolution(value: number)\n    {\n        this.view.resolution = value;\n    }\n\n    get width(): number\n    {\n        return this.view.texture.frameWidth;\n    }\n\n    get height(): number\n    {\n        return this.view.texture.frameHeight;\n    }\n\n    // NOTE: this was `view` in v7\n    /** The canvas element that everything is drawn to.*/\n    get element(): ICanvas\n    {\n        return this.view.element;\n    }\n\n    /**\n     * the last object rendered by the renderer. Useful for other plugins like interaction managers\n     * @readonly\n     */\n    get lastObjectRendered(): Container\n    {\n        return this._lastObjectRendered;\n    }\n\n    /**\n     * Flag if we are rendering to the screen vs renderTexture\n     * @readonly\n     * @default true\n     */\n    get renderingToScreen(): boolean\n    {\n        const renderer = this as unknown as Renderer;\n\n        return renderer.renderTarget.renderingToScreen;\n    }\n\n    /**\n     * Create a bunch of runners based of a collection of ids\n     * @param runnerIds - the runner ids to add\n     */\n    private addRunners(...runnerIds: string[]): void\n    {\n        runnerIds.forEach((runnerId) =>\n        {\n            this.runners[runnerId] = new SystemRunner(runnerId);\n        });\n    }\n\n    private addSystems(systems: RendererConfig['systems']): void\n    {\n        let i: keyof typeof systems;\n\n        for (i in systems)\n        {\n            const val = systems[i];\n\n            this.addSystem(val.value, val.name);\n        }\n    }\n\n    /**\n     * Add a new system to the renderer.\n     * @param ClassRef - Class reference\n     * @param name - Property name for system, if not specified\n     *        will use a static `name` property on the class itself. This\n     *        name will be assigned as s property on the Renderer so make\n     *        sure it doesn't collide with properties on Renderer.\n     * @returns Return instance of renderer\n     */\n    private addSystem(ClassRef: SystemConstructor, name: string): this\n    {\n        const system = new ClassRef(this as unknown as Renderer);\n\n        if ((this as any)[name])\n        {\n            throw new Error(`Whoops! The name \"${name}\" is already in use`);\n        }\n\n        (this as any)[name] = system;\n\n        this._systemsHash[name] = system;\n\n        for (const i in this.runners)\n        {\n            this.runners[i].add(system);\n        }\n\n        return this;\n    }\n\n    private addPipes(pipes: RendererConfig['renderPipes'], pipeAdaptors: RendererConfig['renderPipeAdaptors']): void\n    {\n        const adaptors = pipeAdaptors.reduce((acc, adaptor) =>\n        {\n            acc[adaptor.name] = adaptor.value;\n\n            return acc;\n        }, {} as Record<string, any>);\n\n        pipes.forEach((pipe) =>\n        {\n            const PipeClass = pipe.value;\n            const name = pipe.name;\n\n            const Adaptor = adaptors[name];\n\n            // sorry typescript..\n            (this.renderPipes as any)[name] = new PipeClass(\n                this as unknown as Renderer,\n                Adaptor ? new Adaptor() : null\n            );\n        });\n    }\n\n    /** destroy the all runners and systems. Its apps job to */\n    destroy(): void\n    {\n        Object.values(this.runners).forEach((runner) =>\n        {\n            runner.destroy();\n        });\n\n        this._systemsHash = null;\n        this.renderPipes = null;\n        this.runners = null;\n    }\n}\n"],"names":[],"mappings":"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"}