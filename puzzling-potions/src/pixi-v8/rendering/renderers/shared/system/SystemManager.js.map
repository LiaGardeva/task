{"version":3,"file":"SystemManager.js","sources":["../../../../../src/rendering/renderers/shared/system/SystemManager.ts"],"sourcesContent":["import { Runner } from '../runner/Runner';\n\nimport type { ISystem, ISystemConstructor } from './ISystem';\n\ninterface ISystemConfig<R>\n{\n    runners: string[];\n    systems: {name: string, value: ISystemConstructor<R>}[];\n}\n\n/**\n * The SystemManager is a class that provides functions for managing a set of systems\n * This is a base class, that is generic (no render code or knowledge at all)\n */\nexport class SystemManager<R>\n{\n    /** a collection of runners defined by the user */\n    readonly runners: {[key: string]: Runner} = {\n        init: new Runner('init'),\n        destroy: new Runner('destroy'),\n        contextChange: new Runner('contextChange'),\n        reset: new Runner('reset'),\n        update: new Runner('update'),\n        postrender: new Runner('postrender'),\n        prerender: new Runner('prerender'),\n        resize: new Runner('resize'),\n    };\n\n    private _systemsHash: Record<string, ISystem> = {};\n\n    /**\n     * Set up a system with a collection of SystemClasses and runners.\n     * Systems are attached dynamically to this class when added.\n     * @param config - the config for the system manager\n     */\n    setup(config: ISystemConfig<R>): void\n    {\n        //   this.addRunners(...config.runners);\n\n        let i: keyof typeof config.systems;\n\n        for (i in config.systems)\n        {\n            const val = config.systems[i];\n\n            this.addSystem(val.value, val.name);\n        }\n    }\n\n    /**\n     * Create a bunch of runners based of a collection of ids\n     * @param runnerIds - the runner ids to add\n     */\n    addRunners(...runnerIds: string[]): void\n    {\n        runnerIds.forEach((runnerId) =>\n        {\n            this.runners[runnerId] = new Runner(runnerId);\n        });\n    }\n\n    /**\n     * Add a new system to the renderer.\n     * @param ClassRef - Class reference\n     * @param name - Property name for system, if not specified\n     *        will use a static `name` property on the class itself. This\n     *        name will be assigned as s property on the Renderer so make\n     *        sure it doesn't collide with properties on Renderer.\n     * @returns Return instance of renderer\n     */\n    addSystem(ClassRef: ISystemConstructor<R>, name: string): this\n    {\n        const system = new ClassRef(this as any as R);\n\n        if ((this as any)[name])\n        {\n            throw new Error(`Whoops! The name \"${name}\" is already in use`);\n        }\n\n        (this as any)[name] = system;\n\n        this._systemsHash[name] = system;\n\n        for (const i in this.runners)\n        {\n            this.runners[i].add(system);\n        }\n\n        return this;\n    }\n\n    /**\n     * A function that will run a runner and call the runners function but pass in different options\n     * to each system based on there name.\n     *\n     * eg if you have two systems added called `systemA` and `systemB` you could call do the following:\n     *\n     * ```\n     * system.emitWithCustomOptions(init, {\n     *   systemA: {...optionsForA},\n     *   systemB: {...optionsForB}\n     * })\n     *\n     * init would be called on system A passing options.A and init would be called on system B passing options.B\n     * ```\n     * @param runner - the runner to target\n     * @param options - key value options for each system\n     */\n    emitWithCustomOptions(runner: Runner, options: Record<string, unknown>): void\n    {\n        const systemHashKeys = Object.keys(this._systemsHash);\n\n        runner.items.forEach((system) =>\n        {\n            // I know this does not need to be a performant function so it.. isn't!\n            // its only used for init and destroy.. we can refactor if required..\n            const systemName = systemHashKeys.find((systemId) => this._systemsHash[systemId] === system);\n\n            system[runner.name](options[systemName]);\n        });\n    }\n\n    /** destroy the all runners and systems. Its apps job to */\n    destroy(): void\n    {\n        Object.values(this.runners).forEach((runner) =>\n        {\n            runner.destroy();\n        });\n\n        this._systemsHash = {};\n    }\n\n    // TODO implement!\n    // removeSystem(ClassRef: ISystemConstructor, name: string): void\n    // {\n\n    // }\n}\n"],"names":["Runner"],"mappings":"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"}