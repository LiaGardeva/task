{"version":3,"file":"CanvasPool.js","sources":["../../../../../src/rendering/renderers/shared/texture/CanvasPool.ts"],"sourcesContent":["import { nextPow2 } from '../../../../maths/pow2';\nimport { settings } from '../../../../settings/settings';\n\nimport type { ICanvas, ICanvasRenderingContext2DSettings } from '../../../../settings/adapter/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../../../settings/adapter/ICanvasRenderingContext2D';\n\nexport interface CanvasAndContext\n{\n    canvas: ICanvas;\n    context: ICanvasRenderingContext2D;\n}\n\n/**\n * Texture pool, used by FilterSystem and plugins.\n *\n * Stores collection of temporary pow2 or screen-sized renderTextures\n *\n * If you use custom RenderTexturePool for your filters, you can use methods\n * `getFilterTexture` and `returnFilterTexture` same as in\n * @memberof PIXI\n */\nexport class CanvasPoolClass\n{\n    public canvasOptions: ICanvasRenderingContext2DSettings;\n\n    /**\n     * Allow renderTextures of the same size as screen, not just pow2\n     *\n     * Automatically sets to true after `setScreenSize`\n     * @default false\n     */\n    public enableFullScreen: boolean;\n    canvasPool: {[x in string | number]: CanvasAndContext[]};\n    poolKeyHash: Record<number, string> = {};\n\n    constructor(canvasOptions?: ICanvasRenderingContext2DSettings)\n    {\n        this.canvasPool = {};\n        this.canvasOptions = canvasOptions || {};\n        this.enableFullScreen = false;\n    }\n\n    /**\n     * Creates texture with params that were specified in pool constructor.\n     * @param pixelWidth - Width of texture in pixels.\n     * @param pixelHeight - Height of texture in pixels.\n     */\n    createCanvasAndContext(pixelWidth: number, pixelHeight: number): CanvasAndContext\n    {\n        const canvas = settings.ADAPTER.createCanvas();\n\n        canvas.width = pixelWidth;\n        canvas.height = pixelHeight;\n\n        const context = canvas.getContext('2d');\n\n        return { canvas, context };\n    }\n\n    /**\n     * Gets a Power-of-Two render texture or fullScreen texture\n     * @param minWidth - The minimum width of the render texture.\n     * @param minHeight - The minimum height of the render texture.\n     * @param resolution - The resolution of the render texture.\n     * @returns The new render texture.\n     */\n    getOptimalCanvasAndContext(minWidth: number, minHeight: number, resolution = 1): CanvasAndContext\n    {\n        minWidth = Math.ceil((minWidth * resolution) - 1e-6);\n        minHeight = Math.ceil((minHeight * resolution) - 1e-6);\n        minWidth = nextPow2(minWidth);\n        minHeight = nextPow2(minHeight);\n\n        const key = (minWidth << 17) + (minHeight << 1);\n\n        if (!this.canvasPool[key])\n        {\n            this.canvasPool[key] = [];\n        }\n\n        let canvasAndContext = this.canvasPool[key].pop();\n\n        if (!canvasAndContext)\n        {\n            canvasAndContext = this.createCanvasAndContext(minWidth, minHeight);\n        }\n\n        return canvasAndContext;\n    }\n\n    /**\n     * Place a render texture back into the pool.\n     * @param canvasAndContext\n     */\n    returnCanvasAndContext(canvasAndContext: CanvasAndContext): void\n    {\n        const { width, height } = canvasAndContext.canvas;\n\n        const key = (width << 17) + (height << 1);\n\n        this.canvasPool[key].push(canvasAndContext);\n    }\n\n    clear(): void\n    {\n        this.canvasPool = {};\n    }\n}\n\nexport const CanvasPool = new CanvasPoolClass();\n"],"names":["settings","nextPow2"],"mappings":";;;;;;;AAqBO,MAAM,eACb,CAAA;AAAA,EAaI,YAAY,aACZ,EAAA;AAHA,IAAA,IAAA,CAAA,WAAA,GAAsC,EAAC,CAAA;AAInC,IAAA,IAAA,CAAK,aAAa,EAAC,CAAA;AACnB,IAAK,IAAA,CAAA,aAAA,GAAgB,iBAAiB,EAAC,CAAA;AACvC,IAAA,IAAA,CAAK,gBAAmB,GAAA,KAAA,CAAA;AAAA,GAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,sBAAA,CAAuB,YAAoB,WAC3C,EAAA;AACI,IAAM,MAAA,MAAA,GAASA,iBAAS,CAAA,OAAA,CAAQ,YAAa,EAAA,CAAA;AAE7C,IAAA,MAAA,CAAO,KAAQ,GAAA,UAAA,CAAA;AACf,IAAA,MAAA,CAAO,MAAS,GAAA,WAAA,CAAA;AAEhB,IAAM,MAAA,OAAA,GAAU,MAAO,CAAA,UAAA,CAAW,IAAI,CAAA,CAAA;AAEtC,IAAO,OAAA,EAAE,QAAQ,OAAQ,EAAA,CAAA;AAAA,GAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,0BAA2B,CAAA,QAAA,EAAkB,SAAmB,EAAA,UAAA,GAAa,CAC7E,EAAA;AACI,IAAA,QAAA,GAAW,IAAK,CAAA,IAAA,CAAM,QAAW,GAAA,UAAA,GAAc,IAAI,CAAA,CAAA;AACnD,IAAA,SAAA,GAAY,IAAK,CAAA,IAAA,CAAM,SAAY,GAAA,UAAA,GAAc,IAAI,CAAA,CAAA;AACrD,IAAA,QAAA,GAAWC,cAAS,QAAQ,CAAA,CAAA;AAC5B,IAAA,SAAA,GAAYA,cAAS,SAAS,CAAA,CAAA;AAE9B,IAAM,MAAA,GAAA,GAAA,CAAO,QAAY,IAAA,EAAA,KAAO,SAAa,IAAA,CAAA,CAAA,CAAA;AAE7C,IAAA,IAAI,CAAC,IAAA,CAAK,UAAW,CAAA,GAAG,CACxB,EAAA;AACI,MAAK,IAAA,CAAA,UAAA,CAAW,GAAG,CAAA,GAAI,EAAC,CAAA;AAAA,KAC5B;AAEA,IAAA,IAAI,gBAAmB,GAAA,IAAA,CAAK,UAAW,CAAA,GAAG,EAAE,GAAI,EAAA,CAAA;AAEhD,IAAA,IAAI,CAAC,gBACL,EAAA;AACI,MAAmB,gBAAA,GAAA,IAAA,CAAK,sBAAuB,CAAA,QAAA,EAAU,SAAS,CAAA,CAAA;AAAA,KACtE;AAEA,IAAO,OAAA,gBAAA,CAAA;AAAA,GACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,uBAAuB,gBACvB,EAAA;AACI,IAAA,MAAM,EAAE,KAAA,EAAO,MAAO,EAAA,GAAI,gBAAiB,CAAA,MAAA,CAAA;AAE3C,IAAM,MAAA,GAAA,GAAA,CAAO,KAAS,IAAA,EAAA,KAAO,MAAU,IAAA,CAAA,CAAA,CAAA;AAEvC,IAAA,IAAA,CAAK,UAAW,CAAA,GAAG,CAAE,CAAA,IAAA,CAAK,gBAAgB,CAAA,CAAA;AAAA,GAC9C;AAAA,EAEA,KACA,GAAA;AACI,IAAA,IAAA,CAAK,aAAa,EAAC,CAAA;AAAA,GACvB;AACJ,CAAA;AAEa,MAAA,UAAA,GAAa,IAAI,eAAgB;;;;;"}