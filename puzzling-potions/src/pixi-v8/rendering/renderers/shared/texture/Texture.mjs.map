{"version":3,"file":"Texture.mjs","sources":["../../../../../src/rendering/renderers/shared/texture/Texture.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { Cache } from '../../../../assets/cache/Cache';\nimport { NOOP } from '../../../../utils/NOOP';\nimport { TextureSource } from './sources/TextureSource';\nimport { TextureLayout } from './TextureLayout';\nimport { TextureMatrix } from './TextureMatrix';\nimport { TextureStyle } from './TextureStyle';\n\nimport type { TextureLayoutOptions } from './TextureLayout';\nimport type { TextureStyleOptions } from './TextureStyle';\n\nlet UID = 0;\n\nexport interface TextureOptions\n{\n    source?: TextureSource;\n    style?: TextureStyle | TextureStyleOptions\n    layout?: TextureLayout | TextureLayoutOptions\n    label?: string;\n}\n\nexport interface BindableTexture\n{\n    source: TextureSource;\n    style: TextureStyle;\n    styleSourceKey: number;\n}\n\nexport class Texture extends EventEmitter<{\n    update: Texture\n}> implements BindableTexture\n{\n    static from(id: string | TextureSource): Texture\n    {\n        if (typeof id === 'string')\n        {\n            return Cache.get(id);\n        }\n\n        return new Texture({ source: id });\n    }\n\n    public label?: string;\n    public id = UID++;\n    public styleSourceKey = 0;\n\n    private _style: TextureStyle;\n    private _textureMatrix: TextureMatrix;\n\n    /**\n     * @internal\n     */\n    _layout: TextureLayout;\n    _source: TextureSource;\n\n    constructor({ source, style, layout, label }: TextureOptions = {})\n    {\n        super();\n\n        this.label = label;\n        this.source = source?.source ?? new TextureSource();\n        this.layout = layout instanceof TextureLayout ? layout : new TextureLayout(layout);\n\n        if (style)\n        {\n            this._style = style instanceof TextureStyle ? style : new TextureStyle(style);\n        }\n\n        this.styleSourceKey = (this.style.resourceId << 24) + this._source.uid;\n    }\n\n    set source(value: TextureSource)\n    {\n        if (this._source)\n        {\n            this._source.off('update', this.onStyleSourceUpdate, this);\n            this._source.off('resize', this.onUpdate, this);\n        }\n\n        this._source = value;\n\n        value.on('update', this.onStyleSourceUpdate, this);\n        value.on('resize', this.onUpdate, this);\n\n        this.styleSourceKey = (this.style.resourceId << 24) + this._source.uid;\n        this.emit('update', this);\n    }\n\n    get source(): TextureSource\n    {\n        return this._source;\n    }\n\n    get style(): TextureStyle\n    {\n        return this._style || this.source.style;\n    }\n\n    set style(value: TextureStyle)\n    {\n        this._style?.off('change', this.onStyleSourceUpdate, this);\n        this._style = value;\n        this._style?.on('change', this.onStyleSourceUpdate, this);\n    }\n\n    get layout(): TextureLayout\n    {\n        return this._layout;\n    }\n\n    set layout(value: TextureLayout)\n    {\n        this._layout?.off('update', this.onUpdate, this);\n\n        this._layout = value;\n\n        value.on('update', this.onUpdate, this);\n\n        this.emit('update', this);\n    }\n\n    get textureMatrix()\n    {\n        if (!this._textureMatrix)\n        {\n            this._textureMatrix = new TextureMatrix(this);\n        }\n\n        return this._textureMatrix;\n    }\n\n    set frameWidth(value: number)\n    {\n        this._layout.frame.width = value / this._source.width;\n    }\n\n    get frameWidth(): number\n    {\n        return (this._source.pixelWidth / this._source._resolution) * this._layout.frame.width;\n    }\n\n    set frameHeight(value: number)\n    {\n        this._layout.frame.height = value / this._source.height;\n    }\n\n    get frameHeight(): number\n    {\n        return (this._source.pixelHeight / this._source._resolution) * this._layout.frame.height;\n    }\n\n    set frameX(value: number)\n    {\n        if (value === 0)\n        {\n            this._layout.frame.x = 0;\n\n            return;\n        }\n\n        this._layout.frame.x = (this._source.width) / value;\n    }\n\n    get frameX(): number\n    {\n        return (this._source.width) * this._layout.frame.x;\n    }\n\n    set frameY(value: number)\n    {\n        if (value === 0)\n        {\n            this._layout.frame.y = 0;\n\n            return;\n        }\n\n        this._layout.frame.y = (this._source.height) / value;\n    }\n\n    get frameY(): number\n    {\n        return (this._source.height) * this._layout.frame.y;\n    }\n\n    /** The width of the Texture in pixels. */\n    get width(): number\n    {\n        return (this._source.width) * this._layout.orig.width;\n    }\n\n    /** The height of the Texture in pixels. */\n    get height(): number\n    {\n        return (this._source.height) * this._layout.orig.height;\n    }\n\n    /**\n     * Destroys this texture\n     * @param destroySource - Destroy the source when the texture is destroyed.\n     */\n    destroy(destroySource = false)\n    {\n        if (this._style)\n        {\n            this._style.destroy();\n            this._style = null;\n        }\n\n        if (this._layout)\n        {\n            this._layout.destroy();\n            this._layout = null;\n        }\n\n        if (this._source)\n        {\n            if (destroySource)\n            {\n                this._source.destroy();\n                this._source = null;\n            }\n        }\n\n        this._textureMatrix = null;\n        this.removeAllListeners();\n    }\n\n    /**\n     * @internal\n     */\n    protected onStyleSourceUpdate()\n    {\n        this.styleSourceKey = (this.style.resourceId << 24) + this._source.uid;\n        this.emit('update', this);\n    }\n\n    /**\n     * @internal\n     */\n    protected onUpdate()\n    {\n        this.emit('update', this);\n    }\n\n    static EMPTY: Texture;\n    static WHITE: Texture;\n}\n\nTexture.EMPTY = new Texture({\n\n});\n\nTexture.EMPTY.label = 'EMPTY';\nTexture.EMPTY.destroy = NOOP;\n"],"names":[],"mappings":"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"}