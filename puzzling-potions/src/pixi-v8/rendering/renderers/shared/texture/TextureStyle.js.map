{"version":3,"file":"TextureStyle.js","sources":["../../../../../src/rendering/renderers/shared/texture/TextureStyle.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { createIdFromString } from '../createIdFromString';\n\nimport type { BindResource } from '../../gpu/shader/BindResource';\nimport type { COMPARE_FUNCTION, SCALE_MODE, WRAP_MODE } from './const';\n\nlet UID = 0;\n\n// TODO - should this be a function?\n// eg getSource()\n\nexport interface TextureStyleOptions extends Partial<TextureStyle>\n{\n    /** setting this will set wrapModeU,wrapModeV and wrapModeW all at once! */\n    addressMode?: WRAP_MODE;\n    /** */\n    addressModeU?: WRAP_MODE;\n    /** */\n    addressModeV?: WRAP_MODE;\n    /** Specifies the {{GPUAddressMode|address modes}} for the texture width, height, and depth coordinates, respectively. */\n    addressModeW?: WRAP_MODE;\n\n    /** setting this will set magFilter,minFilter and mipmapFilter all at once!  */\n    scaleMode?: SCALE_MODE;\n    /** Specifies the sampling behavior when the sample footprint is smaller than or equal to one texel. */\n\n    magFilter?: SCALE_MODE;\n    /** Specifies the sampling behavior when the sample footprint is larger than one texel. */\n    minFilter?: SCALE_MODE;\n    /** Specifies behavior for sampling between mipmap levels. */\n    mipmapFilter?: SCALE_MODE;\n\n    /** */\n    lodMinClamp?: number;\n    /** Specifies the minimum and maximum levels of detail, respectively, used internally when sampling a texture. */\n    lodMaxClamp?: number;\n    /**\n     * When provided the sampler will be a comparison sampler with the specified\n     * {@link GPUCompareFunction}.\n     * Note: Comparison samplers may use filtering, but the sampling results will be\n     * implementation-dependent and may differ from the normal filtering rules.\n     */\n    compare?: COMPARE_FUNCTION;\n    /**\n     * Specifies the maximum anisotropy value clamp used by the sampler.\n     * Note: Most implementations support {@link GPUSamplerDescriptor#maxAnisotropy} values in range\n     * between 1 and 16, inclusive. The used value of {@link GPUSamplerDescriptor#maxAnisotropy} will\n     * be clamped to the maximum value that the platform supports.\n     *\n     * setting this to anything higher than 1 will set scale modes to 'linear'\n     */\n    maxAnisotropy?: number;\n\n}\n\nexport class TextureStyle extends EventEmitter<{\n    change: TextureStyle,\n    destroy: TextureStyle,\n}> implements BindResource\n{\n    resourceType = 'textureSampler';\n    _resourceId: number;\n\n    // override to set styles globally\n    static readonly DEFAULT: TextureStyleOptions = {\n        addressMode: 'clamp-to-edge',\n        scaleMode: 'nearest'\n    };\n\n    uid = UID++;\n\n    /** */\n    addressModeU?: WRAP_MODE;\n    /** */\n    addressModeV?: WRAP_MODE;\n    /** Specifies the {{GPUAddressMode|address modes}} for the texture width, height, and depth coordinates, respectively. */\n    addressModeW?: WRAP_MODE;\n    /** Specifies the sampling behavior when the sample footprint is smaller than or equal to one texel. */\n    magFilter?: SCALE_MODE;\n    /** Specifies the sampling behavior when the sample footprint is larger than one texel. */\n    minFilter?: SCALE_MODE;\n    /** Specifies behavior for sampling between mipmap levels. */\n    mipmapFilter?: SCALE_MODE;\n    /** */\n    lodMinClamp?: number;\n    /** Specifies the minimum and maximum levels of detail, respectively, used internally when sampling a texture. */\n    lodMaxClamp?: number;\n    /**\n     * When provided the sampler will be a comparison sampler with the specified\n     * {@link GPUCompareFunction}.\n     * Note: Comparison samplers may use filtering, but the sampling results will be\n     * implementation-dependent and may differ from the normal filtering rules.\n     */\n    compare?: COMPARE_FUNCTION;\n    /**\n     * Specifies the maximum anisotropy value clamp used by the sampler.\n     * Note: Most implementations support {@link GPUSamplerDescriptor#maxAnisotropy} values in range\n     * between 1 and 16, inclusive. The used value of {@link GPUSamplerDescriptor#maxAnisotropy} will\n     * be clamped to the maximum value that the platform supports.\n     */\n    _maxAnisotropy?: number = 1;\n\n    constructor(options: TextureStyleOptions = {})\n    {\n        super();\n\n        options = { ...TextureStyle.DEFAULT, ...options };\n\n        this.addressMode = options.addressMode;\n\n        this.addressModeU = options.addressModeU ?? this.addressModeU;\n        this.addressModeV = options.addressModeV ?? this.addressModeV;\n        this.addressModeW = options.addressModeW ?? this.addressModeW;\n\n        this.scaleMode = options.scaleMode;\n\n        this.magFilter = options.magFilter ?? this.magFilter;\n        this.minFilter = options.minFilter ?? this.minFilter;\n        this.mipmapFilter = options.mipmapFilter ?? this.mipmapFilter;\n\n        this.lodMinClamp = options.lodMinClamp;\n        this.lodMaxClamp = options.lodMaxClamp;\n\n        this.compare = options.compare;\n\n        this.maxAnisotropy = options.maxAnisotropy ?? 1;\n    }\n\n    set addressMode(value: WRAP_MODE)\n    {\n        this.addressModeU = value;\n        this.addressModeV = value;\n        this.addressModeW = value;\n    }\n\n    get addressMode(): WRAP_MODE\n    {\n        return this.addressModeU;\n    }\n\n    set scaleMode(value: SCALE_MODE)\n    {\n        this.magFilter = value;\n        this.minFilter = value;\n        this.mipmapFilter = value;\n    }\n\n    get scaleMode(): SCALE_MODE\n    {\n        return this.magFilter;\n    }\n\n    set maxAnisotropy(value: number)\n    {\n        this._maxAnisotropy = Math.min(value, 16);\n\n        if (this._maxAnisotropy > 1)\n        {\n            this.scaleMode = 'linear';\n        }\n    }\n\n    get maxAnisotropy(): number\n    {\n        return this._maxAnisotropy;\n    }\n\n    // TODO - move this to WebGL?\n    get resourceId(): number\n    {\n        return this._resourceId || this.generateResourceId();\n    }\n\n    update()\n    {\n        // manage the resource..\n        this.emit('change', this);\n        this._resourceId = null;\n    }\n\n    generateResourceId(): number\n    {\n        // eslint-disable-next-line max-len\n        const bigKey = `${this.addressModeU}-${this.addressModeV}-${this.addressModeW}-${this.magFilter}-${this.minFilter}-${this.mipmapFilter}-${this.lodMinClamp}-${this.lodMaxClamp}-${this.compare}-${this._maxAnisotropy}`;\n\n        this._resourceId = createIdFromString(bigKey, 'sampler');\n\n        return this._resourceId;\n    }\n\n    /** Destroys the style */\n    destroy()\n    {\n        this.emit('destroy', this);\n\n        this.removeAllListeners();\n    }\n}\n"],"names":["EventEmitter","createIdFromString"],"mappings":"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"}