{"version":3,"file":"CanvasSource.js","sources":["../../../../../../src/rendering/renderers/shared/texture/sources/CanvasSource.ts"],"sourcesContent":["import { settings } from '../../../../../settings/settings';\nimport { TextureSource } from './TextureSource';\n\nimport type { ICanvas } from '../../../../../settings/adapter/ICanvas';\nimport type { TextureSourceOptions } from './TextureSource';\n\nexport interface CanvasSourceOptions extends TextureSourceOptions<ICanvas>\n{\n    autoDensity?: boolean;\n}\n\nexport class CanvasSource extends TextureSource<ICanvas>\n{\n    type = 'image';\n    autoDensity: boolean;\n    alphaMode = 0;\n\n    constructor(options: CanvasSourceOptions)\n    {\n        if (!options.resource)\n        {\n            options.resource = settings.ADAPTER.createCanvas();\n        }\n\n        if (!options.width)\n        {\n            options.width = options.resource.width;\n\n            if (!options.autoDensity)\n            {\n                options.width /= options.resolution;\n            }\n        }\n\n        if (!options.height)\n        {\n            options.height = options.resource.height;\n\n            if (!options.autoDensity)\n            {\n                options.height /= options.resolution;\n            }\n        }\n\n        super(options);\n\n        this.autoDensity = options.autoDensity;\n\n        const canvas = options.resource;\n\n        if (this.pixelWidth !== canvas.width || this.pixelWidth !== canvas.height)\n        {\n            this.resizeCanvas();\n        }\n    }\n\n    resizeCanvas()\n    {\n        if (this.autoDensity)\n        {\n            this.resource.style.width = `${this.width}px`;\n            this.resource.style.height = `${this.height}px`;\n        }\n\n        this.resource.width = this.pixelWidth;\n        this.resource.height = this.pixelHeight;\n    }\n\n    resize(width = this.width, height = this.height, resolution = this._resolution): void\n    {\n        super.resize(width, height, resolution);\n\n        this.resizeCanvas();\n    }\n}\n"],"names":["TextureSource","settings"],"mappings":";;;;;;;AAWO,MAAM,qBAAqBA,2BAClC,CAAA;AAAA,EAKI,YAAY,OACZ,EAAA;AACI,IAAI,IAAA,CAAC,QAAQ,QACb,EAAA;AACI,MAAQ,OAAA,CAAA,QAAA,GAAWC,iBAAS,CAAA,OAAA,CAAQ,YAAa,EAAA,CAAA;AAAA,KACrD;AAEA,IAAI,IAAA,CAAC,QAAQ,KACb,EAAA;AACI,MAAQ,OAAA,CAAA,KAAA,GAAQ,QAAQ,QAAS,CAAA,KAAA,CAAA;AAEjC,MAAI,IAAA,CAAC,QAAQ,WACb,EAAA;AACI,QAAA,OAAA,CAAQ,SAAS,OAAQ,CAAA,UAAA,CAAA;AAAA,OAC7B;AAAA,KACJ;AAEA,IAAI,IAAA,CAAC,QAAQ,MACb,EAAA;AACI,MAAQ,OAAA,CAAA,MAAA,GAAS,QAAQ,QAAS,CAAA,MAAA,CAAA;AAElC,MAAI,IAAA,CAAC,QAAQ,WACb,EAAA;AACI,QAAA,OAAA,CAAQ,UAAU,OAAQ,CAAA,UAAA,CAAA;AAAA,OAC9B;AAAA,KACJ;AAEA,IAAA,KAAA,CAAM,OAAO,CAAA,CAAA;AA/BjB,IAAO,IAAA,CAAA,IAAA,GAAA,OAAA,CAAA;AAEP,IAAY,IAAA,CAAA,SAAA,GAAA,CAAA,CAAA;AA+BR,IAAA,IAAA,CAAK,cAAc,OAAQ,CAAA,WAAA,CAAA;AAE3B,IAAA,MAAM,SAAS,OAAQ,CAAA,QAAA,CAAA;AAEvB,IAAA,IAAI,KAAK,UAAe,KAAA,MAAA,CAAO,SAAS,IAAK,CAAA,UAAA,KAAe,OAAO,MACnE,EAAA;AACI,MAAA,IAAA,CAAK,YAAa,EAAA,CAAA;AAAA,KACtB;AAAA,GACJ;AAAA,EAEA,YACA,GAAA;AACI,IAAA,IAAI,KAAK,WACT,EAAA;AACI,MAAA,IAAA,CAAK,QAAS,CAAA,KAAA,CAAM,KAAQ,GAAA,CAAA,EAAG,IAAK,CAAA,KAAA,CAAA,EAAA,CAAA,CAAA;AACpC,MAAA,IAAA,CAAK,QAAS,CAAA,KAAA,CAAM,MAAS,GAAA,CAAA,EAAG,IAAK,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA;AAAA,KACzC;AAEA,IAAK,IAAA,CAAA,QAAA,CAAS,QAAQ,IAAK,CAAA,UAAA,CAAA;AAC3B,IAAK,IAAA,CAAA,QAAA,CAAS,SAAS,IAAK,CAAA,WAAA,CAAA;AAAA,GAChC;AAAA,EAEA,MAAA,CAAO,QAAQ,IAAK,CAAA,KAAA,EAAO,SAAS,IAAK,CAAA,MAAA,EAAQ,UAAa,GAAA,IAAA,CAAK,WACnE,EAAA;AACI,IAAM,KAAA,CAAA,MAAA,CAAO,KAAO,EAAA,MAAA,EAAQ,UAAU,CAAA,CAAA;AAEtC,IAAA,IAAA,CAAK,YAAa,EAAA,CAAA;AAAA,GACtB;AACJ;;;;"}