{"version":3,"file":"TextureSource.js","sources":["../../../../../../src/rendering/renderers/shared/texture/sources/TextureSource.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { TextureStyle } from '../TextureStyle';\n\nimport type { BindResource } from '../../../gpu/shader/BindResource';\nimport type { TEXTURE_DIMENSIONS, TEXTURE_FORMATS, TEXTURE_VIEW_DIMENSIONS } from '../const';\nimport type { BindableTexture } from '../Texture';\nimport type { TextureStyleOptions } from '../TextureStyle';\n\nlet UID = 0;\nlet RESOURCE_ID = 0;\n\nexport interface TextureSourceOptions<T extends Record<string, any> = any>\n{\n    resource?: T;\n\n    width?: number;\n    height?: number;\n    resolution?: number;\n\n    format?: TEXTURE_FORMATS;\n    sampleCount?: number;\n    antialias?: boolean;\n\n    dimensions?: TEXTURE_DIMENSIONS;\n    view?: TEXTURE_VIEW_DIMENSIONS;\n\n    mipLevelCount?: number;\n    autoGenerateMipmaps?: boolean;\n\n    style?: TextureStyleOptions | TextureStyle;\n}\n\nexport class TextureSource<T extends Record<string, any> = any> extends EventEmitter<{\n    change: BindResource;\n    update: TextureSource;\n    destroy: TextureSource;\n    resize: TextureSource;\n}> implements BindableTexture, BindResource\n{\n    uid = UID++;\n\n    resourceType = 'textureSource';\n    resourceId = RESOURCE_ID++;\n\n    type = 'unknown';\n\n    // dimensions\n    _resolution = 1;\n    pixelWidth = 1;\n    pixelHeight = 1;\n\n    width = 1;\n    height = 1;\n\n    resource: T;\n\n    // sample count for multisample textures\n    // generally this is used only used internally by pixi!\n    sampleCount = 1;\n\n    // antialias = false;\n\n    // mip stuff..\n    mipLevelCount = 1; // overridden if autoGenerateMipmaps is true\n    autoGenerateMipmaps = false;\n\n    format: TEXTURE_FORMATS = 'rgba8unorm-srgb';\n    viewDimensions: TEXTURE_VIEW_DIMENSIONS = '2d';\n    dimension: TEXTURE_DIMENSIONS = '2d';\n\n    style: TextureStyle;\n\n    styleSourceKey: number;\n\n    // properties used when rendering to this texture..\n    antialias = false;\n    depthStencil = true;\n\n    constructor(options: TextureSourceOptions<T> = {})\n    {\n        super();\n\n        this.resource = options.resource;\n\n        this._resolution = options.resolution ?? 1;\n\n        if (options.width)\n        {\n            this.pixelWidth = options.width * this._resolution;\n        }\n        else\n        {\n            this.pixelWidth = options.resource?.width ?? 1;\n        }\n\n        if (options.height)\n        {\n            this.pixelHeight = options.height * this._resolution;\n        }\n        else\n        {\n            this.pixelHeight = options.resource?.height ?? 1;\n        }\n\n        this.width = this.pixelWidth / this._resolution;\n        this.height = this.pixelHeight / this._resolution;\n\n        this.format = options.format ?? 'bgra8unorm';\n        this.viewDimensions = options.view ?? '2d';\n        this.dimension = options.dimensions ?? '2d';\n        this.mipLevelCount = options.mipLevelCount ?? 1;\n        this.autoGenerateMipmaps = options.autoGenerateMipmaps ?? false;\n        this.sampleCount = options.sampleCount ?? 1;\n        this.antialias = options.antialias ?? false;\n\n        const style = options.style ?? {};\n\n        this.style = style instanceof TextureStyle ? style : new TextureStyle(style);\n        this.style.on('change', this.onStyleUpdate, this);\n\n        this.styleSourceKey = (this.style.resourceId << 24) + this.uid;\n    }\n\n    get source(): TextureSource\n    {\n        return this;\n    }\n\n    update()\n    {\n        this.emit('update', this);\n    }\n\n    onStyleUpdate()\n    {\n        this.styleSourceKey = (this.style.resourceId << 24) + this.uid;\n    }\n\n    /** Destroys this texture source */\n    destroy()\n    {\n        this.emit('destroy', this);\n\n        if (this.style)\n        {\n            this.style.destroy();\n            this.style = null;\n        }\n\n        this.type = null;\n        this.resource = null;\n        this.removeAllListeners();\n    }\n\n    get resolution(): number\n    {\n        return this._resolution;\n    }\n\n    set resolution(resolution: number)\n    {\n        if (this._resolution === resolution) return;\n\n        this._resolution = resolution;\n\n        this.width = this.pixelWidth / resolution;\n        this.height = this.pixelHeight / resolution;\n    }\n\n    resize(width?: number, height?: number, resolution?: number)\n    {\n        resolution = resolution || this._resolution;\n        width = width || this.width;\n        height = height || this.height;\n\n        // make sure we work with rounded pixels\n        const newPixelWidth = Math.round(width * resolution);\n        const newPixelHeight = Math.round(height * resolution);\n\n        this.width = newPixelWidth / resolution;\n        this.height = newPixelHeight / resolution;\n\n        this._resolution = resolution;\n\n        if (this.pixelWidth === newPixelWidth && this.pixelHeight === newPixelHeight)\n        {\n            return;\n        }\n\n        this.pixelWidth = newPixelWidth;\n        this.pixelHeight = newPixelHeight;\n\n        this.emit('resize', this);\n\n        this.resourceId++;\n        this.emit('change', this);\n    }\n}\n"],"names":["EventEmitter","TextureStyle"],"mappings":"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"}