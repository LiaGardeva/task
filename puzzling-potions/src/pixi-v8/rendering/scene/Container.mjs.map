{"version":3,"file":"Container.mjs","sources":["../../../src/rendering/scene/Container.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { DEG_TO_RAD, RAD_TO_DEG } from '../../maths/const';\nimport { Matrix } from '../../maths/Matrix';\nimport { ObservablePoint } from '../../maths/ObservablePoint';\nimport { childrenHelperMixin } from './container-mixins/childrenHelperMixin';\nimport { effectsMixin } from './container-mixins/effectsMixin';\nimport { findMixin } from './container-mixins/getByLabelMixin';\nimport { measureMixin } from './container-mixins/measureMixin';\nimport { onRenderMixin } from './container-mixins/onRenderMixin';\nimport { sortMixin } from './container-mixins/sortMixin';\nimport { toLocalGlobalMixin } from './container-mixins/toLocalGlobalMixin';\nimport { LayerGroup } from './LayerGroup';\n\nimport type { Dict } from '../../utils/types';\nimport type { Renderable } from '../renderers/shared/Renderable';\nimport type { BLEND_MODES } from '../renderers/shared/state/const';\nimport type { View } from '../renderers/shared/View';\nimport type { DestroyOptions } from './destroyTypes';\nimport type { Effect } from './Effect';\n\nlet uid = 0;\n\nexport function getRenderableUID()\n{\n    return uid++;\n}\n\n// as pivot and skew are the least used properties of a container, we can use this optimisation\n// to avoid allocating lots of unnecessary objects for them.\nconst defaultSkew = new ObservablePoint(null);\nconst defaultPivot = new ObservablePoint(null);\nconst defaultScale = new ObservablePoint(null, 1, 1);\n\nexport interface ContainerEvents extends PixiMixins.ContainerEvents\n{\n    added: [container: Container];\n    childAdded: [child: Container, container: Container, index: number];\n    removed: [container: Container];\n    childRemoved: [child: Container, container: Container, index: number];\n    destroyed: [];\n}\n\nexport interface ContainerOptions<T extends View>\n{\n    label?: string;\n    layer?: boolean;\n    sortableChildren?: boolean;\n    view?: T;\n}\n\nexport const UPDATE_COLOR = 0b0001;\nexport const UPDATE_BLEND = 0b0010;\nexport const UPDATE_VISIBLE = 0b0100;\nexport const UPDATE_TRANSFORM = 0b1000;\n\nexport interface Container\n    extends Omit<PixiMixins.Container, keyof EventEmitter<ContainerEvents>>,\n    EventEmitter<ContainerEvents> {}\n\nexport class Container<T extends View = View> extends EventEmitter<ContainerEvents> implements Renderable\n{\n    /**\n     * Mixes all enumerable properties and methods from a source object to Container.\n     * @param source - The source of properties and methods to mix in.\n     */\n    static mixin(source: Dict<any>): void\n    {\n        Object.defineProperties(Container.prototype, Object.getOwnPropertyDescriptors(source));\n    }\n\n    uid: number = uid++;\n    label: string = null;\n\n    updateFlags = 0b1111;\n\n    // is this container the root of a layer?\n    // TODO implement this in a few more places\n    isLayerRoot = false;\n    // the layer group this container belongs to OR owns\n    // TODO consider separating that?\n    // currently just need to check if its a container is layer root\n    // to ascertain if its a layer owner or not..\n    layerGroup: LayerGroup = null;\n\n    // set to true if the container has changed. It is reset once the changes have been applied\n    // by the transform system\n    // its here to stop ensure that when things change, only one update gets registers with the transform system\n    didChange = false;\n    // same as above, but for the renderable\n    didViewUpdate = false;\n    // how deep is the container relative to its layer..\n    // unless the element is the root layer - it will be relative to its parent\n    relativeLayerDepth = 0;\n\n    children: Container[] = [];\n    parent: Container = null;\n\n    // used internally for changing up the render order.. mainly for masks and filters\n    // TODO setting this should cause a rebuild??\n    includeInBuild = true;\n    measurable = true;\n    isSimple = true;\n\n    /// /////////////Transform related props//////////////\n\n    // used by the transform system to check if a container needs to be updated that frame\n    // if the tick matches the current transform system tick, it is not updated again\n    updateTick = -1;\n\n    localTransform: Matrix = new Matrix();\n    // transform relative to its layer..\n    layerTransform: Matrix = new Matrix();\n    // the global transform taking into account the layer and all parents\n    _worldTransform: Matrix;\n\n    // transform data..\n    /** The coordinate of the object relative to the local coordinates of the parent. */\n    public position: ObservablePoint = new ObservablePoint(this, 0, 0);\n\n    /** The scale factor of the object. */\n    public _scale: ObservablePoint = defaultScale;\n\n    /** The pivot point of the displayObject that it rotates around. */\n    public _pivot: ObservablePoint = defaultPivot;\n\n    /** The skew amount, on the x and y axis. */\n    public _skew: ObservablePoint = defaultSkew;\n\n    /**\n     * The X-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     */\n    public _cx = 1;\n\n    /**\n     * The Y-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     */\n    public _sx = 0;\n\n    /**\n     * The X-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     */\n    public _cy = 0;\n\n    /**\n     * The Y-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     */\n    public _sy = 1;\n\n    /** The rotation amount. */\n    public _rotation = 0;\n\n    /// COLOR related props //////////////\n\n    // color stored as ABGR\n    public localColor = 0xFFFFFFFF;\n    public layerColor = 0xFFFFFFFF;\n\n    /// BLEND related props //////////////\n\n    public localBlendMode: BLEND_MODES = 'inherit';\n    public layerBlendMode: BLEND_MODES = 'normal';\n\n    /// VISIBILITY related props //////////////\n\n    // visibility\n    // 0b11\n    // first bit is visible, second bit is renderable\n    localVisibleRenderable = 0b11; // 0b11 | 0b10 | 0b01 | 0b00\n    layerVisibleRenderable = 0b11; // 0b11 | 0b10 | 0b01 | 0b00\n\n    /// /// EFFECTS and masks etc...\n\n    effects: Effect[] = [];\n\n    addEffect(effect: Effect)\n    {\n        const index = this.effects.indexOf(effect);\n\n        if (index !== -1) return; // already exists!\n\n        this.effects.push(effect);\n\n        this.effects.sort((a, b) => a.priority - b.priority);\n\n        if (!this.isLayerRoot && this.layerGroup)\n        {\n            this.layerGroup.structureDidChange = true;\n        }\n\n        this.updateIsSimple();\n    }\n\n    removeEffect(effect: Effect)\n    {\n        const index = this.effects.indexOf(effect);\n\n        if (index === -1) return; // already exists!\n\n        this.effects.splice(index, 1);\n\n        if (!this.isLayerRoot && this.layerGroup)\n        {\n            this.layerGroup.structureDidChange = true;\n        }\n\n        this.updateIsSimple();\n    }\n\n    // a renderable object... like a sprite!\n    public readonly view: T;\n\n    constructor({ label, layer, view, sortableChildren }: ContainerOptions<T> = {})\n    {\n        super();\n\n        if (label)\n        {\n            this.label = label;\n        }\n\n        if (layer)\n        {\n            this.enableLayer();\n        }\n\n        if (view)\n        {\n            this.view = view;\n\n            // in the future we could de-couple container and view..\n            // but for now this is just faster!\n            this.view.owner = this;\n        }\n\n        this.sortChildren = !!sortableChildren;\n    }\n\n    /**\n     * Adds one or more children to the container.\n     *\n     * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`\n     * @param {...PIXI.Container} children - The Container(s) to add to the container\n     * @returns {PIXI.Container} - The first child that was added.\n     */\n    addChild<U extends Container[]>(...children: Container[]): U[0]\n    {\n        if (children.length > 1)\n        {\n            // loop through the array and add all children\n            for (let i = 0; i < children.length; i++)\n            {\n                this.addChild(children[i]);\n            }\n\n            return children[0];\n        }\n\n        const child = children[0];\n\n        if (child.parent === this)\n        {\n            this.children.splice(this.children.indexOf(child), 1);\n            this.children.push(child);\n\n            if (this.layerGroup && !this.isLayerRoot)\n            {\n                this.layerGroup.structureDidChange = true;\n            }\n\n            return child;\n        }\n\n        if (child.parent)\n        {\n            // TODO Optimisation...if the parent has the same layer group, this does not need to change!\n            child.parent.removeChild(child);\n        }\n\n        this.children.push(child);\n\n        if (this.sortChildren) this.sortDirty = true;\n\n        child.parent = this;\n\n        child.didChange = true;\n        child.didViewUpdate = false;\n\n        // TODO - OPtimise this? could check what the parent has set?\n        child.updateFlags = 0b1111;\n\n        if (this.layerGroup)\n        {\n            this.layerGroup.addChild(child);\n        }\n\n        // this.emit('childAdded', child, this);\n        // child.emit('added', this);\n\n        return child;\n    }\n\n    /**\n     * Removes one or more children from the container.\n     * @param {...PIXI.Container} children - The Container(s) to remove\n     * @returns {PIXI.Container} The first child that was removed.\n     */\n    removeChild<U extends Container[]>(...children: U): U[0]\n    {\n        // if there is only one argument we can bypass looping through the them\n        if (children.length > 1)\n        {\n            // loop through the arguments property and remove all children\n            for (let i = 0; i < children.length; i++)\n            {\n                this.removeChild(children[i]);\n            }\n\n            return children[0];\n        }\n\n        const child = children[0];\n\n        const index = this.children.indexOf(child);\n\n        if (index > -1)\n        {\n            this.children.splice(index, 1);\n\n            if (this.layerGroup)\n            {\n                this.layerGroup.removeChild(child);\n            }\n        }\n\n        child.parent = null;\n        // this.emit('childRemoved', child, this, index);\n        // child.emit('removed', this);\n\n        return child;\n    }\n\n    onUpdate(point?: ObservablePoint)\n    {\n        if (point)\n        {\n            //   this.updateFlags |= UPDATE_TRANSFORM;\n\n            if (point === this._skew)\n            {\n                this.updateSkew();\n            }\n        }\n\n        if (this.didChange) return;\n        this.didChange = true;\n\n        if (this.isLayerRoot)\n        {\n            const layerGroupParent = this.layerGroup.layerGroupParent;\n            // lets update its parent..\n\n            if (layerGroupParent)\n            {\n                layerGroupParent.onChildUpdate(this);\n            }\n        }\n        else if (this.layerGroup)\n        {\n            this.layerGroup.onChildUpdate(this);\n        }\n    }\n\n    onViewUpdate()\n    {\n        if (this.didViewUpdate) return;\n        this.didViewUpdate = true;\n\n        if (this.layerGroup)\n        {\n            this.layerGroup.onChildViewUpdate(this);\n        }\n    }\n\n    set layer(value: boolean)\n    {\n        if (this.isLayerRoot && value === false)\n        {\n            throw new Error('[Pixi] cannot undo a layer just yet');\n        }\n\n        if (value)\n        {\n            this.enableLayer();\n        }\n    }\n\n    get layer(): boolean\n    {\n        return this.isLayerRoot;\n    }\n\n    enableLayer()\n    {\n        // does it OWN the layer..\n        if (this.layerGroup && this.layerGroup.root === this) return;\n\n        this.isLayerRoot = true;\n\n        const parentLayerGroup = this.layerGroup;\n\n        if (parentLayerGroup)\n        {\n            parentLayerGroup.removeChild(this);\n        }\n\n        this.layerGroup = new LayerGroup(this);\n\n        // find children layers and move them out..\n        if (parentLayerGroup)\n        {\n            for (let i = 0; i < parentLayerGroup.layerGroupChildren.length; i++)\n            {\n                const childLayerGroup = parentLayerGroup.layerGroupChildren[i];\n                let parent = childLayerGroup.root;\n\n                while (parent)\n                {\n                    if (parent === this)\n                    {\n                        this.layerGroup.addLayerGroupChild(childLayerGroup);\n\n                        break;\n                    }\n                    parent = parent.parent;\n                }\n            }\n\n            parentLayerGroup.addLayerGroupChild(this.layerGroup);\n        }\n\n        this.updateIsSimple();\n    }\n\n    get worldTransform()\n    {\n        this._worldTransform ||= new Matrix();\n\n        if (this.layerGroup)\n        {\n            if (this.isLayerRoot)\n            {\n                this._worldTransform.copyFrom(this.layerGroup.worldTransform);\n            }\n            else\n            {\n                this._worldTransform.appendFrom(this.layerTransform, this.layerGroup.worldTransform);\n            }\n        }\n\n        return this._worldTransform;\n    }\n\n    /// ////// transform related stuff\n\n    /**\n     * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n     * An alias to position.x\n     */\n    get x(): number\n    {\n        return this.position.x;\n    }\n\n    set x(value: number)\n    {\n        this.position.x = value;\n    }\n\n    /**\n     * The position of the displayObject on the y axis relative to the local coordinates of the parent.\n     * An alias to position.y\n     */\n    get y(): number\n    {\n        return this.position.y;\n    }\n\n    set y(value: number)\n    {\n        this.position.y = value;\n    }\n\n    /**\n     * The rotation of the object in radians.\n     * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n     */\n    get rotation(): number\n    {\n        return this._rotation;\n    }\n\n    set rotation(value: number)\n    {\n        if (this._rotation !== value)\n        {\n            this._rotation = value;\n            this.onUpdate(this._skew);\n        }\n    }\n\n    /**\n     * The angle of the object in degrees.\n     * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n     */\n    get angle(): number\n    {\n        return this.rotation * RAD_TO_DEG;\n    }\n\n    set angle(value: number)\n    {\n        this.rotation = value * DEG_TO_RAD;\n    }\n\n    get pivot(): ObservablePoint\n    {\n        if (this._pivot === defaultPivot)\n        {\n            this._pivot = new ObservablePoint(this, 0, 0);\n        }\n\n        return this._pivot;\n    }\n\n    get skew(): ObservablePoint\n    {\n        if (this._skew === defaultSkew)\n        {\n            this._skew = new ObservablePoint(this, 0, 0);\n        }\n\n        return this._skew;\n    }\n\n    get scale(): ObservablePoint\n    {\n        if (this._scale === defaultScale)\n        {\n            this._scale = new ObservablePoint(this, 1, 1);\n        }\n\n        return this._scale;\n    }\n\n    /** Called when the skew or the rotation changes. */\n    updateSkew(): void\n    {\n        const rotation = this._rotation;\n        const skew = this._skew;\n\n        this._cx = Math.cos(rotation + skew._y);\n        this._sx = Math.sin(rotation + skew._y);\n        this._cy = -Math.sin(rotation - skew._x); // cos, added PI/2\n        this._sy = Math.cos(rotation - skew._x); // sin, added PI/2\n    }\n\n    /// ///// color related stuff\n\n    set alpha(value: number)\n    {\n        value = (value * 255) | 0;\n\n        if (value === ((this.localColor >> 24) & 0xFF)) return;\n\n        this.localColor = (this.localColor & 0x00FFFFFF) | (value << 24);\n\n        this.updateFlags |= UPDATE_COLOR;\n\n        this.onUpdate();\n    }\n\n    get alpha(): number\n    {\n        return ((this.localColor >> 24) & 0xFF) / 255;\n    }\n\n    set tint(value: number)\n    {\n        // convert RGB to BGR\n        value = ((value & 0xFF) << 16) + (value & 0xFF00) + ((value >> 16) & 0xFF);\n\n        if (value === (this.localColor & 0x00FFFFFF)) return;\n\n        // set the BGR values of the color only\n\n        this.localColor = (this.localColor & 0xFF000000) | (value & 0xFFFFFF);\n\n        this.updateFlags |= UPDATE_COLOR;\n\n        this.onUpdate();\n    }\n\n    get tint(): number\n    {\n        const bgr = this.localColor & 0x00FFFFFF;\n        // convert bgr to rgb..\n\n        return ((bgr & 0xFF) << 16) + (bgr & 0xFF00) + ((bgr >> 16) & 0xFF);\n    }\n\n    /// //////////////// blend related stuff\n\n    set blendMode(value: BLEND_MODES)\n    {\n        if (this.localBlendMode === value) return;\n\n        // TODO look at this in the future!!\n        // blend mode changes break batches!\n\n        // if (this.layerGroup && !this.isLayerRoot)\n        // {\n        //     const didChangeToAdvanced = this.localBlendMode < (1 << 4) && value >= (1 << 4);\n\n        //     // if its a single non batched item, we can just update the blend mode\n        //     if (didChangeToAdvanced || this.children.length !== 0 || !this.view || !this.view.batched)\n        //     {\n        //         this.layerGroup.structureDidChange = true;\n        //     }\n        // }\n\n        if (this.layerGroup && !this.isLayerRoot)\n        {\n            this.layerGroup.structureDidChange = true;\n        }\n\n        this.updateFlags |= UPDATE_BLEND;\n\n        this.localBlendMode = value;\n\n        this.onUpdate();\n    }\n\n    get blendMode(): BLEND_MODES\n    {\n        return this.localBlendMode;\n    }\n\n    /// ///////// VISIBILITY / RENDERABLE /////////////////\n\n    get visible()\n    {\n        return !!(this.localVisibleRenderable & 0b10);\n    }\n\n    // visible -  the renderable is not shown, also the transform is not updated\n    set visible(value: boolean)\n    {\n        const valueNumber = value ? 1 : 0;\n\n        if ((this.localVisibleRenderable & 0b10) >> 1 === valueNumber) return;\n\n        if (this.layerGroup && !this.isLayerRoot)\n        {\n            this.layerGroup.structureDidChange = true;\n        }\n\n        this.updateFlags |= UPDATE_VISIBLE;\n\n        this.localVisibleRenderable = (this.localVisibleRenderable & 0b01) | (valueNumber << 1);\n\n        this.onUpdate();\n    }\n\n    get renderable()\n    {\n        return !!(this.localVisibleRenderable & 0b01);\n    }\n\n    set renderable(value: boolean)\n    {\n        const valueNumber = value ? 1 : 0;\n\n        if ((this.localVisibleRenderable & 0b01) === valueNumber) return;\n\n        this.localVisibleRenderable = (this.localVisibleRenderable & 0b10) | valueNumber;\n\n        this.updateFlags |= UPDATE_VISIBLE;\n\n        if (this.layerGroup && !this.isLayerRoot)\n        {\n            this.layerGroup.structureDidChange = true;\n        }\n\n        this.onUpdate();\n    }\n\n    get isRenderable(): boolean\n    {\n        const worldAlpha = ((this.layerColor >> 24) & 0xFF);\n\n        return (this.localVisibleRenderable === 0b11 && worldAlpha > 0);\n    }\n\n    updateIsSimple()\n    {\n        this.isSimple = !(this.isLayerRoot) && (this.effects.length === 0);\n    }\n\n    /**\n     * Removes all internal references and listeners as well as removes children from the display list.\n     * Do not use a Container after calling `destroy`.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n     *  method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for children with textures e.g. Sprites. If options.children\n     * is set to true it should destroy the texture of the child sprite\n     * @param {boolean} [options.textureSource=false] - Only used for children with textures e.g. Sprites.\n     * If options.children is set to true it should destroy the texture source of the child sprite\n     * @param {boolean} [options.context=false] - Only used for children with graphicsContexts e.g. Graphics.\n     * If options.children is set to true it should destroy the context of the child graphics\n     */\n    public destroy(options: DestroyOptions = false): void\n    {\n        this.removeFromParent();\n        this.parent = null;\n        // this._onRender = null;\n        this._mask = null;\n        this._filters = null;\n        // this.renderGroup = null;\n        // this.parentRenderGroup = null;\n        // this.parentTransform = null;\n        this.effects = null;\n        this.position = null;\n        this._scale = null;\n        this._pivot = null;\n        this._skew = null;\n\n        this.emit('destroyed');\n\n        this.removeAllListeners();\n\n        const destroyChildren = typeof options === 'boolean' ? options : options?.children;\n\n        const oldChildren = this.removeChildren(0, this.children.length);\n\n        if (destroyChildren)\n        {\n            for (let i = 0; i < oldChildren.length; ++i)\n            {\n                oldChildren[i].destroy(options);\n            }\n        }\n\n        if (this.view)\n        {\n            this.view.destroy(options);\n            this.view.owner = null;\n        }\n    }\n}\n\nContainer.mixin(childrenHelperMixin);\nContainer.mixin(toLocalGlobalMixin);\nContainer.mixin(onRenderMixin);\nContainer.mixin(measureMixin);\nContainer.mixin(effectsMixin);\nContainer.mixin(findMixin);\nContainer.mixin(sortMixin);\n\n"],"names":[],"mappings":"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"}