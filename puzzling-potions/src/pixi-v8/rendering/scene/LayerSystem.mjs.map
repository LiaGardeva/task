{"version":3,"file":"LayerSystem.mjs","sources":["../../../src/rendering/scene/LayerSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../extensions/Extensions';\nimport { buildInstructions } from './utils/buildInstructions';\nimport { collectLayerGroups } from './utils/collectLayerGroups';\nimport { executeInstructions } from './utils/executeInstructions';\nimport { updateLayerGroupTransforms } from './utils/updateLayerGroupTransforms';\nimport { validateRenderables } from './utils/validateRenderables';\n\nimport type { WebGPURenderer } from '../renderers/gpu/WebGPURenderer';\nimport type { System } from '../renderers/shared/system/System';\nimport type { Renderer } from '../renderers/types';\nimport type { Container } from './Container';\nimport type { LayerGroup } from './LayerGroup';\n\n/**\n * The view system manages the main canvas that is attached to the DOM.\n * This main role is to deal with how the holding the view reference and dealing with how it is resized.\n * @memberof PIXI\n */\n\nexport class LayerSystem implements System\n{\n    /** @ignore */\n    static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'layer',\n    } as const;\n\n    private renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    render({ container }: {container: Container}): void\n    {\n        container.layer = true;\n\n        const renderer = this.renderer;\n\n        // collect all the renderGroups in the scene and then render them one by one..\n        const layerGroups = collectLayerGroups(container.layerGroup, []);\n\n        const renderPipes = (renderer as WebGPURenderer).renderPipes;\n\n        for (let i = 0; i < layerGroups.length; i++)\n        {\n            const layerGroup = layerGroups[i];\n\n            layerGroup.runOnRender();\n\n            layerGroup.instructionSet.renderPipes = renderPipes;\n\n            if (!layerGroup.structureDidChange)\n            {\n                // phase 1 - validate all the renderables\n                validateRenderables(layerGroup, renderPipes);\n            }\n\n            // phase 2 - update all the transforms\n            // including updating the renderables..\n            updateLayerGroupTransforms(layerGroup);\n\n            if (layerGroup.structureDidChange)\n            {\n                layerGroup.structureDidChange = false;\n\n                // build the renderables\n                buildInstructions(layerGroup, renderPipes);\n            }\n            else\n            {\n                // update remaining renderables\n                updateThings(layerGroup);\n            }\n\n            // upload all the things!\n            renderer.renderPipes.batch.upload(layerGroup.instructionSet);\n        }\n\n        renderer.globalUniforms.start(\n            {\n                projectionMatrix: renderer.renderTarget.rootProjectionMatrix,\n                worldTransformMatrix: container.layerGroup.worldTransform\n            }\n        );\n\n        executeInstructions(container.layerGroup, renderPipes);\n\n        // TODO need to add some events / runners for things like this to hook up to\n        if (renderPipes.uniformBatch)\n        {\n            renderPipes.uniformBatch.renderEnd();\n            renderPipes.uniformBuffer.renderEnd();\n        }\n    }\n\n    destroy()\n    {\n        // boom!\n    }\n}\n\nfunction updateThings(layerGroup: LayerGroup)\n{\n    const { list, index } = layerGroup.childrenRenderablesToUpdate;\n\n    for (let i = 0; i < index; i++)\n    {\n        const container = list[i];\n\n        if (container.didViewUpdate)\n        {\n            layerGroup.updateRenderable(container);\n        }\n    }\n\n    layerGroup.childrenRenderablesToUpdate.index = 0;\n}\n\n"],"names":[],"mappings":";;;;;;;AAmBO,MAAM,WACb,CAAA;AAAA,EAaI,YAAY,QACZ,EAAA;AACI,IAAA,IAAA,CAAK,QAAW,GAAA,QAAA,CAAA;AAAA,GACpB;AAAA,EAEA,MAAA,CAAO,EAAE,SAAA,EACT,EAAA;AACI,IAAA,SAAA,CAAU,KAAQ,GAAA,IAAA,CAAA;AAElB,IAAA,MAAM,WAAW,IAAK,CAAA,QAAA,CAAA;AAGtB,IAAA,MAAM,WAAc,GAAA,kBAAA,CAAmB,SAAU,CAAA,UAAA,EAAY,EAAE,CAAA,CAAA;AAE/D,IAAA,MAAM,cAAe,QAA4B,CAAA,WAAA,CAAA;AAEjD,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,WAAA,CAAY,QAAQ,CACxC,EAAA,EAAA;AACI,MAAM,MAAA,UAAA,GAAa,YAAY,CAAC,CAAA,CAAA;AAEhC,MAAA,UAAA,CAAW,WAAY,EAAA,CAAA;AAEvB,MAAA,UAAA,CAAW,eAAe,WAAc,GAAA,WAAA,CAAA;AAExC,MAAI,IAAA,CAAC,WAAW,kBAChB,EAAA;AAEI,QAAA,mBAAA,CAAoB,YAAY,WAAW,CAAA,CAAA;AAAA,OAC/C;AAIA,MAAA,0BAAA,CAA2B,UAAU,CAAA,CAAA;AAErC,MAAA,IAAI,WAAW,kBACf,EAAA;AACI,QAAA,UAAA,CAAW,kBAAqB,GAAA,KAAA,CAAA;AAGhC,QAAA,iBAAA,CAAkB,YAAY,WAAW,CAAA,CAAA;AAAA,OAG7C,MAAA;AAEI,QAAA,YAAA,CAAa,UAAU,CAAA,CAAA;AAAA,OAC3B;AAGA,MAAA,QAAA,CAAS,WAAY,CAAA,KAAA,CAAM,MAAO,CAAA,UAAA,CAAW,cAAc,CAAA,CAAA;AAAA,KAC/D;AAEA,IAAA,QAAA,CAAS,cAAe,CAAA,KAAA;AAAA,MACpB;AAAA,QACI,gBAAA,EAAkB,SAAS,YAAa,CAAA,oBAAA;AAAA,QACxC,oBAAA,EAAsB,UAAU,UAAW,CAAA,cAAA;AAAA,OAC/C;AAAA,KACJ,CAAA;AAEA,IAAoB,mBAAA,CAAA,SAAA,CAAU,YAAY,WAAW,CAAA,CAAA;AAGrD,IAAA,IAAI,YAAY,YAChB,EAAA;AACI,MAAA,WAAA,CAAY,aAAa,SAAU,EAAA,CAAA;AACnC,MAAA,WAAA,CAAY,cAAc,SAAU,EAAA,CAAA;AAAA,KACxC;AAAA,GACJ;AAAA,EAEA,OACA,GAAA;AAAA,GAEA;AACJ,CAAA;AAAA;AAtFa,WAAA,CAGF,SAAY,GAAA;AAAA,EACf,IAAM,EAAA;AAAA,IACF,aAAc,CAAA,WAAA;AAAA,IACd,aAAc,CAAA,YAAA;AAAA,IACd,aAAc,CAAA,YAAA;AAAA,GAClB;AAAA,EACA,IAAM,EAAA,OAAA;AACV,CAAA,CAAA;AA8EJ,SAAS,aAAa,UACtB,EAAA;AACI,EAAA,MAAM,EAAE,IAAA,EAAM,KAAM,EAAA,GAAI,UAAW,CAAA,2BAAA,CAAA;AAEnC,EAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,KAAA,EAAO,CAC3B,EAAA,EAAA;AACI,IAAM,MAAA,SAAA,GAAY,KAAK,CAAC,CAAA,CAAA;AAExB,IAAA,IAAI,UAAU,aACd,EAAA;AACI,MAAA,UAAA,CAAW,iBAAiB,SAAS,CAAA,CAAA;AAAA,KACzC;AAAA,GACJ;AAEA,EAAA,UAAA,CAAW,4BAA4B,KAAQ,GAAA,CAAA,CAAA;AACnD;;;;"}