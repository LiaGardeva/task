{"version":3,"file":"Bounds.mjs","sources":["../../../../src/rendering/scene/bounds/Bounds.ts"],"sourcesContent":["import { Matrix } from '../../../maths/Matrix';\nimport { Rectangle } from '../../../maths/shapes/Rectangle';\n\n// TODO optimisations\n// 1 - setMatrix could set a reference directly, this would save a copy op per object\n// 2 - push and pop matrix could be optimised to use an index counter\n// 3 - get rectangle could use a dirty flag, rather than setting the data each time is called\n// 4 - push matrix can avoid the copy op\n// 5 - pop matrix can avoid the copy op\n// 6 - getFrame ALWAYS assumes a matrix, could be optimised to avoid the matrix calculation if not needed\nexport class Bounds\n{\n    public minX = Infinity;\n\n    public minY = Infinity;\n\n    public maxX = -Infinity;\n\n    public maxY = -Infinity;\n\n    // todo optimise.. lots of bounds wont need this!\n    matrixStack: Matrix[] = [];\n    matrix = new Matrix();\n\n    private _rectangle: Rectangle;\n\n    constructor(minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity)\n    {\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    get rectangle(): Rectangle\n    {\n        if (!this._rectangle)\n        {\n            this._rectangle = new Rectangle();\n        }\n\n        const rectangle = this._rectangle;\n\n        if (this.minX > this.maxX || this.minY > this.maxY)\n        {\n            rectangle.x = 0;\n            rectangle.y = 0;\n            rectangle.width = 0;\n            rectangle.height = 0;\n        }\n        else\n        {\n            rectangle.x = this.minX;\n            rectangle.y = this.minY;\n            rectangle.width = this.maxX - this.minX;\n            rectangle.height = this.maxY - this.minY;\n        }\n\n        return rectangle;\n    }\n\n    clear(): void\n    {\n        this.minX = Infinity;\n        this.minY = Infinity;\n        this.maxX = -Infinity;\n        this.maxY = -Infinity;\n\n        this.matrixStack.length = 0;\n        this.matrix.identity();\n    }\n\n    pushMatrix(matrix: Matrix)\n    {\n        this.matrixStack.push(matrix);\n\n        if (this.matrixStack.length > 1)\n        {\n            this.matrix.copyFrom(this.matrixStack[this.matrixStack.length - 2]);\n\n            this.matrix.append(matrix);\n        }\n        else\n        {\n            this.matrix.copyFrom(matrix);\n        }\n    }\n\n    popMatrix()\n    {\n        this.matrixStack.pop();\n\n        if (this.matrixStack.length > 1)\n        {\n            this.matrix.copyFrom(this.matrixStack[this.matrixStack.length - 2]);\n\n            this.matrix.append(this.matrixStack[this.matrixStack.length - 1]);\n        }\n        else if (this.matrixStack.length === 1)\n        {\n            this.matrix.copyFrom(this.matrixStack[0]);\n        }\n        else\n        {\n            this.matrix.identity();\n        }\n    }\n\n    setMatrix(matrix: Matrix): void\n    {\n        this.matrix.copyFrom(matrix);\n    }\n\n    set(x0: number, y0: number, x1: number, y1: number)\n    {\n        this.minX = x0;\n        this.minY = y0;\n        this.maxX = x1;\n        this.maxY = y1;\n    }\n\n    /**\n     * Adds sprite frame\n     * @param x0 - left X of frame\n     * @param y0 - top Y of frame\n     * @param x1 - right X of frame\n     * @param y1 - bottom Y of frame\n     */\n    addFrame(x0: number, y0: number, x1: number, y1: number)\n    {\n        const matrix = this.matrix;\n\n        const a = matrix.a;\n        const b = matrix.b;\n        const c = matrix.c;\n        const d = matrix.d;\n        const tx = matrix.tx;\n        const ty = matrix.ty;\n\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        let x = (a * x0) + (c * y0) + tx;\n        let y = (b * x0) + (d * y0) + ty;\n\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = (a * x1) + (c * y0) + tx;\n        y = (b * x1) + (d * y0) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = (a * x0) + (c * y1) + tx;\n        y = (b * x0) + (d * y1) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = (a * x1) + (c * y1) + tx;\n        y = (b * x1) + (d * y1) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    addRect(rect: Rectangle)\n    {\n        this.addFrame(rect.x, rect.y, rect.x + rect.width, rect.y + rect.height);\n    }\n\n    addBounds(bounds: Bounds)\n    {\n        this.addFrame(bounds.minX, bounds.minY, bounds.maxX, bounds.maxY);\n    }\n\n    addBoundsMask(mask: Bounds): void\n    {\n        this.minX = this.minX > mask.minX ? this.minX : mask.minX;\n        this.minY = this.minY > mask.minY ? this.minY : mask.minY;\n        this.maxX = this.maxX < mask.maxX ? this.maxX : mask.maxX;\n        this.maxY = this.maxY < mask.maxY ? this.maxY : mask.maxY;\n    }\n\n    applyMatrix(matrix: Matrix): void\n    {\n        const minX = this.minX;\n        const minY = this.minY;\n        const maxX = this.maxX;\n        const maxY = this.maxY;\n\n        // multiple bounds by matrix\n        const { a, b, c, d, tx, ty } = matrix;\n\n        let x = (a * minX) + (c * minY) + tx;\n        let y = (b * minX) + (d * minY) + ty;\n\n        this.minX = x;\n        this.minY = y;\n        this.maxX = x;\n        this.maxY = y;\n\n        x = (a * maxX) + (c * minY) + tx;\n        y = (b * maxX) + (d * minY) + ty;\n        this.minX = x < this.minX ? x : this.minX;\n        this.minY = y < this.minY ? y : this.minY;\n        this.maxX = x > this.maxX ? x : this.maxX;\n        this.maxY = y > this.maxY ? y : this.maxY;\n\n        x = (a * minX) + (c * maxY) + tx;\n        y = (b * minX) + (d * maxY) + ty;\n        this.minX = x < this.minX ? x : this.minX;\n        this.minY = y < this.minY ? y : this.minY;\n        this.maxX = x > this.maxX ? x : this.maxX;\n        this.maxY = y > this.maxY ? y : this.maxY;\n\n        x = (a * maxX) + (c * maxY) + tx;\n        y = (b * maxX) + (d * maxY) + ty;\n        this.minX = x < this.minX ? x : this.minX;\n        this.minY = y < this.minY ? y : this.minY;\n        this.maxX = x > this.maxX ? x : this.maxX;\n        this.maxY = y > this.maxY ? y : this.maxY;\n    }\n\n    fit(rect: Rectangle): this\n    {\n        if (this.minX < rect.left) this.minX = rect.left;\n        if (this.maxX > rect.right) this.maxX = rect.right;\n\n        if (this.minY < rect.top) this.minY = rect.top;\n        if (this.maxY > rect.bottom) this.maxY = rect.bottom;\n\n        return this;\n    }\n\n    pad(paddingX: number, paddingY: number = paddingX): this\n    {\n        this.minX -= paddingX;\n        this.maxX += paddingX;\n\n        this.minY -= paddingY;\n        this.maxY += paddingY;\n\n        return this;\n    }\n\n    ceil(): this\n    {\n        this.minX = Math.floor(this.minX);\n        this.minY = Math.floor(this.minY);\n        this.maxX = Math.ceil(this.maxX);\n        this.maxY = Math.ceil(this.maxY);\n\n        return this;\n    }\n\n    clone(): Bounds\n    {\n        return new Bounds(this.minX, this.minY, this.maxX, this.maxY);\n    }\n\n    scale(x: number, y: number = x): this\n    {\n        this.minX *= x;\n        this.minY *= y;\n        this.maxX *= x;\n        this.maxY *= y;\n\n        return this;\n    }\n\n    get x(): number\n    {\n        return this.minX;\n    }\n\n    get y(): number\n    {\n        return this.minY;\n    }\n\n    get width(): number\n    {\n        return this.maxX - this.minX;\n    }\n\n    get height(): number\n    {\n        return this.maxY - this.minY;\n    }\n\n    get isPositive(): boolean\n    {\n        return (this.maxX - this.minX > 0) && (this.maxY - this.minY > 0);\n    }\n\n    get isValid(): boolean\n    {\n        return (this.minX + this.minY !== Infinity);\n    }\n\n    /**\n     * Adds screen vertices from array\n     * @param vertexData - calculated vertices\n     * @param beginOffset - begin offset\n     * @param endOffset - end offset, excluded\n     */\n    addVertexData(vertexData: Float32Array, beginOffset: number, endOffset: number): void\n    {\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        const matrix = this.matrix;\n\n        const a = matrix.a;\n        const b = matrix.b;\n        const c = matrix.c;\n        const d = matrix.d;\n        const tx = matrix.tx;\n        const ty = matrix.ty;\n\n        for (let i = beginOffset; i < endOffset; i += 2)\n        {\n            const localX = vertexData[i];\n            const localY = vertexData[i + 1];\n\n            const x = (a * localX) + (c * localY) + tx;\n            const y = (b * localX) + (d * localY) + ty;\n\n            minX = x < minX ? x : minX;\n            minY = y < minY ? y : minY;\n            maxX = x > maxX ? x : maxX;\n            maxY = y > maxY ? y : maxY;\n        }\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    toString(): string\n    {\n        // eslint-disable-next-line max-len\n        return `[@pixi:Bounds minX=${this.minX} minY=${this.minY} maxX=${this.maxX} maxY=${this.maxY} width=${this.width} height=${this.height}]`;\n    }\n}\n\n"],"names":[],"mappings":"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"}