{"version":3,"file":"updateLayerGroupTransforms.mjs","sources":["../../../../src/rendering/scene/utils/updateLayerGroupTransforms.ts"],"sourcesContent":["import { Container, UPDATE_BLEND, UPDATE_COLOR, UPDATE_VISIBLE } from '../Container';\nimport { mixColors } from './mixColors';\nimport { updateLocalTransform } from './updateLocalTransform';\n\nimport type { LayerGroup } from '../LayerGroup';\n\nconst tempContainer = new Container();\n\nexport function updateLayerGroupTransforms(layerGroup: LayerGroup, updateChildRenderGroups = false)\n{\n    updateLayerTransform(layerGroup);\n\n    const childrenToUpdate = layerGroup.childrenToUpdate;\n\n    const updateTick = layerGroup.updateTick;\n\n    layerGroup.updateTick++;\n\n    for (const j in childrenToUpdate)\n    {\n        const childrenAtDepth = childrenToUpdate[j];\n\n        const list = childrenAtDepth.list;\n        const index = childrenAtDepth.index;\n\n        for (let i = 0; i < index; i++)\n        {\n            updateTransformAndChildren(list[i], updateTick, 0);\n        }\n\n        childrenAtDepth.index = 0;\n    }\n\n    if (updateChildRenderGroups)\n    {\n        for (let i = 0; i < layerGroup.layerGroupChildren.length; i++)\n        {\n            updateLayerGroupTransforms(layerGroup.layerGroupChildren[i], updateChildRenderGroups);\n        }\n    }\n}\n\nexport function updateLayerTransform(layerGroup: LayerGroup)\n{\n    if (layerGroup.layerGroupParent)\n    {\n        layerGroup.worldTransform.appendFrom(\n            layerGroup.root.layerTransform,\n            layerGroup.layerGroupParent.worldTransform,\n        );\n\n        layerGroup.worldColor = mixColors(\n            layerGroup.root.layerColor,\n            layerGroup.layerGroupParent.worldColor,\n        );\n    }\n    else\n    {\n        layerGroup.worldTransform.copyFrom(layerGroup.root.layerTransform);\n        layerGroup.worldColor = layerGroup.root.localColor;\n    }\n}\n\nexport function updateTransformAndChildren(container: Container, updateTick: number, updateFlags: number)\n{\n    if (updateTick === container.updateTick) return;\n    container.updateTick = updateTick;\n\n    container.didChange = false;\n\n    const localTransform = container.localTransform;\n\n    updateLocalTransform(localTransform, container);\n\n    const parent = container.parent;\n\n    if (parent && !parent.isLayerRoot)\n    {\n        updateFlags = updateFlags | container.updateFlags;\n\n        container.layerTransform.appendFrom(\n            localTransform,\n            parent.layerTransform,\n        );\n\n        if (updateFlags)\n        {\n            updateColorBlendVisibility(container, parent, updateFlags);\n        }\n    }\n    else\n    {\n        updateFlags = container.updateFlags;\n\n        container.layerTransform.copyFrom(localTransform);\n\n        if (updateFlags)\n        {\n            updateColorBlendVisibility(container, tempContainer, updateFlags);\n        }\n    }\n\n    // don't update children if its a layer..\n    if (!container.isLayerRoot)\n    {\n        const children = container.children;\n        const length = children.length;\n\n        for (let i = 0; i < length; i++)\n        {\n            updateTransformAndChildren(children[i], updateTick, updateFlags);\n        }\n\n        const layerGroup = container.layerGroup;\n\n        if (container.view && !layerGroup.structureDidChange)\n        {\n            layerGroup.updateRenderable(container);\n        }\n    }\n}\n\nfunction updateColorBlendVisibility(\n    container: Container,\n    parent: Container,\n    updateFlags: number,\n): void\n{\n    if (updateFlags & UPDATE_COLOR)\n    {\n        container.layerColor = mixColors(container.localColor, parent.layerColor);\n    }\n\n    if (updateFlags & UPDATE_BLEND)\n    {\n        container.layerBlendMode = container.localBlendMode === 'inherit' ? parent.layerBlendMode : container.localBlendMode;\n    }\n\n    if (updateFlags & UPDATE_VISIBLE)\n    {\n        container.layerVisibleRenderable = container.localVisibleRenderable & parent.layerVisibleRenderable;\n    }\n\n    container.updateFlags = 0;\n}\n\n"],"names":[],"mappings":";;;;AAMA,MAAM,aAAA,GAAgB,IAAI,SAAU,EAAA,CAAA;AAEpB,SAAA,0BAAA,CAA2B,UAAwB,EAAA,uBAAA,GAA0B,KAC7F,EAAA;AACI,EAAA,oBAAA,CAAqB,UAAU,CAAA,CAAA;AAE/B,EAAA,MAAM,mBAAmB,UAAW,CAAA,gBAAA,CAAA;AAEpC,EAAA,MAAM,aAAa,UAAW,CAAA,UAAA,CAAA;AAE9B,EAAW,UAAA,CAAA,UAAA,EAAA,CAAA;AAEX,EAAA,KAAA,MAAW,KAAK,gBAChB,EAAA;AACI,IAAM,MAAA,eAAA,GAAkB,iBAAiB,CAAC,CAAA,CAAA;AAE1C,IAAA,MAAM,OAAO,eAAgB,CAAA,IAAA,CAAA;AAC7B,IAAA,MAAM,QAAQ,eAAgB,CAAA,KAAA,CAAA;AAE9B,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,KAAA,EAAO,CAC3B,EAAA,EAAA;AACI,MAAA,0BAAA,CAA2B,IAAK,CAAA,CAAC,CAAG,EAAA,UAAA,EAAY,CAAC,CAAA,CAAA;AAAA,KACrD;AAEA,IAAA,eAAA,CAAgB,KAAQ,GAAA,CAAA,CAAA;AAAA,GAC5B;AAEA,EAAA,IAAI,uBACJ,EAAA;AACI,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,UAAW,CAAA,kBAAA,CAAmB,QAAQ,CAC1D,EAAA,EAAA;AACI,MAAA,0BAAA,CAA2B,UAAW,CAAA,kBAAA,CAAmB,CAAC,CAAA,EAAG,uBAAuB,CAAA,CAAA;AAAA,KACxF;AAAA,GACJ;AACJ,CAAA;AAEO,SAAS,qBAAqB,UACrC,EAAA;AACI,EAAA,IAAI,WAAW,gBACf,EAAA;AACI,IAAA,UAAA,CAAW,cAAe,CAAA,UAAA;AAAA,MACtB,WAAW,IAAK,CAAA,cAAA;AAAA,MAChB,WAAW,gBAAiB,CAAA,cAAA;AAAA,KAChC,CAAA;AAEA,IAAA,UAAA,CAAW,UAAa,GAAA,SAAA;AAAA,MACpB,WAAW,IAAK,CAAA,UAAA;AAAA,MAChB,WAAW,gBAAiB,CAAA,UAAA;AAAA,KAChC,CAAA;AAAA,GAGJ,MAAA;AACI,IAAA,UAAA,CAAW,cAAe,CAAA,QAAA,CAAS,UAAW,CAAA,IAAA,CAAK,cAAc,CAAA,CAAA;AACjE,IAAW,UAAA,CAAA,UAAA,GAAa,WAAW,IAAK,CAAA,UAAA,CAAA;AAAA,GAC5C;AACJ,CAAA;AAEgB,SAAA,0BAAA,CAA2B,SAAsB,EAAA,UAAA,EAAoB,WACrF,EAAA;AACI,EAAA,IAAI,eAAe,SAAU,CAAA,UAAA;AAAY,IAAA,OAAA;AACzC,EAAA,SAAA,CAAU,UAAa,GAAA,UAAA,CAAA;AAEvB,EAAA,SAAA,CAAU,SAAY,GAAA,KAAA,CAAA;AAEtB,EAAA,MAAM,iBAAiB,SAAU,CAAA,cAAA,CAAA;AAEjC,EAAA,oBAAA,CAAqB,gBAAgB,SAAS,CAAA,CAAA;AAE9C,EAAA,MAAM,SAAS,SAAU,CAAA,MAAA,CAAA;AAEzB,EAAI,IAAA,MAAA,IAAU,CAAC,MAAA,CAAO,WACtB,EAAA;AACI,IAAA,WAAA,GAAc,cAAc,SAAU,CAAA,WAAA,CAAA;AAEtC,IAAA,SAAA,CAAU,cAAe,CAAA,UAAA;AAAA,MACrB,cAAA;AAAA,MACA,MAAO,CAAA,cAAA;AAAA,KACX,CAAA;AAEA,IAAA,IAAI,WACJ,EAAA;AACI,MAA2B,0BAAA,CAAA,SAAA,EAAW,QAAQ,WAAW,CAAA,CAAA;AAAA,KAC7D;AAAA,GAGJ,MAAA;AACI,IAAA,WAAA,GAAc,SAAU,CAAA,WAAA,CAAA;AAExB,IAAU,SAAA,CAAA,cAAA,CAAe,SAAS,cAAc,CAAA,CAAA;AAEhD,IAAA,IAAI,WACJ,EAAA;AACI,MAA2B,0BAAA,CAAA,SAAA,EAAW,eAAe,WAAW,CAAA,CAAA;AAAA,KACpE;AAAA,GACJ;AAGA,EAAI,IAAA,CAAC,UAAU,WACf,EAAA;AACI,IAAA,MAAM,WAAW,SAAU,CAAA,QAAA,CAAA;AAC3B,IAAA,MAAM,SAAS,QAAS,CAAA,MAAA,CAAA;AAExB,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,MAAA,EAAQ,CAC5B,EAAA,EAAA;AACI,MAAA,0BAAA,CAA2B,QAAS,CAAA,CAAC,CAAG,EAAA,UAAA,EAAY,WAAW,CAAA,CAAA;AAAA,KACnE;AAEA,IAAA,MAAM,aAAa,SAAU,CAAA,UAAA,CAAA;AAE7B,IAAA,IAAI,SAAU,CAAA,IAAA,IAAQ,CAAC,UAAA,CAAW,kBAClC,EAAA;AACI,MAAA,UAAA,CAAW,iBAAiB,SAAS,CAAA,CAAA;AAAA,KACzC;AAAA,GACJ;AACJ,CAAA;AAEA,SAAS,0BAAA,CACL,SACA,EAAA,MAAA,EACA,WAEJ,EAAA;AACI,EAAA,IAAI,cAAc,YAClB,EAAA;AACI,IAAA,SAAA,CAAU,UAAa,GAAA,SAAA,CAAU,SAAU,CAAA,UAAA,EAAY,OAAO,UAAU,CAAA,CAAA;AAAA,GAC5E;AAEA,EAAA,IAAI,cAAc,YAClB,EAAA;AACI,IAAA,SAAA,CAAU,iBAAiB,SAAU,CAAA,cAAA,KAAmB,SAAY,GAAA,MAAA,CAAO,iBAAiB,SAAU,CAAA,cAAA,CAAA;AAAA,GAC1G;AAEA,EAAA,IAAI,cAAc,cAClB,EAAA;AACI,IAAU,SAAA,CAAA,sBAAA,GAAyB,SAAU,CAAA,sBAAA,GAAyB,MAAO,CAAA,sBAAA,CAAA;AAAA,GACjF;AAEA,EAAA,SAAA,CAAU,WAAc,GAAA,CAAA,CAAA;AAC5B;;;;"}