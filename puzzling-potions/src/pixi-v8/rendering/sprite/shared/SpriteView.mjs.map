{"version":3,"file":"SpriteView.mjs","sources":["../../../../src/rendering/sprite/shared/SpriteView.ts"],"sourcesContent":["import { ObservablePoint } from '../../../maths/ObservablePoint';\nimport { emptyViewObserver } from '../../renderers/shared/View';\n\nimport type { PointData } from '../../../maths/PointData';\nimport type { Texture } from '../../renderers/shared/texture/Texture';\nimport type { View } from '../../renderers/shared/View';\nimport type { Bounds } from '../../scene/bounds/Bounds';\nimport type { TextureDestroyOptions, TypeOrBool } from '../../scene/destroyTypes';\n\nlet uid = 0;\n\nexport class SpriteView implements View\n{\n    owner = emptyViewObserver;\n\n    // sprite specific..\n    _texture: Texture;\n    anchor: ObservablePoint;\n\n    batched = true;\n\n    buildId = 0;\n    uid = uid++;\n\n    type = 'sprite';\n\n    _bounds: [number, number, number, number] = [0, 1, 0, 0];\n    _sourceBounds: [number, number, number, number] = [0, 1, 0, 0];\n\n    boundsDirty = true;\n    sourceBoundsDirty = true;\n    didUpdate: boolean;\n\n    constructor(texture: Texture)\n    {\n        this.anchor = new ObservablePoint(\n            this,\n            texture.layout.defaultAnchor?.x || 0,\n            texture.layout.defaultAnchor?.y || 0,\n        );\n\n        this.texture = texture;\n    }\n\n    set texture(value: Texture)\n    {\n        if (this._texture === value) return;\n\n        value.on('update', this.onUpdate, this);\n\n        this._texture = value;\n\n        value.off('update', this.onUpdate, this);\n\n        this.onUpdate();\n    }\n\n    get texture()\n    {\n        return this._texture;\n    }\n\n    get bounds()\n    {\n        if (this.boundsDirty)\n        {\n            this.updateBounds();\n            this.boundsDirty = false;\n        }\n\n        return this._bounds;\n    }\n\n    get sourceBounds()\n    {\n        if (this.sourceBoundsDirty)\n        {\n            this._updateSourceBounds();\n            this.sourceBoundsDirty = false;\n        }\n\n        return this._sourceBounds;\n    }\n\n    updateBounds()\n    {\n        const texture = this._texture;\n        const textureSource = texture._source;\n\n        const layout = texture.layout;\n\n        const orig = layout.orig;\n        const trim = layout.trim;\n\n        const textureSourceWidth = textureSource.width;\n        const textureSourceHeight = textureSource.height;\n\n        const width = textureSourceWidth * orig.width;\n        const height = textureSourceHeight * orig.height;\n\n        const anchor = this.anchor;\n        const bounds = this._bounds;\n\n        if (trim)\n        {\n            const sourceWidth = textureSourceWidth * trim.width;\n            const sourceHeight = textureSourceHeight * trim.height;\n\n            bounds[1] = (trim.x * textureSourceWidth) - (anchor._x * width);\n            bounds[0] = bounds[1] + sourceWidth;\n\n            bounds[3] = (trim.y * textureSourceHeight) - (anchor._y * height);\n            bounds[2] = bounds[3] + sourceHeight;\n        }\n        else\n        {\n            bounds[1] = -anchor._x * width;\n            bounds[0] = bounds[1] + width;\n\n            bounds[3] = -anchor._y * height;\n            bounds[2] = bounds[3] + height;\n        }\n\n        return;\n    }\n\n    private _updateSourceBounds()\n    {\n        const anchor = this.anchor;\n        const texture = this._texture;\n\n        const textureSource = texture._source;\n        const layout = texture.layout;\n\n        const orig = layout.orig;\n\n        const sourceBounds = this._sourceBounds;\n\n        const width = textureSource.width * orig.width;\n        const height = textureSource.height * orig.height;\n\n        sourceBounds[1] = -anchor._x * width;\n        sourceBounds[0] = sourceBounds[1] + width;\n\n        sourceBounds[3] = -anchor._y * height;\n        sourceBounds[2] = sourceBounds[3] + height;\n    }\n\n    addBounds(bounds: Bounds)\n    {\n        const trim = this._texture._layout.trim;\n\n        if (trim)\n        {\n            const sourceBounds = this.sourceBounds;\n\n            bounds.addFrame(sourceBounds[0], sourceBounds[2], sourceBounds[1], sourceBounds[3]);\n        }\n        else\n        {\n            const _bounds = this.bounds;\n\n            bounds.addFrame(_bounds[0], _bounds[2], _bounds[1], _bounds[3]);\n        }\n    }\n\n    onUpdate()\n    {\n        this.didUpdate = true;\n\n        this.sourceBoundsDirty = this.boundsDirty = true;\n\n        this.owner.onViewUpdate();\n    }\n\n    // passed local space..\n    public containsPoint(point: PointData)\n    {\n        const width = this._texture.frameWidth;\n        const height = this._texture.frameHeight;\n        const x1 = -width * this.anchor.x;\n        let y1 = 0;\n\n        if (point.x >= x1 && point.x < x1 + width)\n        {\n            y1 = -height * this.anchor.y;\n\n            if (point.y >= y1 && point.y < y1 + height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Destroys this sprite renderable and optionally its texture.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the renderable as well\n     * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the renderable as well\n     */\n    public destroy(options: TypeOrBool<TextureDestroyOptions> = false)\n    {\n        this.anchor = null;\n\n        const destroyTexture = typeof options === 'boolean' ? options : options?.texture;\n\n        if (destroyTexture)\n        {\n            const destroyTextureSource = typeof options === 'boolean' ? options : options?.textureSource;\n\n            this._texture.destroy(destroyTextureSource);\n        }\n\n        this._texture = null;\n        this._bounds = null;\n        this._sourceBounds = null;\n    }\n}\n"],"names":[],"mappings":";;;AASA,IAAI,GAAM,GAAA,CAAA,CAAA;AAEH,MAAM,UACb,CAAA;AAAA,EAqBI,YAAY,OACZ,EAAA;AArBA,IAAQ,IAAA,CAAA,KAAA,GAAA,iBAAA,CAAA;AAMR,IAAU,IAAA,CAAA,OAAA,GAAA,IAAA,CAAA;AAEV,IAAU,IAAA,CAAA,OAAA,GAAA,CAAA,CAAA;AACV,IAAM,IAAA,CAAA,GAAA,GAAA,GAAA,EAAA,CAAA;AAEN,IAAO,IAAA,CAAA,IAAA,GAAA,QAAA,CAAA;AAEP,IAAA,IAAA,CAAA,OAAA,GAA4C,CAAC,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAC,CAAA,CAAA;AACvD,IAAA,IAAA,CAAA,aAAA,GAAkD,CAAC,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAC,CAAA,CAAA;AAE7D,IAAc,IAAA,CAAA,WAAA,GAAA,IAAA,CAAA;AACd,IAAoB,IAAA,CAAA,iBAAA,GAAA,IAAA,CAAA;AAKhB,IAAA,IAAA,CAAK,SAAS,IAAI,eAAA;AAAA,MACd,IAAA;AAAA,MACA,OAAA,CAAQ,MAAO,CAAA,aAAA,EAAe,CAAK,IAAA,CAAA;AAAA,MACnC,OAAA,CAAQ,MAAO,CAAA,aAAA,EAAe,CAAK,IAAA,CAAA;AAAA,KACvC,CAAA;AAEA,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA,CAAA;AAAA,GACnB;AAAA,EAEA,IAAI,QAAQ,KACZ,EAAA;AACI,IAAA,IAAI,KAAK,QAAa,KAAA,KAAA;AAAO,MAAA,OAAA;AAE7B,IAAA,KAAA,CAAM,EAAG,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,IAAI,CAAA,CAAA;AAEtC,IAAA,IAAA,CAAK,QAAW,GAAA,KAAA,CAAA;AAEhB,IAAA,KAAA,CAAM,GAAI,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,IAAI,CAAA,CAAA;AAEvC,IAAA,IAAA,CAAK,QAAS,EAAA,CAAA;AAAA,GAClB;AAAA,EAEA,IAAI,OACJ,GAAA;AACI,IAAA,OAAO,IAAK,CAAA,QAAA,CAAA;AAAA,GAChB;AAAA,EAEA,IAAI,MACJ,GAAA;AACI,IAAA,IAAI,KAAK,WACT,EAAA;AACI,MAAA,IAAA,CAAK,YAAa,EAAA,CAAA;AAClB,MAAA,IAAA,CAAK,WAAc,GAAA,KAAA,CAAA;AAAA,KACvB;AAEA,IAAA,OAAO,IAAK,CAAA,OAAA,CAAA;AAAA,GAChB;AAAA,EAEA,IAAI,YACJ,GAAA;AACI,IAAA,IAAI,KAAK,iBACT,EAAA;AACI,MAAA,IAAA,CAAK,mBAAoB,EAAA,CAAA;AACzB,MAAA,IAAA,CAAK,iBAAoB,GAAA,KAAA,CAAA;AAAA,KAC7B;AAEA,IAAA,OAAO,IAAK,CAAA,aAAA,CAAA;AAAA,GAChB;AAAA,EAEA,YACA,GAAA;AACI,IAAA,MAAM,UAAU,IAAK,CAAA,QAAA,CAAA;AACrB,IAAA,MAAM,gBAAgB,OAAQ,CAAA,OAAA,CAAA;AAE9B,IAAA,MAAM,SAAS,OAAQ,CAAA,MAAA,CAAA;AAEvB,IAAA,MAAM,OAAO,MAAO,CAAA,IAAA,CAAA;AACpB,IAAA,MAAM,OAAO,MAAO,CAAA,IAAA,CAAA;AAEpB,IAAA,MAAM,qBAAqB,aAAc,CAAA,KAAA,CAAA;AACzC,IAAA,MAAM,sBAAsB,aAAc,CAAA,MAAA,CAAA;AAE1C,IAAM,MAAA,KAAA,GAAQ,qBAAqB,IAAK,CAAA,KAAA,CAAA;AACxC,IAAM,MAAA,MAAA,GAAS,sBAAsB,IAAK,CAAA,MAAA,CAAA;AAE1C,IAAA,MAAM,SAAS,IAAK,CAAA,MAAA,CAAA;AACpB,IAAA,MAAM,SAAS,IAAK,CAAA,OAAA,CAAA;AAEpB,IAAA,IAAI,IACJ,EAAA;AACI,MAAM,MAAA,WAAA,GAAc,qBAAqB,IAAK,CAAA,KAAA,CAAA;AAC9C,MAAM,MAAA,YAAA,GAAe,sBAAsB,IAAK,CAAA,MAAA,CAAA;AAEhD,MAAA,MAAA,CAAO,CAAC,CAAK,GAAA,IAAA,CAAK,CAAI,GAAA,kBAAA,GAAuB,OAAO,EAAK,GAAA,KAAA,CAAA;AACzD,MAAA,MAAA,CAAO,CAAC,CAAA,GAAI,MAAO,CAAA,CAAC,CAAI,GAAA,WAAA,CAAA;AAExB,MAAA,MAAA,CAAO,CAAC,CAAK,GAAA,IAAA,CAAK,CAAI,GAAA,mBAAA,GAAwB,OAAO,EAAK,GAAA,MAAA,CAAA;AAC1D,MAAA,MAAA,CAAO,CAAC,CAAA,GAAI,MAAO,CAAA,CAAC,CAAI,GAAA,YAAA,CAAA;AAAA,KAG5B,MAAA;AACI,MAAA,MAAA,CAAO,CAAC,CAAA,GAAI,CAAC,MAAA,CAAO,EAAK,GAAA,KAAA,CAAA;AACzB,MAAA,MAAA,CAAO,CAAC,CAAA,GAAI,MAAO,CAAA,CAAC,CAAI,GAAA,KAAA,CAAA;AAExB,MAAA,MAAA,CAAO,CAAC,CAAA,GAAI,CAAC,MAAA,CAAO,EAAK,GAAA,MAAA,CAAA;AACzB,MAAA,MAAA,CAAO,CAAC,CAAA,GAAI,MAAO,CAAA,CAAC,CAAI,GAAA,MAAA,CAAA;AAAA,KAC5B;AAEA,IAAA,OAAA;AAAA,GACJ;AAAA,EAEQ,mBACR,GAAA;AACI,IAAA,MAAM,SAAS,IAAK,CAAA,MAAA,CAAA;AACpB,IAAA,MAAM,UAAU,IAAK,CAAA,QAAA,CAAA;AAErB,IAAA,MAAM,gBAAgB,OAAQ,CAAA,OAAA,CAAA;AAC9B,IAAA,MAAM,SAAS,OAAQ,CAAA,MAAA,CAAA;AAEvB,IAAA,MAAM,OAAO,MAAO,CAAA,IAAA,CAAA;AAEpB,IAAA,MAAM,eAAe,IAAK,CAAA,aAAA,CAAA;AAE1B,IAAM,MAAA,KAAA,GAAQ,aAAc,CAAA,KAAA,GAAQ,IAAK,CAAA,KAAA,CAAA;AACzC,IAAM,MAAA,MAAA,GAAS,aAAc,CAAA,MAAA,GAAS,IAAK,CAAA,MAAA,CAAA;AAE3C,IAAA,YAAA,CAAa,CAAC,CAAA,GAAI,CAAC,MAAA,CAAO,EAAK,GAAA,KAAA,CAAA;AAC/B,IAAA,YAAA,CAAa,CAAC,CAAA,GAAI,YAAa,CAAA,CAAC,CAAI,GAAA,KAAA,CAAA;AAEpC,IAAA,YAAA,CAAa,CAAC,CAAA,GAAI,CAAC,MAAA,CAAO,EAAK,GAAA,MAAA,CAAA;AAC/B,IAAA,YAAA,CAAa,CAAC,CAAA,GAAI,YAAa,CAAA,CAAC,CAAI,GAAA,MAAA,CAAA;AAAA,GACxC;AAAA,EAEA,UAAU,MACV,EAAA;AACI,IAAM,MAAA,IAAA,GAAO,IAAK,CAAA,QAAA,CAAS,OAAQ,CAAA,IAAA,CAAA;AAEnC,IAAA,IAAI,IACJ,EAAA;AACI,MAAA,MAAM,eAAe,IAAK,CAAA,YAAA,CAAA;AAE1B,MAAA,MAAA,CAAO,QAAS,CAAA,YAAA,CAAa,CAAC,CAAA,EAAG,YAAa,CAAA,CAAC,CAAG,EAAA,YAAA,CAAa,CAAC,CAAA,EAAG,YAAa,CAAA,CAAC,CAAC,CAAA,CAAA;AAAA,KAGtF,MAAA;AACI,MAAA,MAAM,UAAU,IAAK,CAAA,MAAA,CAAA;AAErB,MAAA,MAAA,CAAO,QAAS,CAAA,OAAA,CAAQ,CAAC,CAAA,EAAG,OAAQ,CAAA,CAAC,CAAG,EAAA,OAAA,CAAQ,CAAC,CAAA,EAAG,OAAQ,CAAA,CAAC,CAAC,CAAA,CAAA;AAAA,KAClE;AAAA,GACJ;AAAA,EAEA,QACA,GAAA;AACI,IAAA,IAAA,CAAK,SAAY,GAAA,IAAA,CAAA;AAEjB,IAAK,IAAA,CAAA,iBAAA,GAAoB,KAAK,WAAc,GAAA,IAAA,CAAA;AAE5C,IAAA,IAAA,CAAK,MAAM,YAAa,EAAA,CAAA;AAAA,GAC5B;AAAA;AAAA,EAGO,cAAc,KACrB,EAAA;AACI,IAAM,MAAA,KAAA,GAAQ,KAAK,QAAS,CAAA,UAAA,CAAA;AAC5B,IAAM,MAAA,MAAA,GAAS,KAAK,QAAS,CAAA,WAAA,CAAA;AAC7B,IAAA,MAAM,EAAK,GAAA,CAAC,KAAQ,GAAA,IAAA,CAAK,MAAO,CAAA,CAAA,CAAA;AAChC,IAAA,IAAI,EAAK,GAAA,CAAA,CAAA;AAET,IAAA,IAAI,MAAM,CAAK,IAAA,EAAA,IAAM,KAAM,CAAA,CAAA,GAAI,KAAK,KACpC,EAAA;AACI,MAAK,EAAA,GAAA,CAAC,MAAS,GAAA,IAAA,CAAK,MAAO,CAAA,CAAA,CAAA;AAE3B,MAAA,IAAI,MAAM,CAAK,IAAA,EAAA,IAAM,KAAM,CAAA,CAAA,GAAI,KAAK,MACpC,EAAA;AACI,QAAO,OAAA,IAAA,CAAA;AAAA,OACX;AAAA,KACJ;AAEA,IAAO,OAAA,KAAA,CAAA;AAAA,GACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASO,OAAA,CAAQ,UAA6C,KAC5D,EAAA;AACI,IAAA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;AAEd,IAAA,MAAM,cAAiB,GAAA,OAAO,OAAY,KAAA,SAAA,GAAY,UAAU,OAAS,EAAA,OAAA,CAAA;AAEzE,IAAA,IAAI,cACJ,EAAA;AACI,MAAA,MAAM,oBAAuB,GAAA,OAAO,OAAY,KAAA,SAAA,GAAY,UAAU,OAAS,EAAA,aAAA,CAAA;AAE/E,MAAK,IAAA,CAAA,QAAA,CAAS,QAAQ,oBAAoB,CAAA,CAAA;AAAA,KAC9C;AAEA,IAAA,IAAA,CAAK,QAAW,GAAA,IAAA,CAAA;AAChB,IAAA,IAAA,CAAK,OAAU,GAAA,IAAA,CAAA;AACf,IAAA,IAAA,CAAK,aAAgB,GAAA,IAAA,CAAA;AAAA,GACzB;AACJ;;;;"}