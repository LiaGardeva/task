{"version":3,"file":"TextStyle.mjs","sources":["../../../src/rendering/text/TextStyle.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { GraphicsContext } from '../graphics/shared/GraphicsContext';\nimport { convertFillInputToFillStyle } from '../graphics/shared/utils/convertFillInputToFillStyle';\n\nimport type { FillGradient } from '../graphics/shared/fill/FillGradient';\nimport type { DefaultFillStyle, FillStyle, FillStyleInputs, StrokeStyle } from '../graphics/shared/GraphicsContext';\nimport type { TextureDestroyOptions, TypeOrBool } from '../scene/destroyTypes';\n\nexport type TextStyleAlign = 'left' | 'center' | 'right' | 'justify';\nexport type TextStyleFill = string | string[] | number | number[] | CanvasGradient | CanvasPattern;\nexport type TextStyleFontStyle = 'normal' | 'italic' | 'oblique';\nexport type TextStyleFontVariant = 'normal' | 'small-caps';\n// eslint-disable-next-line max-len\nexport type TextStyleFontWeight = 'normal' | 'bold' | 'bolder' | 'lighter' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900';\nexport type TextStyleLineJoin = 'miter' | 'round' | 'bevel';\nexport type TextStyleTextBaseline = 'alphabetic' | 'top' | 'hanging' | 'middle' | 'ideographic' | 'bottom';\nexport type TextStyleWhiteSpace = 'normal' | 'pre' | 'pre-line';\n\nexport type TextDropShadow = {\n    /** Set alpha for the drop shadow  */\n    alpha: number;\n    /** Set a angle of the drop shadow */\n    angle: number;\n    /** Set a shadow blur radius */\n    blur: number;\n    /** A fill style to be used on the  e.g., 'red', '#00FF00' */\n    color: string | number;\n    /** Set a distance of the drop shadow */\n    distance: number;\n};\n\n/**\n * Generic interface for TextStyle options.\n * @memberof PIXI\n */\nexport interface TextStyleOptions\n{\n    /**\n     * Alignment for multiline text, does not affect single line text\n     * @type {'left'|'center'|'right'|'justify'}\n     */\n    align?: TextStyleAlign;\n    /** Indicates if lines can be wrapped within words, it needs wordWrap to be set to true */\n    breakWords?: boolean;\n    /** Set a drop shadow for the text */\n    dropShadow?: boolean | TextDropShadow;\n    /**\n     * A canvas fillstyle that will be used on the text e.g., 'red', '#00FF00'.\n     * Can be an array to create a gradient, e.g., `['#000000','#FFFFFF']`\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     * @type {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n     */\n    fill?: FillStyleInputs;\n    /** The font family, can be a single font name, or a list of names where the first is the preferred font. */\n    fontFamily?: string | string[];\n    /** The font size (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em') */\n    fontSize?: number | string;\n    /**\n     * The font style.\n     * @type {'normal'|'italic'|'oblique'}\n     */\n    fontStyle?: TextStyleFontStyle;\n    /**\n     * The font variant.\n     * @type {'normal'|'small-caps'}\n     */\n    fontVariant?: TextStyleFontVariant;\n    /**\n     * The font weight.\n     * @type {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n     */\n    fontWeight?: TextStyleFontWeight;\n    /** The height of the line, a number that represents the vertical space that a letter uses. */\n    leading?: number;\n    /** The amount of spacing between letters, default is 0 */\n    letterSpacing?: number;\n    /** The line height, a number that represents the vertical space that a letter uses */\n    lineHeight?: number;\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from\n     * happening by adding padding to all sides of the text.\n     */\n    padding?: number;\n    /** A canvas fillstyle that will be used on the text stroke, e.g., 'blue', '#FCFF00' */\n    stroke?: StrokeStyle | FillStyleInputs;\n    /**\n     * The baseline of the text that is rendered.\n     * @type {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n     */\n    textBaseline?: TextStyleTextBaseline;\n    /** See {@link PIXI.TextStyle.trim} */\n    trim?: false,\n    /**\n     * Determines whether newlines & spaces are collapsed or preserved \"normal\"\n     * (collapse, collapse), \"pre\" (preserve, preserve) | \"pre-line\" (preserve,\n     * collapse). It needs wordWrap to be set to true.\n     * @type {'normal'|'pre'|'pre-line'}\n     */\n    whiteSpace?: TextStyleWhiteSpace;\n    /** Indicates if word wrap should be used */\n    wordWrap?: boolean;\n    /** The width at which text will wrap, it needs wordWrap to be set to true */\n    wordWrapWidth?: number;\n}\n\nconst valuesToIterateForKeys = [\n    '_fontFamily',\n    '_fontStyle',\n    '_fontVariant',\n    '_fontWeight',\n    '_breakWords',\n    '_align',\n    '_leading',\n    '_letterSpacing',\n    '_lineHeight',\n    '_textBaseline',\n    '_whiteSpace',\n    '_wordWrap',\n    '_wordWrapWidth',\n    '_padding',\n];\n\nexport class TextStyle extends EventEmitter<{\n    update: TextDropShadow\n}>\n{\n    static defaultTextStyle: TextStyleOptions = {\n        /**\n         * See {@link PIXI.TextStyle.align}\n         * @type {'left'|'center'|'right'|'justify'}\n         */\n        align: 'left',\n        /** See {@link PIXI.TextStyle.breakWords} */\n        breakWords: false,\n        /** See {@link PIXI.TextStyle.dropShadow} */\n        dropShadow:  {\n            alpha: 1,\n            angle: Math.PI / 6,\n            blur: 0,\n            color: 'black',\n            distance: 5,\n        },\n        /**\n         * See {@link PIXI.TextStyle.fill}\n         * @type {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n         */\n        fill: 'black',\n        /**\n         * See {@link PIXI.TextStyle.fontFamily}\n         * @type {string|string[]}\n         */\n        fontFamily: 'Arial',\n        /**\n         * See {@link PIXI.TextStyle.fontSize}\n         * @type {number|string}\n         */\n        fontSize: 26,\n        /**\n         * See {@link PIXI.TextStyle.fontStyle}\n         * @type {'normal'|'italic'|'oblique'}\n         */\n        fontStyle: 'normal',\n        /**\n         * See {@link PIXI.TextStyle.fontVariant}\n         * @type {'normal'|'small-caps'}\n         */\n        fontVariant: 'normal',\n        /**\n         * See {@link PIXI.TextStyle.fontWeight}\n         * @type {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n         */\n        fontWeight: 'normal',\n        /** See {@link PIXI.TextStyle.leading} */\n        leading: 0,\n        /** See {@link PIXI.TextStyle.letterSpacing} */\n        letterSpacing: 0,\n        /** See {@link PIXI.TextStyle.lineHeight} */\n        lineHeight: 0,\n        /** See {@link PIXI.TextStyle.padding} */\n        padding: 0,\n        /**\n         * See {@link PIXI.TextStyle.stroke}\n         * @type {string|number}\n         */\n        stroke: null,\n        /**\n         * See {@link PIXI.TextStyle.textBaseline}\n         * @type {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n         */\n        textBaseline: 'alphabetic',\n        /** See {@link PIXI.TextStyle.trim} */\n        trim: false,\n        /**\n         * See {@link PIXI.TextStyle.whiteSpace}\n         * @type {'normal'|'pre'|'pre-line'}\n         */\n        whiteSpace: 'pre',\n        /** See {@link PIXI.TextStyle.wordWrap} */\n        wordWrap: false,\n        /** See {@link PIXI.TextStyle.wordWrapWidth} */\n        wordWrapWidth: 100,\n    };\n\n    // colors!!\n    _fill: FillStyle;\n    _originalFill: FillStyleInputs;\n\n    _stroke: StrokeStyle;\n    _originalStroke: FillStyleInputs | StrokeStyle;\n\n    private _dropShadow: TextDropShadow;\n\n    private _fontFamily: string | string[];\n    private _fontSize: number;\n    private _fontStyle: TextStyleFontStyle;\n    private _fontVariant: TextStyleFontVariant;\n    private _fontWeight: TextStyleFontWeight;\n\n    private _breakWords: boolean;\n    private _align: TextStyleAlign;\n    private _leading: number;\n    private _letterSpacing: number;\n    private _lineHeight: number;\n\n    private _textBaseline: TextStyleTextBaseline;\n    private _whiteSpace: TextStyleWhiteSpace;\n    private _wordWrap: boolean;\n    private _wordWrapWidth: number;\n\n    private _padding: number;\n\n    private _styleKey: string;\n\n    constructor(style: Partial<TextStyleOptions> = {})\n    {\n        super();\n\n        // TODO getter setters...\n\n        const fullStyle = { ...TextStyle.defaultTextStyle, ...style };\n\n        for (const key in TextStyle.defaultTextStyle)\n        {\n            const thisKey = key as keyof typeof this;\n\n            this[thisKey] = fullStyle[key as keyof TextStyleOptions] as any;\n        }\n\n        this.dropShadow = null;\n\n        if (typeof fullStyle.fill === 'string')\n        {\n            // eg '34px' to number\n            this.fontSize = parseInt(fullStyle.fontSize as string, 10);\n        }\n        else\n        {\n            this.fontSize = fullStyle.fontSize as number;\n        }\n\n        if (style.dropShadow)\n        {\n            // is true / false\n            if (style.dropShadow instanceof Boolean)\n            {\n                if (style.dropShadow === true)\n                {\n                    this.dropShadow = {\n                        ...TextStyle.defaultTextStyle.dropShadow as TextDropShadow\n                    };\n                }\n            }\n            else\n            {\n                this.dropShadow = {\n                    ...TextStyle.defaultTextStyle.dropShadow as TextDropShadow,\n                    ...style.dropShadow as TextDropShadow\n                };\n            }\n        }\n\n        this.update();\n    }\n\n    get align(): TextStyleAlign { return this._align; }\n    set align(value: TextStyleAlign) { this._align = value; this.update(); }\n    get breakWords(): boolean { return this._breakWords; }\n    set breakWords(value: boolean) { this._breakWords = value; this.update(); }\n    get dropShadow(): TextDropShadow { return this._dropShadow; }\n    set dropShadow(value: TextDropShadow) { this._dropShadow = value; this.update(); }\n    get fontFamily(): string | string[] { return this._fontFamily; }\n    set fontFamily(value: string | string[]) { this._fontFamily = value; this.update(); }\n    get fontSize(): number { return this._fontSize; }\n    set fontSize(value: number) { this._fontSize = value; this.update(); }\n    get fontStyle(): TextStyleFontStyle { return this._fontStyle; }\n    set fontStyle(value: TextStyleFontStyle) { this._fontStyle = value; this.update(); }\n    get fontVariant(): TextStyleFontVariant { return this._fontVariant; }\n    set fontVariant(value: TextStyleFontVariant) { this._fontVariant = value; this.update(); }\n    get fontWeight(): TextStyleFontWeight { return this._fontWeight; }\n    set fontWeight(value: TextStyleFontWeight) { this._fontWeight = value; this.update(); }\n    get leading(): number { return this._leading; }\n    set leading(value: number) { this._leading = value; this.update(); }\n    get letterSpacing(): number { return this._letterSpacing; }\n    set letterSpacing(value: number) { this._letterSpacing = value; this.update(); }\n    get lineHeight(): number { return this._lineHeight; }\n    set lineHeight(value: number) { this._lineHeight = value; this.update(); }\n    get padding(): number { return this._padding; }\n    set padding(value: number) { this._padding = value; this.update(); }\n    get textBaseline(): TextStyleTextBaseline { return this._textBaseline; }\n    set textBaseline(value: TextStyleTextBaseline) { this._textBaseline = value; this.update(); }\n    get whiteSpace(): TextStyleWhiteSpace { return this._whiteSpace; }\n    set whiteSpace(value: TextStyleWhiteSpace) { this._whiteSpace = value; this.update(); }\n    get wordWrap(): boolean { return this._wordWrap; }\n    set wordWrap(value: boolean) { this._wordWrap = value; this.update(); }\n    get wordWrapWidth(): number { return this._wordWrapWidth; }\n    set wordWrapWidth(value: number) { this._wordWrapWidth = value; this.update(); }\n\n    get fill(): FillStyleInputs\n    {\n        return this._originalFill;\n    }\n\n    set fill(value: FillStyleInputs)\n    {\n        if (value === this._originalFill) return;\n\n        this._originalFill = value;\n        this._fill = convertFillInputToFillStyle(value, GraphicsContext.defaultFillStyle);\n        this.update();\n    }\n\n    get stroke(): FillStyleInputs | StrokeStyle\n    {\n        return this._originalStroke;\n    }\n\n    set stroke(value: FillStyleInputs | StrokeStyle)\n    {\n        if (value === this._originalFill) return;\n\n        this._originalFill = value;\n        this._stroke = convertFillInputToFillStyle(value, GraphicsContext.defaultStrokeStyle);\n        this.update();\n    }\n\n    generateKey(): string\n    {\n        const key = [];\n\n        let index = 0;\n\n        for (let i = 0; i < valuesToIterateForKeys.length; i++)\n        {\n            const prop = valuesToIterateForKeys[i];\n\n            key[index++] = this[prop as keyof typeof this];\n        }\n\n        index = addFillStyleKey(this._fill, key as string[], index);\n        index = addStokeStyleKey(this._stroke, key as string[], index);\n\n        this._styleKey = key.join('-');\n\n        return this._styleKey;\n    }\n\n    update()\n    {\n        this._styleKey = null;\n        this.emit('update', this);\n    }\n\n    get styleKey()\n    {\n        return this._styleKey || this.generateKey();\n    }\n\n    clone(): TextStyle\n    {\n        return new TextStyle({\n            align: this.align,\n            breakWords: this.breakWords,\n            dropShadow: this.dropShadow,\n            fill: this._fill,\n            fontFamily: this.fontFamily,\n            fontSize: this.fontSize,\n            fontStyle: this.fontStyle,\n            fontVariant: this.fontVariant,\n            fontWeight: this.fontWeight,\n            leading: this.leading,\n            letterSpacing: this.letterSpacing,\n            lineHeight: this.lineHeight,\n            padding: this.padding,\n            stroke: this._stroke,\n            textBaseline: this.textBaseline,\n            whiteSpace: this.whiteSpace,\n            wordWrap: this.wordWrap,\n            wordWrapWidth: this.wordWrapWidth,\n        });\n    }\n\n    /**\n     * Destroys this text style.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.texture=false] - Should it destroy the texture of the this style\n     * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the this style\n     */\n    public destroy(options: TypeOrBool<TextureDestroyOptions> = false)\n    {\n        this.removeAllListeners();\n\n        const destroyTexture = typeof options === 'boolean' ? options : options?.texture;\n\n        if (destroyTexture)\n        {\n            const destroyTextureSource = typeof options === 'boolean' ? options : options?.textureSource;\n\n            if (this._fill?.texture)\n            {\n                this._fill.texture.destroy(destroyTextureSource);\n            }\n\n            if ((this._originalFill as DefaultFillStyle)?.texture)\n            {\n                (this._originalFill as DefaultFillStyle).texture.destroy(destroyTextureSource);\n            }\n\n            if (this._stroke?.texture)\n            {\n                this._stroke.texture.destroy(destroyTextureSource);\n            }\n\n            if ((this._originalStroke as DefaultFillStyle)?.texture)\n            {\n                (this._originalStroke as DefaultFillStyle).texture.destroy(destroyTextureSource);\n            }\n        }\n\n        this._fill = null;\n        this._stroke = null;\n        this.dropShadow = null;\n        this._originalStroke = null;\n        this._originalFill = null;\n    }\n}\n\nfunction addFillStyleKey(fillStyle: FillStyle, key: (number | string)[], index: number)\n{\n    if (!fillStyle) return index;\n\n    key[index++] = fillStyle.color;\n    key[index++] = fillStyle.alpha;\n    key[index++] = (fillStyle.fill as FillGradient)?.uid;\n\n    return index;\n}\n\nfunction addStokeStyleKey(strokeStyle: StrokeStyle, key: (number | string)[], index: number)\n{\n    if (!strokeStyle) return index;\n\n    index = addFillStyleKey(strokeStyle, key, index);\n\n    key[index++] = strokeStyle.width;\n    key[index++] = strokeStyle.alignment;\n    key[index++] = strokeStyle.cap;\n    key[index++] = strokeStyle.join;\n    key[index++] = strokeStyle.miterLimit;\n\n    return index;\n}\n\n"],"names":[],"mappings":"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"}