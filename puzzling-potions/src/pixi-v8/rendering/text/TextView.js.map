{"version":3,"file":"TextView.js","sources":["../../../src/rendering/text/TextView.ts"],"sourcesContent":["import { Cache } from '../../assets/cache/Cache';\nimport { ObservablePoint } from '../../maths/ObservablePoint';\nimport { emptyViewObserver } from '../renderers/shared/View';\nimport { BitmapFontManager } from './bitmap/BitmapFontManager';\nimport { CanvasTextMetrics } from './canvas/CanvasTextMetrics';\nimport { TextStyle } from './TextStyle';\n\nimport type { PointData } from '../../maths/PointData';\nimport type { View } from '../renderers/shared/View';\nimport type { Bounds } from '../scene/bounds/Bounds';\nimport type { TextureDestroyOptions, TypeOrBool } from '../scene/destroyTypes';\nimport type { TextStyleOptions } from './TextStyle';\n\nlet uid = 0;\n\ntype Filter<T> = { [K in keyof T]: {\n    text?: TextString;\n    renderMode?: K;\n    resolution?: number;\n    style?: T[K]\n} } [keyof T];\n\nexport type TextStyles = {\n    canvas: TextStyleOptions | TextStyle;\n    // html: HTMLTextStyle;\n    bitmap: TextStyleOptions | TextStyle;\n};\n\nexport type TextViewOptions = Filter<TextStyles>;\n\nconst map = {\n    canvas: 'text',\n    html: 'text',\n    bitmap: 'bitmapText',\n};\n\nexport type TextString = string | number | {toString: () => string};\n\nexport class TextView implements View\n{\n    static defaultResolution = 1;\n    static defaultAutoResolution = true;\n\n    uid = uid++;\n\n    batched = true;\n\n    type = 'text';\n\n    owner = emptyViewObserver;\n\n    _bounds: [number, number, number, number] = [0, 1, 0, 0];\n\n    boundsDirty = true;\n\n    anchor: ObservablePoint;\n\n    _autoResolution = TextView.defaultAutoResolution;\n    _resolution = TextView.defaultResolution;\n\n    readonly renderMode: 'canvas' | 'html' | 'bitmap';\n\n    _style: TextStyle;\n    private _text: string;\n    didUpdate = true;\n\n    constructor(options: TextViewOptions)\n    {\n        this.text = options.text ?? '';\n        this._style = options.style instanceof TextStyle ? options.style : new TextStyle(options.style);\n\n        const renderMode = options.renderMode ?? this.detectRenderType(this._style);\n\n        this.type = map[renderMode];\n\n        this.anchor = new ObservablePoint(this, 0, 0);\n\n        this._resolution = options.resolution ?? TextView.defaultResolution;\n    }\n\n    set text(value: TextString)\n    {\n        // check its a string\n        value = value.toString();\n\n        if (this._text === value) return;\n\n        this._text = value as string;\n        this.onUpdate();\n    }\n\n    get text(): string\n    {\n        return this._text;\n    }\n\n    get style(): TextStyle\n    {\n        return this._style;\n    }\n\n    set style(style: TextStyle | Partial<TextStyle>)\n    {\n        style = style || {};\n\n        this._style?.off('update', this.onUpdate, this);\n\n        if (style instanceof TextStyle)\n        {\n            this._style = style;\n        }\n        else\n        {\n            this._style = new TextStyle(style);\n        }\n\n        this._style.on('update', this.onUpdate, this);\n\n        this.onUpdate();\n    }\n\n    set resolution(value: number)\n    {\n        this._resolution = value;\n    }\n\n    get resolution(): number\n    {\n        return this._resolution;\n    }\n\n    get bounds()\n    {\n        if (this.boundsDirty)\n        {\n            this.updateBounds();\n            this.boundsDirty = false;\n        }\n\n        return this._bounds;\n    }\n\n    updateBounds()\n    {\n        const bounds = this._bounds;\n\n        if (this.type === 'bitmapText')\n        {\n            const bitmapMeasurement = BitmapFontManager.measureText(this.text, this._style);\n\n            const scale = bitmapMeasurement.scale;\n\n            const offset = bitmapMeasurement.offsetY * scale;\n\n            bounds[0] = 0;\n            bounds[1] = offset;\n            bounds[2] = bitmapMeasurement.width * scale;\n            bounds[3] = (bitmapMeasurement.height * scale) + offset;\n        }\n        else\n        {\n            const canvasMeasurement = CanvasTextMetrics.measureText(this.text, this._style);\n\n            bounds[0] = 0;\n            bounds[1] = 0;\n            bounds[2] = canvasMeasurement.width;\n            bounds[3] = canvasMeasurement.height;\n        }\n    }\n\n    addBounds(bounds: Bounds)\n    {\n        const _bounds = this.bounds;\n\n        bounds.addFrame(\n            _bounds[0],\n            _bounds[1],\n            _bounds[2],\n            _bounds[3],\n        );\n    }\n\n    /**\n     * @internal\n     */\n    onUpdate()\n    {\n        this.didUpdate = true;\n        this.boundsDirty = true;\n        this.owner.onViewUpdate();\n    }\n\n    _getKey(): string\n    {\n        // TODO add a dirty flag...\n        return `${this.text}:${this._style.styleKey}`;\n    }\n\n    public containsPoint(point: PointData)\n    {\n        const width = this.bounds[2];\n        const height = this.bounds[3];\n        const x1 = -width * this.anchor.x;\n        let y1 = 0;\n\n        if (point.x >= x1 && point.x < x1 + width)\n        {\n            y1 = -height * this.anchor.y;\n\n            if (point.y >= y1 && point.y < y1 + height) return true;\n        }\n\n        return false;\n    }\n\n    detectRenderType(style: TextStyle): 'canvas' | 'html' | 'bitmap'\n    {\n        return Cache.has(style.fontFamily as string) ? 'bitmap' : 'canvas';\n    }\n\n    /**\n     * Destroys this text renderable and optionally its style texture.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.texture=false] - Should it destroy the texture of the text style\n     * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the text style\n     */\n    public destroy(options: TypeOrBool<TextureDestroyOptions> = false): void\n    {\n        this.owner = null;\n        this._bounds = null;\n        this.anchor = null;\n\n        this._style.destroy(options);\n        this._style = null;\n        this._text = null;\n    }\n}\n"],"names":["emptyViewObserver","TextStyle","ObservablePoint","BitmapFontManager","CanvasTextMetrics","Cache"],"mappings":"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"}