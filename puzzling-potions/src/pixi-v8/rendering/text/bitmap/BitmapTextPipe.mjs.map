{"version":3,"file":"BitmapTextPipe.mjs","sources":["../../../../src/rendering/text/bitmap/BitmapTextPipe.ts"],"sourcesContent":["import { Cache } from '../../../assets/cache/Cache';\nimport { ExtensionType } from '../../../extensions/Extensions';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { GraphicsView } from '../../graphics/shared/GraphicsView';\nimport { ProxyRenderable } from '../../renderers/shared/ProxyRenderable';\nimport { SdfShader } from '../sdfShader/SdfShader';\nimport { BitmapFontManager } from './BitmapFontManager';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout';\n\nimport type { GraphicsContext } from '../../graphics/shared/GraphicsContext';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../renderers/shared/Renderable';\nimport type { Renderer } from '../../renderers/types';\nimport type { TextView } from '../TextView';\n\nclass GraphicsProxyRenderable extends ProxyRenderable<GraphicsView>\n{\n    constructor()\n    {\n        super({\n            view: new GraphicsView(),\n        });\n    }\n}\n\nexport class BitmapTextPipe implements RenderPipe<TextView>\n{\n    /** @ignore */\n    static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'bitmapText',\n    } as const;\n\n    private renderer: Renderer;\n\n    private gpuBitmapText: Record<number, GraphicsProxyRenderable> = {};\n\n    private sdfShader: SdfShader;\n\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    validateRenderable(renderable: Renderable<TextView>): boolean\n    {\n        const graphicsRenderable = this.getGpuBitmapText(renderable);\n\n        // todo only if text change..\n        this.updateContext(renderable, graphicsRenderable.view.context);\n\n        const rebuild = this.renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n\n        // TODO - need to shift all the verts in the graphicsData to the new anchor\n\n        return rebuild;\n        // update the anchor...\n    }\n\n    addRenderable(renderable: Renderable<TextView>, instructionSet: InstructionSet)\n    {\n        const graphicsRenderable = this.getGpuBitmapText(renderable);\n\n        // TODO break the batch if we are not batching..\n        this.renderer.renderPipes.batch.break(instructionSet);\n\n        this.renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n\n        if (graphicsRenderable.view.context.customShader)\n        {\n            this.updateDistanceField(renderable);\n        }\n    }\n\n    destroyRenderable(renderable: Renderable<TextView>)\n    {\n        this.destroyRenderableByUid(renderable.uid);\n    }\n\n    private destroyRenderableByUid(renderableUid: number)\n    {\n        BigPool.return(this.gpuBitmapText[renderableUid]);\n        this.gpuBitmapText[renderableUid] = null;\n    }\n\n    updateRenderable(renderable: Renderable<TextView>)\n    {\n        const graphicsRenderable = this.getGpuBitmapText(renderable);\n\n        this.renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n\n        if (graphicsRenderable.view.context.customShader)\n        {\n            this.updateDistanceField(renderable);\n        }\n    }\n\n    updateContext(renderable: Renderable<TextView>, context: GraphicsContext)\n    {\n        const view = renderable.view;\n\n        const bitmapFont = BitmapFontManager.getFont(view.text, view._style);\n\n        context.clear();\n\n        if (bitmapFont.distanceField.fieldType !== 'none')\n        {\n            if (!context.customShader)\n            {\n                if (!this.sdfShader)\n                {\n                    this.sdfShader = new SdfShader();\n                }\n\n                context.customShader = this.sdfShader;\n            }\n        }\n\n        const chars = Array.from(view.text);\n        const style = view._style;\n\n        let currentY = (style._stroke?.width || 0) / 2;\n\n        currentY += bitmapFont.baseLineOffset;\n\n        // measure our text...\n        const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont);\n\n        let index = 0;\n\n        const scale = style.fontSize / bitmapFont.baseMeasurementFontSize;\n\n        context.scale(scale, scale);\n\n        const offsetX = -view.anchor.x * bitmapTextLayout.width;\n        const offsetY = -view.anchor.y * bitmapTextLayout.height;\n\n        context.translate(offsetX, offsetY);\n\n        const tint = style._fill.color;\n\n        for (let i = 0; i < bitmapTextLayout.lines.length; i++)\n        {\n            const line = bitmapTextLayout.lines[i];\n\n            for (let j = 0; j < line.charPositions.length; j++)\n            {\n                const char = chars[index++];\n\n                const charData = bitmapFont.chars[char];\n\n                if (charData?.texture)\n                {\n                    context.texture(\n                        charData.texture,\n                        tint,\n                        Math.round(line.charPositions[j] + charData.xOffset),\n                        Math.round(currentY + charData.yOffset),\n                    );\n                }\n            }\n\n            currentY += bitmapFont.lineHeight;\n        }\n    }\n\n    getGpuBitmapText(renderable: Renderable<TextView>)\n    {\n        return this.gpuBitmapText[renderable.uid] || this.initGpuText(renderable);\n    }\n\n    initGpuText(renderable: Renderable<TextView>)\n    {\n        renderable.view._style.update();\n\n        // TODO we could keep a bunch of contexts around and reuse one that hav the same style!\n        const proxyRenderable = BigPool.get(GraphicsProxyRenderable, renderable);\n\n        this.gpuBitmapText[renderable.uid] = proxyRenderable;\n\n        this.updateContext(renderable, proxyRenderable.view.context);\n\n        renderable.on('destroyed', () =>\n        {\n            this.destroyRenderable(renderable);\n        });\n\n        return this.gpuBitmapText[renderable.uid];\n    }\n\n    updateDistanceField(renderable: Renderable<TextView>)\n    {\n        const context = this.getGpuBitmapText(renderable).view.context;\n\n        const view = renderable.view;\n\n        const fontFamily = view._style.fontFamily as string;\n        const dynamicFont = Cache.get(fontFamily as string);\n\n        // Inject the shader code with the correct value\n        const { a, b, c, d } = renderable.layerTransform;\n\n        const dx = Math.sqrt((a * a) + (b * b));\n        const dy = Math.sqrt((c * c) + (d * d));\n        const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n\n        const fontScale = dynamicFont.baseRenderedFontSize / view._style.fontSize;\n\n        // TODO take the correct resolution..\n        const resolution = 1;// this.renderer.view.resolution;\n        const distance = worldScale * dynamicFont.distanceField.distanceRange * (1 / fontScale) * resolution;\n\n        context.customShader.resources.localUniforms.uniforms.distance = distance;\n    }\n\n    destroy()\n    {\n        for (const uid in this.gpuBitmapText)\n        {\n            this.destroyRenderableByUid(uid as unknown as number);\n        }\n\n        this.gpuBitmapText = null;\n\n        this.sdfShader?.destroy(true);\n        this.sdfShader = null;\n\n        this.renderer = null;\n    }\n}\n\n"],"names":[],"mappings":";;;;;;;;;AAgBA,MAAM,gCAAgC,eACtC,CAAA;AAAA,EACI,WACA,GAAA;AACI,IAAM,KAAA,CAAA;AAAA,MACF,IAAA,EAAM,IAAI,YAAa,EAAA;AAAA,KAC1B,CAAA,CAAA;AAAA,GACL;AACJ,CAAA;AAEO,MAAM,cACb,CAAA;AAAA,EAiBI,YAAY,QACZ,EAAA;AALA,IAAA,IAAA,CAAQ,gBAAyD,EAAC,CAAA;AAM9D,IAAA,IAAA,CAAK,QAAW,GAAA,QAAA,CAAA;AAAA,GACpB;AAAA,EAEA,mBAAmB,UACnB,EAAA;AACI,IAAM,MAAA,kBAAA,GAAqB,IAAK,CAAA,gBAAA,CAAiB,UAAU,CAAA,CAAA;AAG3D,IAAA,IAAA,CAAK,aAAc,CAAA,UAAA,EAAY,kBAAmB,CAAA,IAAA,CAAK,OAAO,CAAA,CAAA;AAE9D,IAAA,MAAM,UAAU,IAAK,CAAA,QAAA,CAAS,WAAY,CAAA,QAAA,CAAS,mBAAmB,kBAAkB,CAAA,CAAA;AAIxF,IAAO,OAAA,OAAA,CAAA;AAAA,GAEX;AAAA,EAEA,aAAA,CAAc,YAAkC,cAChD,EAAA;AACI,IAAM,MAAA,kBAAA,GAAqB,IAAK,CAAA,gBAAA,CAAiB,UAAU,CAAA,CAAA;AAG3D,IAAA,IAAA,CAAK,QAAS,CAAA,WAAA,CAAY,KAAM,CAAA,KAAA,CAAM,cAAc,CAAA,CAAA;AAEpD,IAAA,IAAA,CAAK,QAAS,CAAA,WAAA,CAAY,QAAS,CAAA,aAAA,CAAc,oBAAoB,cAAc,CAAA,CAAA;AAEnF,IAAI,IAAA,kBAAA,CAAmB,IAAK,CAAA,OAAA,CAAQ,YACpC,EAAA;AACI,MAAA,IAAA,CAAK,oBAAoB,UAAU,CAAA,CAAA;AAAA,KACvC;AAAA,GACJ;AAAA,EAEA,kBAAkB,UAClB,EAAA;AACI,IAAK,IAAA,CAAA,sBAAA,CAAuB,WAAW,GAAG,CAAA,CAAA;AAAA,GAC9C;AAAA,EAEQ,uBAAuB,aAC/B,EAAA;AACI,IAAA,OAAA,CAAQ,MAAO,CAAA,IAAA,CAAK,aAAc,CAAA,aAAa,CAAC,CAAA,CAAA;AAChD,IAAK,IAAA,CAAA,aAAA,CAAc,aAAa,CAAI,GAAA,IAAA,CAAA;AAAA,GACxC;AAAA,EAEA,iBAAiB,UACjB,EAAA;AACI,IAAM,MAAA,kBAAA,GAAqB,IAAK,CAAA,gBAAA,CAAiB,UAAU,CAAA,CAAA;AAE3D,IAAA,IAAA,CAAK,QAAS,CAAA,WAAA,CAAY,QAAS,CAAA,gBAAA,CAAiB,kBAAkB,CAAA,CAAA;AAEtE,IAAI,IAAA,kBAAA,CAAmB,IAAK,CAAA,OAAA,CAAQ,YACpC,EAAA;AACI,MAAA,IAAA,CAAK,oBAAoB,UAAU,CAAA,CAAA;AAAA,KACvC;AAAA,GACJ;AAAA,EAEA,aAAA,CAAc,YAAkC,OAChD,EAAA;AACI,IAAA,MAAM,OAAO,UAAW,CAAA,IAAA,CAAA;AAExB,IAAA,MAAM,aAAa,iBAAkB,CAAA,OAAA,CAAQ,IAAK,CAAA,IAAA,EAAM,KAAK,MAAM,CAAA,CAAA;AAEnE,IAAA,OAAA,CAAQ,KAAM,EAAA,CAAA;AAEd,IAAI,IAAA,UAAA,CAAW,aAAc,CAAA,SAAA,KAAc,MAC3C,EAAA;AACI,MAAI,IAAA,CAAC,QAAQ,YACb,EAAA;AACI,QAAI,IAAA,CAAC,KAAK,SACV,EAAA;AACI,UAAK,IAAA,CAAA,SAAA,GAAY,IAAI,SAAU,EAAA,CAAA;AAAA,SACnC;AAEA,QAAA,OAAA,CAAQ,eAAe,IAAK,CAAA,SAAA,CAAA;AAAA,OAChC;AAAA,KACJ;AAEA,IAAA,MAAM,KAAQ,GAAA,KAAA,CAAM,IAAK,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AAClC,IAAA,MAAM,QAAQ,IAAK,CAAA,MAAA,CAAA;AAEnB,IAAA,IAAI,QAAY,GAAA,CAAA,KAAA,CAAM,OAAS,EAAA,KAAA,IAAS,CAAK,IAAA,CAAA,CAAA;AAE7C,IAAA,QAAA,IAAY,UAAW,CAAA,cAAA,CAAA;AAGvB,IAAA,MAAM,gBAAmB,GAAA,mBAAA,CAAoB,KAAO,EAAA,KAAA,EAAO,UAAU,CAAA,CAAA;AAErE,IAAA,IAAI,KAAQ,GAAA,CAAA,CAAA;AAEZ,IAAM,MAAA,KAAA,GAAQ,KAAM,CAAA,QAAA,GAAW,UAAW,CAAA,uBAAA,CAAA;AAE1C,IAAQ,OAAA,CAAA,KAAA,CAAM,OAAO,KAAK,CAAA,CAAA;AAE1B,IAAA,MAAM,OAAU,GAAA,CAAC,IAAK,CAAA,MAAA,CAAO,IAAI,gBAAiB,CAAA,KAAA,CAAA;AAClD,IAAA,MAAM,OAAU,GAAA,CAAC,IAAK,CAAA,MAAA,CAAO,IAAI,gBAAiB,CAAA,MAAA,CAAA;AAElD,IAAQ,OAAA,CAAA,SAAA,CAAU,SAAS,OAAO,CAAA,CAAA;AAElC,IAAM,MAAA,IAAA,GAAO,MAAM,KAAM,CAAA,KAAA,CAAA;AAEzB,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,gBAAiB,CAAA,KAAA,CAAM,QAAQ,CACnD,EAAA,EAAA;AACI,MAAM,MAAA,IAAA,GAAO,gBAAiB,CAAA,KAAA,CAAM,CAAC,CAAA,CAAA;AAErC,MAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,IAAK,CAAA,aAAA,CAAc,QAAQ,CAC/C,EAAA,EAAA;AACI,QAAM,MAAA,IAAA,GAAO,MAAM,KAAO,EAAA,CAAA,CAAA;AAE1B,QAAM,MAAA,QAAA,GAAW,UAAW,CAAA,KAAA,CAAM,IAAI,CAAA,CAAA;AAEtC,QAAA,IAAI,UAAU,OACd,EAAA;AACI,UAAQ,OAAA,CAAA,OAAA;AAAA,YACJ,QAAS,CAAA,OAAA;AAAA,YACT,IAAA;AAAA,YACA,KAAK,KAAM,CAAA,IAAA,CAAK,cAAc,CAAC,CAAA,GAAI,SAAS,OAAO,CAAA;AAAA,YACnD,IAAK,CAAA,KAAA,CAAM,QAAW,GAAA,QAAA,CAAS,OAAO,CAAA;AAAA,WAC1C,CAAA;AAAA,SACJ;AAAA,OACJ;AAEA,MAAA,QAAA,IAAY,UAAW,CAAA,UAAA,CAAA;AAAA,KAC3B;AAAA,GACJ;AAAA,EAEA,iBAAiB,UACjB,EAAA;AACI,IAAA,OAAO,KAAK,aAAc,CAAA,UAAA,CAAW,GAAG,CAAK,IAAA,IAAA,CAAK,YAAY,UAAU,CAAA,CAAA;AAAA,GAC5E;AAAA,EAEA,YAAY,UACZ,EAAA;AACI,IAAW,UAAA,CAAA,IAAA,CAAK,OAAO,MAAO,EAAA,CAAA;AAG9B,IAAA,MAAM,eAAkB,GAAA,OAAA,CAAQ,GAAI,CAAA,uBAAA,EAAyB,UAAU,CAAA,CAAA;AAEvE,IAAK,IAAA,CAAA,aAAA,CAAc,UAAW,CAAA,GAAG,CAAI,GAAA,eAAA,CAAA;AAErC,IAAA,IAAA,CAAK,aAAc,CAAA,UAAA,EAAY,eAAgB,CAAA,IAAA,CAAK,OAAO,CAAA,CAAA;AAE3D,IAAW,UAAA,CAAA,EAAA,CAAG,aAAa,MAC3B;AACI,MAAA,IAAA,CAAK,kBAAkB,UAAU,CAAA,CAAA;AAAA,KACpC,CAAA,CAAA;AAED,IAAO,OAAA,IAAA,CAAK,aAAc,CAAA,UAAA,CAAW,GAAG,CAAA,CAAA;AAAA,GAC5C;AAAA,EAEA,oBAAoB,UACpB,EAAA;AACI,IAAA,MAAM,OAAU,GAAA,IAAA,CAAK,gBAAiB,CAAA,UAAU,EAAE,IAAK,CAAA,OAAA,CAAA;AAEvD,IAAA,MAAM,OAAO,UAAW,CAAA,IAAA,CAAA;AAExB,IAAM,MAAA,UAAA,GAAa,KAAK,MAAO,CAAA,UAAA,CAAA;AAC/B,IAAM,MAAA,WAAA,GAAc,KAAM,CAAA,GAAA,CAAI,UAAoB,CAAA,CAAA;AAGlD,IAAA,MAAM,EAAE,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,KAAM,UAAW,CAAA,cAAA,CAAA;AAElC,IAAA,MAAM,KAAK,IAAK,CAAA,IAAA,CAAM,CAAI,GAAA,CAAA,GAAM,IAAI,CAAE,CAAA,CAAA;AACtC,IAAA,MAAM,KAAK,IAAK,CAAA,IAAA,CAAM,CAAI,GAAA,CAAA,GAAM,IAAI,CAAE,CAAA,CAAA;AACtC,IAAM,MAAA,UAAA,GAAA,CAAc,KAAK,GAAI,CAAA,EAAE,IAAI,IAAK,CAAA,GAAA,CAAI,EAAE,CAAK,IAAA,CAAA,CAAA;AAEnD,IAAA,MAAM,SAAY,GAAA,WAAA,CAAY,oBAAuB,GAAA,IAAA,CAAK,MAAO,CAAA,QAAA,CAAA;AAGjE,IAAA,MAAM,UAAa,GAAA,CAAA,CAAA;AACnB,IAAA,MAAM,WAAW,UAAa,GAAA,WAAA,CAAY,aAAc,CAAA,aAAA,IAAiB,IAAI,SAAa,CAAA,GAAA,UAAA,CAAA;AAE1F,IAAA,OAAA,CAAQ,YAAa,CAAA,SAAA,CAAU,aAAc,CAAA,QAAA,CAAS,QAAW,GAAA,QAAA,CAAA;AAAA,GACrE;AAAA,EAEA,OACA,GAAA;AACI,IAAW,KAAA,MAAA,GAAA,IAAO,KAAK,aACvB,EAAA;AACI,MAAA,IAAA,CAAK,uBAAuB,GAAwB,CAAA,CAAA;AAAA,KACxD;AAEA,IAAA,IAAA,CAAK,aAAgB,GAAA,IAAA,CAAA;AAErB,IAAK,IAAA,CAAA,SAAA,EAAW,QAAQ,IAAI,CAAA,CAAA;AAC5B,IAAA,IAAA,CAAK,SAAY,GAAA,IAAA,CAAA;AAEjB,IAAA,IAAA,CAAK,QAAW,GAAA,IAAA,CAAA;AAAA,GACpB;AACJ,CAAA;AAAA;AAhNa,cAAA,CAGF,SAAY,GAAA;AAAA,EACf,IAAM,EAAA;AAAA,IACF,aAAc,CAAA,UAAA;AAAA,IACd,aAAc,CAAA,WAAA;AAAA,IACd,aAAc,CAAA,WAAA;AAAA,GAClB;AAAA,EACA,IAAM,EAAA,YAAA;AACV,CAAA;;;;"}