{"version":3,"file":"DynamicBitmapFont.js","sources":["../../../../src/rendering/text/bitmap/DynamicBitmapFont.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { Rectangle } from '../../../maths/shapes/Rectangle';\nimport { convertColorToNumber } from '../../../utils/color/convertColorToNumber';\nimport { hex2rgb } from '../../../utils/color/hex';\nimport { CanvasPool } from '../../renderers/shared/texture/CanvasPool';\nimport { ALPHA_MODES } from '../../renderers/shared/texture/const';\nimport { ImageSource } from '../../renderers/shared/texture/sources/ImageSource';\nimport { Texture } from '../../renderers/shared/texture/Texture';\nimport { CanvasTextMetrics } from '../canvas/CanvasTextMetrics';\nimport { fontStringFromTextStyle } from '../canvas/utils/fontStringFromTextStyle';\nimport { getCanvasFillStyle } from '../canvas/utils/getCanvasFillStyle';\nimport { TextStyle } from '../TextStyle';\nimport { resolveCharacters } from './utils/resolveCharacters';\n\nimport type { ICanvasRenderingContext2D } from '../../../settings/adapter/ICanvasRenderingContext2D';\nimport type { CanvasAndContext } from '../../renderers/shared/texture/CanvasPool';\nimport type { FontMetrics } from '../canvas/CanvasTextMetrics';\nimport type { CharData } from './BitmapFont';\n\nexport interface DynamicBitmapFontOptions\n{\n    style: TextStyle\n    overrideFill?: boolean\n}\n\nexport interface IBitmapFont\n{\n    baseRenderedFontSize: number\n    baseMeasurementFontSize: number\n    pages: {texture: Texture}[]\n    chars: Record<string, CharData>\n\n    lineHeight: number\n    baseLineOffset: number\n    fontName: string\n    fontMetrics: FontMetrics\n\n    distanceField: {\n        fieldType: string\n        distanceRange: number\n    }\n\n    destroy(): void\n}\n\nexport class DynamicBitmapFont extends EventEmitter<{\n    destroy: DynamicBitmapFont\n}> implements IBitmapFont\n{\n    baseRenderedFontSize = 100;\n    baseMeasurementFontSize = 100;\n    padding = 4;\n\n    baseLineOffset = 0;\n\n    pages: {canvasAndContext?: CanvasAndContext, texture: Texture}[] = [];\n    chars: Record<string, CharData> = {};\n    lineHeight = 0;\n\n    measureCache: Record<string, number> = {};\n\n    currentChars: string[] = [];\n\n    dynamic = true;\n\n    currentX = 0;\n    currentY = 0;\n    currentPageIndex = -1;\n    style: TextStyle;\n    fontMetrics: FontMetrics;\n    sdf: boolean;\n    fontName: string;\n\n    // this is a resolution modifier for the font size..\n    // texture resolution will also be used to scale texture according to its font size also\n    resolution = 1;\n\n    distanceField = {\n        fieldType: 'none',\n        distanceRange: 0\n    };\n\n    constructor(options: DynamicBitmapFontOptions)\n    {\n        super();\n\n        this.pages = [];\n\n        const dynamicOptions = options;\n\n        this.dynamic = true;\n\n        let style;\n\n        if (dynamicOptions.style instanceof TextStyle)\n        {\n            style = dynamicOptions.style.clone();\n        }\n        else\n        {\n            style = new TextStyle(dynamicOptions.style);\n        }\n\n        style.fontSize = this.baseMeasurementFontSize;\n\n        if (dynamicOptions.overrideFill)\n        {\n            // assuming no shape fill..\n            style._fill.color = 0xffffff;\n            style._fill.alpha = 1;\n            style._fill.texture = Texture.WHITE;\n            style._fill.fill = null;\n        }\n\n        this.style = style;\n\n        const font = fontStringFromTextStyle(style);\n\n        this.fontMetrics = CanvasTextMetrics.measureFont(font);\n        this.lineHeight = style.lineHeight || this.fontMetrics.fontSize || style.fontSize;\n    }\n\n    ensureCharacters(chars: string): void\n    {\n        const charList = resolveCharacters(chars)\n            .filter((char) => !this.currentChars.includes(char))\n            .filter((char, index, self) => self.indexOf(char) === index);\n        // filter returns..\n\n        if (!charList.length) return;\n\n        this.currentChars = [...this.currentChars, ...charList];\n\n        let pageData;\n\n        if (this.currentPageIndex === -1)\n        {\n            pageData = this.nextPage();\n        }\n        else\n        {\n            pageData = this.pages[this.currentPageIndex];\n        }\n\n        let { canvas, context } = pageData.canvasAndContext;\n        let textureSource = pageData.texture.source;\n\n        const style = this.style;\n\n        let currentX = this.currentX;\n        let currentY = this.currentY;\n\n        const fontScale = this.baseRenderedFontSize / this.baseMeasurementFontSize;\n        const padding = this.padding * fontScale;\n\n        const widthScale = style.fontStyle === 'italic' ? 2 : 1;\n        let maxCharHeight = 0;\n        let skipTexture = false;\n\n        for (let i = 0; i < charList.length; i++)\n        {\n            const char = charList[i];\n\n            const metrics = CanvasTextMetrics.measureText(char, style, canvas, false);\n\n            const width = (widthScale * metrics.width) * fontScale;\n            const height = (metrics.height) * fontScale;\n\n            const paddedWidth = width + (padding * 2);\n            const paddedHeight = height + (padding * 2);\n\n            skipTexture = false;\n            // don't let empty characters count towards the maxCharHeight\n            if (char !== '\\n' && char !== '\\r' && char !== '\\t' && char !== ' ')\n            {\n                skipTexture = true;\n                maxCharHeight = Math.ceil(Math.max(paddedHeight, maxCharHeight));// / 1.5;\n            }\n\n            if (currentX + paddedWidth > 512)\n            {\n                currentY += maxCharHeight;\n\n                // reset the line x and height..\n                maxCharHeight = paddedHeight;\n                currentX = 0;\n\n                if (currentY + maxCharHeight > 512)\n                {\n                    textureSource.update();\n\n                    const pageData = this.nextPage();\n\n                    canvas = pageData.canvasAndContext.canvas;\n                    context = pageData.canvasAndContext.context;\n                    textureSource = pageData.texture.source;\n\n                    currentY = 0;\n                }\n            }\n\n            const xAdvance = (width / fontScale)\n                - (style.dropShadow?.distance ?? 0)\n                - (style._stroke?.width ?? 0);\n\n            // This is in coord space of the measurements.. not the texture\n            this.chars[char] = {\n                id: char.codePointAt(0),\n                xOffset: -this.padding,\n                yOffset: -this.padding,\n                xAdvance,\n                kerning: {},\n            };\n\n            if (skipTexture)\n            {\n                this.drawGlyph(\n                    context,\n                    metrics,\n                    currentX + padding,\n                    currentY + padding,\n                    fontScale,\n                    style,\n                );\n\n                const px = textureSource.width * fontScale;\n                const py = textureSource.height * fontScale;\n\n                const frame = new Rectangle(\n                    (currentX) / px,\n                    (currentY) / py,\n                    (paddedWidth) / px,\n                    (paddedHeight) / py,\n                );\n\n                this.chars[char].texture = new Texture({\n                    source: textureSource,\n                    layout: {\n                        frame\n                    }\n                });\n\n                currentX += Math.ceil(paddedWidth);\n            }\n\n            // now add it to the font data..\n        }\n\n        textureSource.update();\n\n        this.currentX = currentX;\n        this.currentY = currentY;\n\n        // now apply kerning..\n        this.applyKerning(charList, context);\n    }\n\n    applyKerning(newChars: string[], context: ICanvasRenderingContext2D): void\n    {\n        const measureCache = this.measureCache;\n\n        for (let i = 0; i < newChars.length; i++)\n        {\n            const first = newChars[i];\n\n            for (let j = 0; j < this.currentChars.length; j++)\n            {\n                // first go through new char being first\n                const second = this.currentChars[j];\n\n                let c1 = measureCache[first];\n\n                if (!c1) c1 = measureCache[first] = context.measureText(first).width;\n\n                let c2 = measureCache[second];\n\n                if (!c2) c2 = measureCache[second] = context.measureText(second).width;\n\n                let total = context.measureText(first + second).width;\n                let amount = total - (c1 + c2);\n\n                if (amount)\n                {\n                    this.chars[first].kerning[second] = amount;\n                }\n\n                // then go through new char being second\n                total = context.measureText(first + second).width;\n                amount = total - (c1 + c2);\n\n                if (amount)\n                {\n                    this.chars[second].kerning[first] = amount;\n                }\n            }\n        }\n    }\n\n    nextPage(): {canvasAndContext: CanvasAndContext, texture: Texture}\n    {\n        this.currentPageIndex++;\n\n        const textureResolution = this.resolution;\n\n        const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(512, 512, textureResolution);\n\n        this.setupContext(canvasAndContext.context, this.style, textureResolution);\n\n        //  canvasAndContext.context.fillStyle = this.currentPageIndex ? 'blue' : 'green';\n        // canvasAndContext.context.fillRect(0, 0, 512, 512);\n\n        const resolution = textureResolution * (this.baseRenderedFontSize / this.baseMeasurementFontSize);\n\n        const texture = new Texture({\n            source: new ImageSource({\n                resource: canvasAndContext.canvas,\n                resolution,\n                alphaMode: ALPHA_MODES.PMA\n            }),\n\n        });\n\n        const pageData = {\n            canvasAndContext,\n            texture,\n        };\n\n        this.pages[this.currentPageIndex] = pageData;\n\n        // document.body.appendChild(canvasAndContext.canvas);\n        // canvasAndContext.canvas.style.position = 'absolute';\n        // canvasAndContext.canvas.style.top = '400px';\n        // canvasAndContext.canvas.style.left = `${this.currentPageIndex * 512}px`;\n\n        return pageData;\n    }\n\n    // canvas style!\n    setupContext(context: ICanvasRenderingContext2D, style: TextStyle, resolution: number): void\n    {\n        style.fontSize = this.baseRenderedFontSize;\n\n        context.scale(resolution, resolution);\n\n        context.font = fontStringFromTextStyle(style);\n\n        style.fontSize = this.baseMeasurementFontSize;\n\n        context.textBaseline = style.textBaseline;\n\n        const stroke = style._stroke;\n\n        const strokeThickness = stroke?.width ?? 0;\n\n        if (stroke)\n        {\n            context.lineWidth = strokeThickness;\n            context.lineJoin = stroke.join;\n            context.miterLimit = stroke.miterLimit;\n\n            // TODO prolly cache this??\n            context.strokeStyle = getCanvasFillStyle(stroke, context);\n        }\n\n        if (style._fill)\n        {\n            // set canvas text styles\n            context.fillStyle = getCanvasFillStyle(style._fill, context);\n        }\n\n        if (style.dropShadow)\n        {\n            const shadowOptions = style.dropShadow;\n\n            const dropShadowColor = convertColorToNumber(shadowOptions.color);\n\n            const rgb = hex2rgb(dropShadowColor);\n\n            const dropShadowBlur = shadowOptions.blur * resolution;\n            const dropShadowDistance = shadowOptions.distance * resolution;\n\n            context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${shadowOptions.alpha})`;\n            context.shadowBlur = dropShadowBlur;\n            context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n            context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance;\n        }\n        else\n        {\n            context.shadowColor = 'black';\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n    }\n\n    drawGlyph(\n        context: ICanvasRenderingContext2D,\n        metrics: CanvasTextMetrics,\n        x: number,\n        y: number,\n        fontScale: number,\n        style: TextStyle\n    ): void\n    {\n        const char = metrics.text;\n        const fontProperties = metrics.fontProperties;\n        const stroke = style._stroke;\n\n        const strokeThickness = (stroke?.width ?? 0) * fontScale;\n\n        const tx = x + (strokeThickness / 2);\n        const ty = y - (strokeThickness / 2);\n\n        const descent = fontProperties.descent * fontScale;\n        const lineHeight = metrics.lineHeight * fontScale;\n\n        if (style.stroke && strokeThickness)\n        {\n            context.strokeText(char, tx, ty + lineHeight - descent);\n        }\n\n        if (style._fill)\n        {\n            context.fillText(char, tx, ty + lineHeight - descent);\n        }\n    }\n\n    destroy(): void\n    {\n        this.emit('destroy', this);\n\n        this.removeAllListeners();\n\n        for (const i in this.chars)\n        {\n            this.chars[i].texture.destroy();\n        }\n\n        this.chars = null;\n\n        for (let i = 0; i < this.pages.length; i++)\n        {\n            const { canvasAndContext, texture } = this.pages[i];\n\n            CanvasPool.returnCanvasAndContext(canvasAndContext);\n            texture.destroy(true);\n        }\n\n        this.pages = null;\n    }\n}\n"],"names":["EventEmitter","TextStyle","Texture","fontStringFromTextStyle","CanvasTextMetrics","resolveCharacters","pageData","Rectangle","CanvasPool","ImageSource","ALPHA_MODES","getCanvasFillStyle","convertColorToNumber","hex2rgb"],"mappings":"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"}