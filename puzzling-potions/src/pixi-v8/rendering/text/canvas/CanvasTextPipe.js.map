{"version":3,"file":"CanvasTextPipe.js","sources":["../../../../src/rendering/text/canvas/CanvasTextPipe.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { BatchableSprite } from '../../sprite/shared/BatchableSprite';\n\nimport type { ObservablePoint } from '../../../maths/ObservablePoint';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../renderers/shared/Renderable';\nimport type { Texture } from '../../renderers/shared/texture/Texture';\nimport type { Renderer } from '../../renderers/types';\nimport type { TextView } from '../TextView';\n\nexport class CanvasTextPipe implements RenderPipe<TextView>\n{\n    /** @ignore */\n    static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'text',\n    } as const;\n\n    private renderer: Renderer;\n\n    private gpuText: Record<number, {\n        texture: Texture,\n        currentKey: string,\n        batchableSprite: BatchableSprite,\n        needsTextureUpdate: boolean,\n    }> = {};\n\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    validateRenderable(renderable: Renderable<TextView>): boolean\n    {\n        const gpuText = this.getGpuText(renderable);\n\n        const newKey = renderable.view._getKey();\n\n        if (gpuText.currentKey !== newKey)\n        {\n            const view = renderable.view;\n\n            const resolution = view._autoResolution ? this.renderer.view.resolution : view._resolution;\n\n            const { width, height } = this.renderer.canvasText.getTextureSize(\n                view.text,\n                resolution,\n                view._style,\n            );\n\n            if (\n                // is only being used by this text:\n                this.renderer.canvasText.getReferenceCount(gpuText.currentKey) === 1\n                // check the size of the text is the same po2\n                && width === gpuText.texture._source.width\n                && height === gpuText.texture._source.height\n            )\n            {\n                return false;\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    addRenderable(renderable: Renderable<TextView>, instructionSet: InstructionSet)\n    {\n        const gpuText = this.getGpuText(renderable);\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (renderable.view.didUpdate)\n        {\n            this.updateText(renderable);\n        }\n\n        this.renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n    }\n\n    updateRenderable(renderable: Renderable<TextView>)\n    {\n        const gpuText = this.getGpuText(renderable);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (renderable.view.didUpdate)\n        {\n            this.updateText(renderable);\n        }\n\n        batchableSprite.batcher.updateElement(batchableSprite);\n    }\n\n    destroyRenderable(renderable: Renderable<TextView>)\n    {\n        this.destroyRenderableById(renderable.uid);\n    }\n\n    private destroyRenderableById(renderableUid: number)\n    {\n        const gpuText = this.gpuText[renderableUid];\n\n        this.renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n\n        BigPool.return(gpuText.batchableSprite);\n\n        this.gpuText[renderableUid] = null;\n    }\n\n    private updateText(renderable: Renderable<TextView>)\n    {\n        const newKey = renderable.view._getKey();\n        const gpuText = this.getGpuText(renderable);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.currentKey !== newKey)\n        {\n            this.updateGpuText(renderable);\n        }\n\n        renderable.view.didUpdate = false;\n\n        updateBounds(batchableSprite.bounds, renderable.view.anchor, batchableSprite.texture);\n    }\n\n    private updateGpuText(renderable: Renderable<TextView>)\n    {\n        const gpuText = this.getGpuText(renderable);\n        const batchableSprite = gpuText.batchableSprite;\n        const view = renderable.view;\n\n        if (gpuText.texture)\n        {\n            this.renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n        }\n\n        const resolution = view._autoResolution ? this.renderer.view.resolution : view._resolution;\n\n        gpuText.texture = batchableSprite.texture = this.renderer.canvasText.getTexture(\n            view.text,\n            resolution,\n            view._style,\n            view._getKey()\n        );\n\n        gpuText.currentKey = view._getKey();\n        batchableSprite.texture = gpuText.texture;\n        gpuText.needsTextureUpdate = false;\n    }\n\n    private getGpuText(renderable: Renderable<TextView>)\n    {\n        return this.gpuText[renderable.uid] || this.initGpuText(renderable);\n    }\n\n    private initGpuText(renderable: Renderable<TextView>)\n    {\n        const view = renderable.view;\n\n        view._style.update();\n\n        const gpuTextData: CanvasTextPipe['gpuText'][number] = {\n            texture: null,\n            currentKey: '--',\n            batchableSprite: BigPool.get(BatchableSprite),\n            needsTextureUpdate: true,\n        };\n\n        gpuTextData.batchableSprite.sprite = renderable;\n        gpuTextData.batchableSprite.bounds = [0, 1, 0, 0];\n\n        this.gpuText[renderable.uid] = gpuTextData;\n\n        this.updateText(renderable);\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        renderable.on('destroyed', () =>\n        {\n            this.destroyRenderable(renderable);\n        });\n\n        return gpuTextData;\n    }\n\n    destroy()\n    {\n        for (const i in this.gpuText)\n        {\n            this.destroyRenderableById(i as unknown as number);\n        }\n\n        this.gpuText = null;\n        this.renderer = null;\n    }\n}\n\nfunction updateBounds(bounds: [number, number, number, number], anchor: ObservablePoint, texture: Texture)\n{\n    const textureSource = texture._source;\n\n    const layout = texture.layout;\n\n    const orig = layout.orig;\n    const trim = layout.trim;\n\n    const textureSourceWidth = textureSource.width;\n    const textureSourceHeight = textureSource.height;\n\n    const width = textureSourceWidth * orig.width;\n    const height = textureSourceHeight * orig.height;\n\n    if (trim)\n    {\n        const sourceWidth = textureSourceWidth * trim.width;\n        const sourceHeight = textureSourceHeight * trim.height;\n\n        bounds[1] = (trim.x * textureSourceWidth) - (anchor._x * width);\n        bounds[0] = bounds[1] + sourceWidth;\n\n        bounds[3] = (trim.y * textureSourceHeight) - (anchor._y * height);\n        bounds[2] = bounds[3] + sourceHeight;\n    }\n    else\n    {\n        bounds[1] = -anchor._x * width;\n        bounds[0] = bounds[1] + width;\n\n        bounds[3] = -anchor._y * height;\n        bounds[2] = bounds[3] + height;\n    }\n\n    return;\n}\n"],"names":["BigPool","BatchableSprite","ExtensionType"],"mappings":"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"}