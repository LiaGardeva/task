{"version":3,"file":"settings.js","sources":["../../src/settings/settings.ts"],"sourcesContent":["import { BrowserAdapter } from './adapter/adapter';\n\nimport type { Adapter } from './adapter/adapter';\n\ninterface Settings\n{\n    ADAPTER: Adapter;\n    RETINA_PREFIX: RegExp;\n    FAIL_IF_MAJOR_PERFORMANCE_CAVEAT: boolean;\n    RESOLUTION: number;\n}\n\n/**\n * User's customizable globals for overriding the default PIXI settings, such\n * as a renderer's default resolution, framerate, float precision, etc.\n * @example\n * import { settings, ENV } from 'pixi.js';\n *\n * // Use the native window resolution as the default resolution\n * // will support high-density displays when rendering\n * settings.RESOLUTION = window.devicePixelRatio;\n * @namespace PIXI.settings\n */\nconst settings: Settings & Partial<PixiMixins.Settings> = {\n    /**\n     * This adapter is used to call methods that are platform dependent.\n     * For example `document.createElement` only runs on the web but fails in node environments.\n     * This allows us to support more platforms by abstracting away specific implementations per platform.\n     *\n     * By default the adapter is set to work in the browser. However you can create your own\n     * by implementing the `IAdapter` interface. See `IAdapter` for more information.\n     * @name ADAPTER\n     * @memberof PIXI.settings\n     * @type {PIXI.Adapter}\n     * @default PIXI.BrowserAdapter\n     */\n    ADAPTER: BrowserAdapter,\n\n    /**\n     * The prefix that denotes a URL is for a retina asset.\n     * @static\n     * @name RETINA_PREFIX\n     * @memberof PIXI.settings\n     * @type {RegExp}\n     * @default /@([0-9\\.]+)x/\n     * @example `@2x`\n     */\n    RETINA_PREFIX: /@([0-9\\.]+)x/,\n\n    /**\n     * Should the `failIfMajorPerformanceCaveat` flag be enabled as a context option used in the `isWebGLSupported` function.\n     * If set to true, a WebGL renderer can fail to be created if the browser thinks there could be performance issues when\n     * using WebGL.\n     *\n     * In PixiJS v6 this has changed from true to false by default, to allow WebGL to work in as many scenarios as possible.\n     * However, some users may have a poor experience, for example, if a user has a gpu or driver version blacklisted by the\n     * browser.\n     *\n     * If your application requires high performance rendering, you may wish to set this to false.\n     * We recommend one of two options if you decide to set this flag to false:\n     *\n     * 1: Use the `pixi.js-legacy` package, which includes a Canvas renderer as a fallback in case high performance WebGL is\n     *    not supported.\n     *\n     * 2: Call `isWebGLSupported` (which if found in the PIXI.utils package) in your code before attempting to create a\n     *    PixiJS renderer, and show an error message to the user if the function returns false, explaining that their\n     *    device & browser combination does not support high performance WebGL.\n     *    This is a much better strategy than trying to create a PixiJS renderer and finding it then fails.\n     * @static\n     * @name FAIL_IF_MAJOR_PERFORMANCE_CAVEAT\n     * @memberof PIXI.settings\n     * @type {boolean}\n     * @default false\n     */\n    FAIL_IF_MAJOR_PERFORMANCE_CAVEAT: false,\n\n    /**\n     * Default resolution / device pixel ratio of the renderer.\n     * @static\n     * @name RESOLUTION\n     * @memberof PIXI.settings\n     * @type {number}\n     * @default 1\n     */\n    RESOLUTION: 2,\n};\n\nexport { settings };\n"],"names":["BrowserAdapter"],"mappings":";;;;;;AAuBA,MAAM,QAAoD,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAatD,OAAS,EAAAA,sBAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWT,aAAe,EAAA,cAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2Bf,gCAAkC,EAAA,KAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUlC,UAAY,EAAA,CAAA;AAChB;;;;"}