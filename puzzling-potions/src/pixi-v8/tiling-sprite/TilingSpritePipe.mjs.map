{"version":3,"file":"TilingSpritePipe.mjs","sources":["../../src/tiling-sprite/TilingSpritePipe.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { ExtensionType } from '../extensions/Extensions';\nimport { Matrix } from '../maths/Matrix';\nimport { MeshView } from '../rendering/mesh/shared/MeshView';\nimport { ProxyRenderable } from '../rendering/renderers/shared/ProxyRenderable';\nimport { QuadGeometry } from './QuadGeometry';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader';\n\nimport type { TypedArray } from '../rendering/renderers/shared/buffer/Buffer';\nimport type { InstructionSet } from '../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../rendering/renderers/shared/Renderable';\nimport type { Renderer } from '../rendering/renderers/types';\nimport type { TilingSpriteView } from './TilingSpriteView';\n\ninterface RenderableData\n{\n    batched: boolean;\n}\n\nconst sharedQuad = new QuadGeometry();\n\nexport class TilingSpritePipe implements RenderPipe<TilingSpriteView>\n{\n    /** @ignore */\n    static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'tilingSprite',\n    } as const;\n\n    renderer: Renderer;\n\n    renderableHash: Record<number, RenderableData> = {};\n\n    // TODO can prolly merge these properties into a single mesh and\n    // add them onto the renderableHash (rather than having them on separate hashes)\n    gpuBatchedTilingSprite: Record<string, Renderable<MeshView>> = {};\n\n    gpuTilingSprite: Record<string, {\n        meshRenderable: Renderable<MeshView>\n        textureMatrix: Matrix;\n    }> = {};\n\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    validateRenderable(renderable: Renderable<TilingSpriteView>): boolean\n    {\n        const textureMatrix = renderable.view.texture.textureMatrix;\n\n        let rebuild = false;\n\n        const renderableData = this.getRenderableData(renderable);\n\n        if (renderableData.batched !== textureMatrix.isSimple)\n        {\n            renderableData.batched = textureMatrix.isSimple;\n\n            rebuild = true;\n        }\n\n        // TODO - only update if required?\n        // only texture\n        // only uvs\n        // only positions?\n\n        return rebuild;\n    }\n\n    addRenderable(renderable: Renderable<TilingSpriteView>, instructionSet: InstructionSet)\n    {\n        if (renderable.view.didUpdate)\n        {\n            renderable.view.didUpdate = false;\n\n            this.rebuild(renderable);\n        }\n\n        const { batched } = this.getRenderableData(renderable);\n\n        if (batched)\n        {\n            const batchableTilingSprite = this.getBatchedTilingSprite(renderable);\n\n            this.renderer.renderPipes.mesh.addRenderable(batchableTilingSprite, instructionSet);\n        }\n        else\n        {\n            const gpuTilingSprite = this.getGpuTilingSprite(renderable);\n\n            this.renderer.renderPipes.mesh.addRenderable(gpuTilingSprite.meshRenderable, instructionSet);\n        }\n    }\n\n    updateRenderable(renderable: Renderable<TilingSpriteView>)\n    {\n        if (renderable.view.didUpdate)\n        {\n            renderable.view.didUpdate = false;\n\n            this.rebuild(renderable);\n        }\n\n        const { batched } = this.getRenderableData(renderable);\n\n        if (batched)\n        {\n            const batchableTilingSprite = this.getBatchedTilingSprite(renderable);\n\n            this.renderer.renderPipes.mesh.updateRenderable(batchableTilingSprite);\n        }\n        else\n        {\n            const gpuTilingSprite = this.getGpuTilingSprite(renderable);\n\n            this.renderer.renderPipes.mesh.updateRenderable(gpuTilingSprite.meshRenderable);\n        }\n    }\n\n    destroyRenderable(renderable: Renderable<TilingSpriteView>)\n    {\n        // TODO pooling for the items... not a biggie though!\n        this.renderableHash[renderable.uid] = null;\n        this.gpuTilingSprite[renderable.uid] = null;\n        this.gpuBatchedTilingSprite[renderable.uid] = null;\n    }\n\n    getRenderableData(renderable: Renderable<TilingSpriteView>): RenderableData\n    {\n        return this.renderableHash[renderable.uid] || this.initRenderableData(renderable);\n    }\n\n    initRenderableData(renderable: Renderable<TilingSpriteView>): RenderableData\n    {\n        const renderableData = {\n            batched: true,\n        };\n\n        this.renderableHash[renderable.uid] = renderableData;\n\n        this.validateRenderable(renderable);\n\n        renderable.on('destroyed', () =>\n        {\n            this.destroyRenderable(renderable);\n        });\n\n        return renderableData;\n    }\n\n    rebuild(renderable: Renderable<TilingSpriteView>)\n    {\n        const renderableData = this.getRenderableData(renderable);\n        const view = renderable.view;\n        const textureMatrix = view.texture.textureMatrix;\n\n        if (renderableData.batched)\n        {\n            const batchedMesh = this.getBatchedTilingSprite(renderable);\n\n            batchedMesh.view.texture = view.texture;\n            view.texture.style.addressMode = 'repeat';\n            view.texture.style.update();\n\n            this.updateBatchPositions(renderable);\n            this.updateBatchUvs(renderable);\n        }\n        else\n        {\n            const gpuTilingSprite = this.getGpuTilingSprite(renderable);\n            const { meshRenderable } = gpuTilingSprite;\n\n            const meshView = meshRenderable.view;\n\n            meshView.shader.texture = view.texture;\n\n            const tilingUniforms = meshView.shader.resources.tilingUniforms;\n\n            const originalWidth = view.width;\n            const originalHeight = view.height;\n\n            const tilingSpriteWidth = view.texture.width;\n            const tilingSpriteHeight = view.texture.height;\n\n            const matrix = view.tileTransform.matrix;\n\n            const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n\n            uTextureTransform.set(\n                matrix.a * tilingSpriteWidth / originalWidth,\n                matrix.b * tilingSpriteWidth / originalHeight,\n                matrix.c * tilingSpriteHeight / originalWidth,\n                matrix.d * tilingSpriteHeight / originalHeight,\n                matrix.tx / originalWidth,\n                matrix.ty / originalHeight);\n\n            uTextureTransform.invert();\n\n            tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n            tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n            tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n            tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n            tilingUniforms.uniforms.uSizeAnchor[0] = originalWidth;\n            tilingUniforms.uniforms.uSizeAnchor[1] = originalHeight;\n            tilingUniforms.uniforms.uSizeAnchor[2] = renderable.view.anchor.x;\n            tilingUniforms.uniforms.uSizeAnchor[3] = renderable.view.anchor.y;\n\n            tilingUniforms.update();\n        }\n    }\n\n    getGpuTilingSprite(renderable: Renderable<TilingSpriteView>)\n    {\n        return this.gpuTilingSprite[renderable.uid] || this.initGpuTilingSprite(renderable);\n    }\n\n    initGpuTilingSprite(renderable: Renderable<TilingSpriteView>)\n    {\n        const view = renderable.view;\n\n        view.texture.style.addressMode = 'repeat';\n        view.texture.style.update();\n\n        const meshView = new MeshView({\n            geometry: sharedQuad,\n            shader: new TilingSpriteShader({\n                texture: view.texture,\n            }),\n        });\n\n        const meshRenderable = new ProxyRenderable({\n            original: renderable,\n            view: meshView,\n        });\n\n        const textureMatrix = new Matrix();\n\n        const gpuTilingSpriteData = {\n            meshRenderable,\n            textureMatrix,\n        };\n\n        this.gpuTilingSprite[renderable.uid] = gpuTilingSpriteData;\n\n        return gpuTilingSpriteData;\n    }\n\n    getBatchedTilingSprite(renderable: Renderable<TilingSpriteView>): Renderable<MeshView>\n    {\n        return this.gpuBatchedTilingSprite[renderable.uid] || this.initBatchedTilingSprite(renderable);\n    }\n\n    initBatchedTilingSprite(renderable: Renderable<TilingSpriteView>)\n    {\n        const meshView = new MeshView({\n            geometry: new QuadGeometry(),\n            texture: renderable.view.texture,\n        });\n\n        const batchableMeshRenderable = new ProxyRenderable({\n            original: renderable,\n            view: meshView,\n        });\n\n        this.gpuBatchedTilingSprite[renderable.uid] = batchableMeshRenderable;\n\n        return batchableMeshRenderable;\n    }\n\n    updateBatchPositions(renderable: Renderable<TilingSpriteView>)\n    {\n        const meshRenderable = this.getBatchedTilingSprite(renderable);\n        const view = renderable.view;\n\n        const positionBuffer = meshRenderable.view.geometry.getBuffer('aPosition');\n\n        const positions = positionBuffer.data;\n        const anchorX = view.anchor.x;\n        const anchorY = view.anchor.y;\n\n        positions[0] = -anchorX * view.width;\n        positions[1] = -anchorY * view.height;\n        positions[2] = (1 - anchorX) * view.width;\n        positions[3] = -anchorY * view.height;\n        positions[4] = (1 - anchorX) * view.width;\n        positions[5] = (1 - anchorY) * view.height;\n        positions[6] = -anchorX * view.width;\n        positions[7] = (1 - anchorY) * view.height;\n    }\n\n    updateBatchUvs(renderable: Renderable<TilingSpriteView>)\n    {\n        const view = renderable.view;\n        const width = view.texture.frameWidth;\n        const height = view.texture.frameHeight;\n\n        const meshRenderable = this.getBatchedTilingSprite(renderable);\n\n        const uvBuffer = meshRenderable.view.geometry.getBuffer('aUV');\n\n        const uvs = uvBuffer.data;\n\n        let anchorX = 0;\n        let anchorY = 0;\n\n        if (view.applyAnchorToTexture)\n        {\n            anchorX = view.anchor.x;\n            anchorY = view.anchor.y;\n        }\n\n        uvs[0] = uvs[6] = -anchorX;\n        uvs[2] = uvs[4] = 1 - anchorX;\n        uvs[1] = uvs[3] = -anchorY;\n        uvs[5] = uvs[7] = 1 - anchorY;\n\n        const textureMatrix = Matrix.shared;\n\n        textureMatrix.copyFrom(view.tileTransform.matrix);\n\n        textureMatrix.tx /= view.width;\n        textureMatrix.ty /= view.height;\n\n        textureMatrix.invert();\n\n        textureMatrix.scale(view.width / width, view.height / height);\n\n        applyMatrix(uvs, 2, 0, textureMatrix);\n    }\n\n    destroy()\n    {\n        this.renderableHash = null;\n        this.gpuTilingSprite = null;\n        this.gpuBatchedTilingSprite = null;\n\n        this.renderer = null;\n    }\n}\n\n// TODO - move to a shared location\nexport function applyMatrix(array: TypedArray, stride: number, offset: number, matrix: Matrix)\n{\n    let index = 0;\n    const size = array.length / (stride || 2);\n\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n\n    offset *= stride;\n\n    while (index < size)\n    {\n        const x = array[offset];\n        const y = array[offset + 1];\n\n        array[offset] = (a * x) + (c * y) + tx;\n        array[offset + 1] = (b * x) + (d * y) + ty;\n\n        offset += stride;\n\n        index++;\n    }\n}\n"],"names":[],"mappings":"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"}