var programWgsl = "struct GlobalUniforms {\nprojectionMatrix:mat3x3<f32>,\n  worldTransformMatrix:mat3x3<f32>,\n  worldAlpha: f32\n};\n\nstruct LocalUniforms {\n  transformMatrix:mat3x3<f32>,\n  color:vec4<f32>,\n};\n\nstruct TilingUniforms {\n  uMapCoord:mat3x3<f32>,\n  uClampFrame:vec4<f32>,\n  uClampOffset:vec2<f32>,\n  uTextureTransform:mat3x3<f32>,\n  uSizeAnchor:vec4<f32>\n};\n\n@group(0) @binding(0) var<uniform> globalUniforms : GlobalUniforms;\n@group(1) @binding(0) var<uniform> localUniforms: LocalUniforms;\n\n@group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n@group(2) @binding(1) var uTexture: texture_2d<f32>;\n@group(2) @binding(2) var uSampler: sampler;\n\n\nstruct VSOutput {\n    @builtin(position) position: vec4<f32>,\n    @location(0) uv : vec2<f32>,\n    @location(1) color : vec4<f32>,\n  };\n\n  \n@vertex\nfn mainVertex(\n  @location(0) aPosition : vec2<f32>, \n  @location(1) aUV : vec2<f32>,\n) -> VSOutput {\n\n    var modifiedPosition = (aPosition - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n  \n    var  mvpMatrix = globalUniforms.projectionMatrix * globalUniforms.worldTransformMatrix * localUniforms.transformMatrix;\n\n    var  colorOut = localUniforms.color;\n\n    colorOut.r *= colorOut.a;\n    colorOut.g *= colorOut.a;\n    colorOut.b *= colorOut.a;\n    \n  return VSOutput(\n    vec4<f32>((mvpMatrix * vec3<f32>(modifiedPosition, 1.0)).xy, 0.0, 1.0),\n    (tilingUniforms.uTextureTransform * vec3(aUV, 1.0)).xy,\n    colorOut,\n  );\n};\n\n\n@fragment\nfn mainFragment(\n  @location(0) uv: vec2<f32>,\n  @location(1) color:vec4<f32>,\n) -> @location(0) vec4<f32> {\n\n    var coord = uv + ceil(tilingUniforms.uClampOffset - uv);\n    coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n    var unclamped = coord;\n    coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n    var bias = 0.;\n\n    if(unclamped.x == coord.x && unclamped.y == coord.y)\n    {\n      bias = -32.;\n    } \n    \n\n    var finalColor = textureSampleBias(uTexture, uSampler, coord, bias);\n    \n   return finalColor * color;\n\n}";

export { programWgsl as default };
//# sourceMappingURL=tiling-sprite3.mjs.map
