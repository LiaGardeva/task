import { ALPHA_MODES } from '../../rendering/renderers/shared/texture/const.mjs';
import { settings } from '../../settings/settings.mjs';

let promise;
async function detectVideoAlphaMode() {
  promise ?? (promise = (async () => {
    const canvas = settings.ADAPTER.createCanvas();
    const gl = canvas.getContext("webgl");
    if (!gl) {
      return ALPHA_MODES.UNPACK;
    }
    const video = document.createElement("video");
    video.autoplay = false;
    video.crossOrigin = "anonymous";
    video.preload = "auto";
    video.src = URL.createObjectURL(new Blob([new Uint8Array([
      26,
      69,
      223,
      163,
      159,
      66,
      134,
      129,
      1,
      66,
      247,
      129,
      1,
      66,
      242,
      129,
      4,
      66,
      243,
      129,
      8,
      66,
      130,
      132,
      119,
      101,
      98,
      109,
      66,
      135,
      129,
      2,
      66,
      133,
      129,
      2,
      24,
      83,
      128,
      103,
      1,
      0,
      0,
      0,
      0,
      0,
      1,
      211,
      17,
      77,
      155,
      116,
      186,
      77,
      187,
      139,
      83,
      171,
      132,
      21,
      73,
      169,
      102,
      83,
      172,
      129,
      161,
      77,
      187,
      139,
      83,
      171,
      132,
      22,
      84,
      174,
      107,
      83,
      172,
      129,
      198,
      77,
      187,
      140,
      83,
      171,
      132,
      18,
      84,
      195,
      103,
      83,
      172,
      130,
      1,
      23,
      77,
      187,
      140,
      83,
      171,
      132,
      28,
      83,
      187,
      107,
      83,
      172,
      130,
      1,
      189,
      236,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      89,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      21,
      73,
      169,
      102,
      160,
      42,
      215,
      177,
      131,
      15,
      66,
      64,
      77,
      128,
      132,
      76,
      97,
      118,
      102,
      87,
      65,
      132,
      76,
      97,
      118,
      102,
      68,
      137,
      136,
      64,
      143,
      64,
      0,
      0,
      0,
      0,
      0,
      22,
      84,
      174,
      107,
      204,
      174,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      67,
      215,
      129,
      1,
      115,
      197,
      136,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      156,
      129,
      0,
      34,
      181,
      156,
      131,
      117,
      110,
      100,
      136,
      129,
      0,
      134,
      133,
      86,
      95,
      86,
      80,
      57,
      131,
      129,
      1,
      35,
      227,
      131,
      132,
      59,
      154,
      202,
      0,
      224,
      148,
      176,
      129,
      2,
      186,
      129,
      2,
      154,
      129,
      2,
      83,
      192,
      129,
      1,
      85,
      176,
      132,
      85,
      185,
      129,
      1,
      18,
      84,
      195,
      103,
      213,
      115,
      115,
      210,
      99,
      192,
      139,
      99,
      197,
      136,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      103,
      200,
      156,
      69,
      163,
      135,
      69,
      78,
      67,
      79,
      68,
      69,
      82,
      68,
      135,
      143,
      76,
      97,
      118,
      99,
      32,
      108,
      105,
      98,
      118,
      112,
      120,
      45,
      118,
      112,
      57,
      103,
      200,
      162,
      69,
      163,
      136,
      68,
      85,
      82,
      65,
      84,
      73,
      79,
      78,
      68,
      135,
      148,
      48,
      48,
      58,
      48,
      48,
      58,
      48,
      49,
      46,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      48,
      0,
      0,
      31,
      67,
      182,
      117,
      199,
      231,
      129,
      0,
      160,
      194,
      161,
      160,
      129,
      0,
      0,
      0,
      130,
      73,
      131,
      66,
      0,
      0,
      16,
      0,
      22,
      0,
      56,
      36,
      28,
      24,
      74,
      0,
      0,
      32,
      32,
      0,
      17,
      191,
      255,
      255,
      138,
      254,
      0,
      0,
      117,
      161,
      157,
      166,
      155,
      238,
      129,
      1,
      165,
      150,
      130,
      73,
      131,
      66,
      0,
      0,
      16,
      0,
      22,
      0,
      56,
      36,
      28,
      24,
      74,
      0,
      0,
      32,
      32,
      0,
      72,
      64,
      28,
      83,
      187,
      107,
      145,
      187,
      143,
      179,
      129,
      0,
      183,
      138,
      247,
      129,
      1,
      241,
      130,
      1,
      113,
      240,
      129,
      3
    ])], { type: "video/webm" }));
    video.load();
    await new Promise((resolve) => {
      function wait() {
        if (video.readyState <= 1) {
          setTimeout(wait, 1);
        } else {
          resolve();
        }
      }
      wait();
    });
    const texture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, texture);
    const framebuffer = gl.createFramebuffer();
    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
    gl.framebufferTexture2D(
      gl.FRAMEBUFFER,
      gl.COLOR_ATTACHMENT0,
      gl.TEXTURE_2D,
      texture,
      0
    );
    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
    gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, video);
    const pixel = new Uint8Array(4);
    gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixel);
    gl.deleteFramebuffer(framebuffer);
    gl.deleteTexture(texture);
    gl.getExtension("WEBGL_lose_context")?.loseContext();
    URL.revokeObjectURL(video.src);
    return pixel[0] <= pixel[3] ? ALPHA_MODES.PMA : ALPHA_MODES.UNPACK;
  })());
  return promise;
}

export { detectVideoAlphaMode };
//# sourceMappingURL=detectVideoAlphaMode.mjs.map
