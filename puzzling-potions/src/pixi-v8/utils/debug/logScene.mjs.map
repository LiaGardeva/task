{"version":3,"file":"logScene.mjs","sources":["../../../src/utils/debug/logScene.ts"],"sourcesContent":["/* eslint-disable no-console */\nimport { Sprite } from '../../rendering/sprite/shared/Sprite';\n\nimport type { Container } from '../../rendering/scene/Container';\nimport type { LayerGroup } from '../../rendering/scene/LayerGroup';\n\nconst colors = [\n    '#000080', // Navy Blue\n    '#228B22', // Forest Green\n    '#8B0000', // Dark Red\n    '#4169E1', // Royal Blue\n    '#008080', // Teal\n    '#800000', // Maroon\n    '#9400D3', // Dark Violet\n    '#FF8C00', // Dark Orange\n    '#556B2F', // Olive Green\n    '#8B008B' // Dark Magenta\n];\n\nlet colorTick = 0;\n\nexport function logScene(container: Container, depth = 0, data: {color?: string} = { color: '#000000' })\n{\n    if (container.isLayerRoot)\n    {\n        data.color = colors[colorTick++];\n    }\n\n    //    turn depth into number of spaces:\n    let spaces = '';\n\n    for (let i = 0; i < depth; i++)\n    {\n        spaces += '    ';\n    }\n\n    let label = container.label;\n\n    if (!label && container instanceof Sprite)\n    {\n        label = `sprite:${container.view.texture.label}`;\n    }\n\n    // eslint-disable-next-line max-len\n    let output = `%c ${spaces}|- ${label} (worldX:${container.worldTransform.tx}, layerX:${container.layerTransform.tx}, localX:${container.x})`;\n\n    if (container.isLayerRoot)\n    {\n        output += ' (LayerGroup)';\n    }\n\n    if (container.filters)\n    {\n        output += '(*filters)';\n    }\n\n    console.log(output, `color:${data.color}; font-weight:bold;`);\n\n    depth++;\n\n    for (let i = 0; i < container.children.length; i++)\n    {\n        const child = container.children[i];\n\n        logScene(child, depth, { ...data });\n    }\n}\n\nexport function logLayerGroupScene(\n    layerGroup: LayerGroup, depth = 0,\n    data: {index: number, color?: string} = { index: 0, color: '#000000' }\n)\n{\n    // if (!container.renderGroup) return;\n\n    // {\n    //     data.color = colors[colorTick++];\n    // }\n\n    //    turn depth into number of spaces:\n    let spaces = '';\n\n    for (let i = 0; i < depth; i++)\n    {\n        spaces += '    ';\n    }\n\n    const output = `%c ${spaces}- ${data.index}: ${layerGroup.root.label} worldX:${layerGroup.worldTransform.tx}`;\n    // make this red text\n\n    console.log(output, `color:${data.color}; font-weight:bold;`);\n\n    depth++;\n\n    for (let i = 0; i < layerGroup.layerGroupChildren.length; i++)\n    {\n        const child = layerGroup.layerGroupChildren[i];\n\n        logLayerGroupScene(child, depth, { ...data, index: i });\n    }\n}\n"],"names":[],"mappings":"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"}